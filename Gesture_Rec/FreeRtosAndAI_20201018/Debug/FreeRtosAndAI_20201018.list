
FreeRtosAndAI_20201018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b97c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d10  0800bc20  0800bc20  0001bc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e930  0800e930  000207e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e930  0800e930  0001e930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e938  0800e938  000207e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e938  0800e938  0001e938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e93c  0800e93c  0001e93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  24000000  0800e940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000720  0800f060  00020720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000780  0800f0c0  00020780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004a74  240007e0  0800f120  000207e0  2**2
                  ALLOC
 12 ._user_heap_stack 00002804  24005254  0800f120  00025254  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000207e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000400b3  00000000  00000000  0002080e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006939  00000000  00000000  000608c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002060  00000000  00000000  00067200  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001db8  00000000  00000000  00069260  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003f57a  00000000  00000000  0006b018  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000207c3  00000000  00000000  000aa592  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0017fcd1  00000000  00000000  000cad55  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024aa26  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e64  00000000  00000000  0024aaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007e0 	.word	0x240007e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bc04 	.word	0x0800bc04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007e4 	.word	0x240007e4
 80002dc:	0800bc04 	.word	0x0800bc04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_CRC_Init+0x3c>)
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <MX_CRC_Init+0x40>)
 8000688:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_CRC_Init+0x3c>)
 800068c:	2200      	movs	r2, #0
 800068e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_CRC_Init+0x3c>)
 8000692:	2200      	movs	r2, #0
 8000694:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_CRC_Init+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_CRC_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_CRC_Init+0x3c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_CRC_Init+0x3c>)
 80006aa:	f001 fa03 	bl	8001ab4 <HAL_CRC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006b4:	f000 fca8 	bl	8001008 <Error_Handler>
  }

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	240048f0 	.word	0x240048f0
 80006c0:	58024c00 	.word	0x58024c00

080006c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_CRC_MspInit+0x3c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10e      	bne.n	80006f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_CRC_MspInit+0x40>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <HAL_CRC_MspInit+0x40>)
 80006de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_CRC_MspInit+0x40>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024c00 	.word	0x58024c00
 8000704:	58024400 	.word	0x58024400

08000708 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ETH_Init+0x90>)
 800070e:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_ETH_Init+0x94>)
 8000710:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ETH_Init+0x90>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ETH_Init+0x90>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ETH_Init+0x90>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	3302      	adds	r3, #2
 800072a:	22e1      	movs	r2, #225	; 0xe1
 800072c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ETH_Init+0x90>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3303      	adds	r3, #3
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ETH_Init+0x90>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	3304      	adds	r3, #4
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_ETH_Init+0x90>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	3305      	adds	r3, #5
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ETH_Init+0x90>)
 800074e:	2201      	movs	r2, #1
 8000750:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ETH_Init+0x90>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_ETH_Init+0x98>)
 8000756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ETH_Init+0x90>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_ETH_Init+0x9c>)
 800075c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_ETH_Init+0x90>)
 8000760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x90>)
 8000768:	f001 fa8e 	bl	8001c88 <HAL_ETH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 fc49 	bl	8001008 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_ETH_Init+0xa0>)
 800077c:	f00a fa47 	bl	800ac0e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000782:	2221      	movs	r2, #33	; 0x21
 8000784:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24004914 	.word	0x24004914
 800079c:	40028000 	.word	0x40028000
 80007a0:	24000780 	.word	0x24000780
 80007a4:	24000720 	.word	0x24000720
 80007a8:	24004984 	.word	0x24004984

080007ac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a59      	ldr	r2, [pc, #356]	; (8000930 <HAL_ETH_MspInit+0x184>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	f040 80ab 	bne.w	8000926 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <HAL_ETH_MspInit+0x188>)
 80007d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d6:	4a57      	ldr	r2, [pc, #348]	; (8000934 <HAL_ETH_MspInit+0x188>)
 80007d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007e0:	4b54      	ldr	r3, [pc, #336]	; (8000934 <HAL_ETH_MspInit+0x188>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ea:	623b      	str	r3, [r7, #32]
 80007ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <HAL_ETH_MspInit+0x188>)
 80007f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f4:	4a4f      	ldr	r2, [pc, #316]	; (8000934 <HAL_ETH_MspInit+0x188>)
 80007f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fe:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800080e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000812:	4a48      	ldr	r2, [pc, #288]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800081e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b42      	ldr	r3, [pc, #264]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a40      	ldr	r2, [pc, #256]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a39      	ldr	r2, [pc, #228]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <HAL_ETH_MspInit+0x188>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <HAL_ETH_MspInit+0x188>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008a2:	2332      	movs	r3, #50	; 0x32
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	481e      	ldr	r0, [pc, #120]	; (8000938 <HAL_ETH_MspInit+0x18c>)
 80008be:	f001 fdf9 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008c2:	2386      	movs	r3, #134	; 0x86
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d2:	230b      	movs	r3, #11
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <HAL_ETH_MspInit+0x190>)
 80008de:	f001 fde9 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f4:	230b      	movs	r3, #11
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4810      	ldr	r0, [pc, #64]	; (8000940 <HAL_ETH_MspInit+0x194>)
 8000900:	f001 fdd8 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000904:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000916:	230b      	movs	r3, #11
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <HAL_ETH_MspInit+0x198>)
 8000922:	f001 fdc7 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000926:	bf00      	nop
 8000928:	3738      	adds	r7, #56	; 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40028000 	.word	0x40028000
 8000934:	58024400 	.word	0x58024400
 8000938:	58020800 	.word	0x58020800
 800093c:	58020000 	.word	0x58020000
 8000940:	58020400 	.word	0x58020400
 8000944:	58021800 	.word	0x58021800

08000948 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <vApplicationGetIdleTaskMemory+0x2c>)
 8000958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <vApplicationGetIdleTaskMemory+0x30>)
 800095e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	240007fc 	.word	0x240007fc
 8000978:	24000850 	.word	0x24000850

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_FREERTOS_Init+0x7c>)
 8000984:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000988:	461d      	mov	r5, r3
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000996:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f006 fe5e 	bl	800765e <osThreadCreate>
 80009a2:	4602      	mov	r2, r0
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_FREERTOS_Init+0x80>)
 80009a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_FREERTOS_Init+0x84>)
 80009aa:	f107 0420 	add.w	r4, r7, #32
 80009ae:	461d      	mov	r5, r3
 80009b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fe4b 	bl	800765e <osThreadCreate>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_FREERTOS_Init+0x88>)
 80009cc:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_FREERTOS_Init+0x8c>)
 80009d0:	1d3c      	adds	r4, r7, #4
 80009d2:	461d      	mov	r5, r3
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 fe3a 	bl	800765e <osThreadCreate>
 80009ea:	4602      	mov	r2, r0
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_FREERTOS_Init+0x90>)
 80009ee:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009f0:	bf00      	nop
 80009f2:	3758      	adds	r7, #88	; 0x58
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bdb0      	pop	{r4, r5, r7, pc}
 80009f8:	0800bc2c 	.word	0x0800bc2c
 80009fc:	240049b8 	.word	0x240049b8
 8000a00:	0800bc54 	.word	0x0800bc54
 8000a04:	240049bc 	.word	0x240049bc
 8000a08:	0800bc7c 	.word	0x0800bc7c
 8000a0c:	240049c0 	.word	0x240049c0

08000a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <StartDefaultTask+0x20>)
 8000a1c:	f001 ff13 	bl	8002846 <HAL_GPIO_TogglePin>
	  MX_X_CUBE_AI_Process();
 8000a20:	f008 f8c4 	bl	8008bac <MX_X_CUBE_AI_Process>
	  HandRecResultPrint();
 8000a24:	f008 fb0a 	bl	800903c <HandRecResultPrint>
	  osDelay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f006 fe64 	bl	80076f6 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a2e:	e7f3      	b.n	8000a18 <StartDefaultTask+0x8>
 8000a30:	58020400 	.word	0x58020400

08000a34 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t data_to_send[3] = {0xAA, (uint8_t)XBQ_HandRec.result, 0x55};
 8000a3c:	23aa      	movs	r3, #170	; 0xaa
 8000a3e:	733b      	strb	r3, [r7, #12]
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <StartTask02+0x3c>)
 8000a42:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8000a46:	737b      	strb	r3, [r7, #13]
 8000a48:	2355      	movs	r3, #85	; 0x55
 8000a4a:	73bb      	strb	r3, [r7, #14]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <StartTask02+0x40>)
 8000a50:	f001 fef9 	bl	8002846 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, &data_to_send, 3, HAL_MAX_DELAY);
 8000a54:	f107 010c 	add.w	r1, r7, #12
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <StartTask02+0x44>)
 8000a60:	f005 fa66 	bl	8005f30 <HAL_UART_Transmit>
	  osDelay(500);
 8000a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a68:	f006 fe45 	bl	80076f6 <osDelay>
  {
 8000a6c:	e7e6      	b.n	8000a3c <StartTask02+0x8>
 8000a6e:	bf00      	nop
 8000a70:	24005138 	.word	0x24005138
 8000a74:	58021000 	.word	0x58021000
 8000a78:	24004ae8 	.word	0x24004ae8

08000a7c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a88:	f006 fe35 	bl	80076f6 <osDelay>
 8000a8c:	e7fa      	b.n	8000a84 <StartTask03+0x8>
	...

08000a90 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b64      	ldr	r3, [pc, #400]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a62      	ldr	r2, [pc, #392]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b60      	ldr	r3, [pc, #384]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac4:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	4a5b      	ldr	r2, [pc, #364]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad4:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af2:	4b51      	ldr	r3, [pc, #324]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b10:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a35      	ldr	r2, [pc, #212]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_GPIO_Init+0x1a8>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <MX_GPIO_Init+0x1ac>)
 8000b80:	f001 fe48 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b8a:	482d      	ldr	r0, [pc, #180]	; (8000c40 <MX_GPIO_Init+0x1b0>)
 8000b8c:	f001 fe42 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2108      	movs	r1, #8
 8000b94:	482a      	ldr	r0, [pc, #168]	; (8000c40 <MX_GPIO_Init+0x1b0>)
 8000b96:	f001 fe3d 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <MX_GPIO_Init+0x1b4>)
 8000ba0:	f001 fe38 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_GPIO_Init+0x1b8>)
 8000bba:	f001 fc7b 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bbe:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4819      	ldr	r0, [pc, #100]	; (8000c3c <MX_GPIO_Init+0x1ac>)
 8000bd8:	f001 fc6c 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD3 PD4 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8000bdc:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MX_GPIO_Init+0x1b0>)
 8000bf6:	f001 fc5d 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_GPIO_Init+0x1bc>)
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_GPIO_Init+0x1c0>)
 8000c0e:	f001 fc51 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x1b4>)
 8000c2a:	f001 fc43 	bl	80024b4 <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020400 	.word	0x58020400
 8000c40:	58020c00 	.word	0x58020c00
 8000c44:	58021000 	.word	0x58021000
 8000c48:	58020800 	.word	0x58020800
 8000c4c:	11110000 	.word	0x11110000
 8000c50:	58021800 	.word	0x58021800

08000c54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C1_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <MX_I2C1_Init+0x7c>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c90:	f001 fdf4 	bl	800287c <HAL_I2C_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c9a:	f000 f9b5 	bl	8001008 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000ca2:	f002 f95d 	bl	8002f60 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 f9ac 	bl	8001008 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000cb4:	f002 f99f 	bl	8002ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f9a3 	bl	8001008 <Error_Handler>
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	240049c4 	.word	0x240049c4
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	307075b1 	.word	0x307075b1

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <HAL_I2C_MspInit+0x88>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12e      	bne.n	8000d54 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1a:	2312      	movs	r3, #18
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <HAL_I2C_MspInit+0x90>)
 8000d32:	f001 fbbf 	bl	80024b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400

08000d68 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d70:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <SCB_EnableICache+0x3c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SCB_EnableICache+0x3c>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <SCB_EnableICache+0x3c>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d94:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <SCB_EnableDCache+0x7c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SCB_EnableDCache+0x7c>)
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dc0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0b5b      	lsrs	r3, r3, #13
 8000dc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dd4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	015a      	lsls	r2, r3, #5
 8000dda:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dde:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de4:	490f      	ldr	r1, [pc, #60]	; (8000e24 <SCB_EnableDCache+0x7c>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1ef      	bne.n	8000dd6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	60fa      	str	r2, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1e5      	bne.n	8000dcc <SCB_EnableDCache+0x24>
 8000e00:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <SCB_EnableDCache+0x7c>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <SCB_EnableDCache+0x7c>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	6153      	str	r3, [r2, #20]
 8000e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e14:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e2c:	f7ff ff9c 	bl	8000d68 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e30:	f7ff ffba 	bl	8000da8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fcc0 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f816 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f7ff fe28 	bl	8000a90 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e40:	f7ff fc62 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e44:	f000 fb04 	bl	8001450 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e48:	f000 fc02 	bl	8001650 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000e4c:	f7ff fc18 	bl	8000680 <MX_CRC_Init>
  MX_I2C1_Init();
 8000e50:	f7ff ff00 	bl	8000c54 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 faaa 	bl	80013ac <MX_USART2_UART_Init>
  MX_X_CUBE_AI_Init();
 8000e58:	f007 fe9e 	bl	8008b98 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e5c:	f7ff fd8e 	bl	800097c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000e60:	f006 fbf6 	bl	8007650 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <main+0x3c>
	...

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0cc      	sub	sp, #304	; 0x130
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e72:	224c      	movs	r2, #76	; 0x4c
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 fec9 	bl	800ac0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e80:	2220      	movs	r2, #32
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f009 fec2 	bl	800ac0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4618      	mov	r0, r3
 8000e90:	23bc      	movs	r3, #188	; 0xbc
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f009 feba 	bl	800ac0e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f002 fa40 	bl	8003320 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <SystemClock_Config+0x170>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <SystemClock_Config+0x170>)
 8000eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <SystemClock_Config+0x170>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <SystemClock_Config+0x174>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <SystemClock_Config+0x174>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eca:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <SystemClock_Config+0x174>)
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eda:	bf00      	nop
 8000edc:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <SystemClock_Config+0x170>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee8:	d1f8      	bne.n	8000edc <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000f0a:	2378      	movs	r3, #120	; 0x78
 8000f0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000f16:	2314      	movs	r3, #20
 8000f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f22:	230c      	movs	r3, #12
 8000f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fa3b 	bl	80033b4 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f44:	f000 f860 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	233f      	movs	r3, #63	; 0x3f
 8000f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f60:	2340      	movs	r3, #64	; 0x40
 8000f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f74:	2340      	movs	r3, #64	; 0x40
 8000f76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fe27 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000f8c:	f000 f83c 	bl	8001008 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <SystemClock_Config+0x178>)
 8000f96:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 f9d0 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000fc6:	f000 f81f 	bl	8001008 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000fca:	f002 f9e3 	bl	8003394 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000fce:	bf00      	nop
 8000fd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024800 	.word	0x58024800
 8000fdc:	58000400 	.word	0x58000400
 8000fe0:	0004000a 	.word	0x0004000a

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff6:	f000 fc1b 	bl	8001830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010000 	.word	0x40010000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x30>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x30>)
 8001030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2019      	movs	r0, #25
 8001062:	f000 fcff 	bl	8001a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001066:	2019      	movs	r0, #25
 8001068:	f000 fd16 	bl	8001a98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_InitTick+0xa8>)
 800106e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_InitTick+0xa8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_InitTick+0xa8>)
 800107e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f921 	bl	80042dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800109a:	f003 f909 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 800109e:	4603      	mov	r3, r0
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_InitTick+0xac>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	3b01      	subs	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0xb0>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_InitTick+0xb4>)
 80010b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_InitTick+0xb0>)
 80010ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_InitTick+0xb0>)
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_InitTick+0xb0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_InitTick+0xb0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_InitTick+0xb0>)
 80010d4:	f004 fc44 	bl	8005960 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_InitTick+0xb0>)
 80010e0:	f004 fca0 	bl	8005a24 <HAL_TIM_Base_Start_IT>
 80010e4:	4603      	mov	r3, r0
 80010e6:	e000      	b.n	80010ea <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3738      	adds	r7, #56	; 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	58024400 	.word	0x58024400
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	24004a10 	.word	0x24004a10
 8001100:	40010000 	.word	0x40010000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_UP_IRQHandler+0x10>)
 800113e:	f004 fca7 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24004a10 	.word	0x24004a10

0800114c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
	}

return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e009      	b.n	80011ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	60ba      	str	r2, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa43 	bl	800162c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf1      	blt.n	8001198 <_write+0x12>
	}
	return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f009 fca4 	bl	800aba4 <__errno>
 800125c:	4602      	mov	r2, r0
 800125e:	230c      	movs	r3, #12
 8001260:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24080000 	.word	0x24080000
 8001288:	00000800 	.word	0x00000800
 800128c:	24000a50 	.word	0x24000a50
 8001290:	24005258 	.word	0x24005258

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <SystemInit+0xec>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a38      	ldr	r2, [pc, #224]	; (8001380 <SystemInit+0xec>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <SystemInit+0xf0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	d807      	bhi.n	80012c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <SystemInit+0xf0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 030f 	bic.w	r3, r3, #15
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <SystemInit+0xf0>)
 80012be:	f043 0307 	orr.w	r3, r3, #7
 80012c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <SystemInit+0xf4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <SystemInit+0xf4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <SystemInit+0xf4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <SystemInit+0xf4>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	492b      	ldr	r1, [pc, #172]	; (8001388 <SystemInit+0xf4>)
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <SystemInit+0xf8>)
 80012de:	4013      	ands	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <SystemInit+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d907      	bls.n	80012fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <SystemInit+0xf0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 030f 	bic.w	r3, r3, #15
 80012f6:	4a23      	ldr	r2, [pc, #140]	; (8001384 <SystemInit+0xf0>)
 80012f8:	f043 0307 	orr.w	r3, r3, #7
 80012fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <SystemInit+0xf4>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <SystemInit+0xf4>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <SystemInit+0xf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <SystemInit+0xf4>)
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <SystemInit+0xfc>)
 8001314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <SystemInit+0xf4>)
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <SystemInit+0x100>)
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <SystemInit+0xf4>)
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <SystemInit+0x104>)
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <SystemInit+0xf4>)
 8001324:	2200      	movs	r2, #0
 8001326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <SystemInit+0xf4>)
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <SystemInit+0x104>)
 800132c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <SystemInit+0xf4>)
 8001330:	2200      	movs	r2, #0
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <SystemInit+0xf4>)
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <SystemInit+0x104>)
 8001338:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <SystemInit+0xf4>)
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <SystemInit+0xf4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <SystemInit+0xf4>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <SystemInit+0xf4>)
 800134e:	2200      	movs	r2, #0
 8001350:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <SystemInit+0x108>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <SystemInit+0x10c>)
 8001358:	4013      	ands	r3, r2
 800135a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800135e:	d202      	bcs.n	8001366 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <SystemInit+0x110>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <SystemInit+0x114>)
 8001368:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800136c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SystemInit+0xec>)
 8001370:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001374:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	52002000 	.word	0x52002000
 8001388:	58024400 	.word	0x58024400
 800138c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001390:	02020200 	.word	0x02020200
 8001394:	01ff0000 	.word	0x01ff0000
 8001398:	01010280 	.word	0x01010280
 800139c:	5c001000 	.word	0x5c001000
 80013a0:	ffff0000 	.word	0xffff0000
 80013a4:	51008108 	.word	0x51008108
 80013a8:	52004000 	.word	0x52004000

080013ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013b2:	4a26      	ldr	r2, [pc, #152]	; (800144c <MX_USART2_UART_Init+0xa0>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 80013f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4812      	ldr	r0, [pc, #72]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 8001400:	f004 fd46 	bl	8005e90 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 800140a:	f7ff fdfd 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 8001412:	f005 fd76 	bl	8006f02 <HAL_UARTEx_SetTxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x74>
  {
    Error_Handler();
 800141c:	f7ff fdf4 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 8001424:	f005 fdab 	bl	8006f7e <HAL_UARTEx_SetRxFifoThreshold>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x86>
  {
    Error_Handler();
 800142e:	f7ff fdeb 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x9c>)
 8001434:	f005 fd2c 	bl	8006e90 <HAL_UARTEx_DisableFifoMode>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x96>
  {
    Error_Handler();
 800143e:	f7ff fde3 	bl	8001008 <Error_Handler>
  }

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24004ae8 	.word	0x24004ae8
 800144c:	40004400 	.word	0x40004400

08001450 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <MX_USART3_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 800149a:	f004 fcf9 	bl	8005e90 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a4:	f7ff fdb0 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ac:	f005 fd29 	bl	8006f02 <HAL_UARTEx_SetTxFifoThreshold>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014b6:	f7ff fda7 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014be:	f005 fd5e 	bl	8006f7e <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f7ff fd9e 	bl	8001008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ce:	f005 fcdf 	bl	8006e90 <HAL_UARTEx_DisableFifoMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f7ff fd96 	bl	8001008 <Error_Handler>
  }

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24004a5c 	.word	0x24004a5c
 80014e4:	40004800 	.word	0x40004800

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a44      	ldr	r2, [pc, #272]	; (8001618 <HAL_UART_MspInit+0x130>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d14d      	bne.n	80015a6 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_UART_MspInit+0x134>)
 800150c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <HAL_UART_MspInit+0x134>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_UART_MspInit+0x134>)
 800151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_UART_MspInit+0x134>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	4a3b      	ldr	r2, [pc, #236]	; (800161c <HAL_UART_MspInit+0x134>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_UART_MspInit+0x134>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_UART_MspInit+0x134>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	4a33      	ldr	r2, [pc, #204]	; (800161c <HAL_UART_MspInit+0x134>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_UART_MspInit+0x134>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA0     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001574:	2307      	movs	r3, #7
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4828      	ldr	r0, [pc, #160]	; (8001620 <HAL_UART_MspInit+0x138>)
 8001580:	f000 ff98 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001584:	2360      	movs	r3, #96	; 0x60
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001594:	2307      	movs	r3, #7
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <HAL_UART_MspInit+0x13c>)
 80015a0:	f000 ff88 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015a4:	e033      	b.n	800160e <HAL_UART_MspInit+0x126>
  else if(uartHandle->Instance==USART3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_UART_MspInit+0x140>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d12e      	bne.n	800160e <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_UART_MspInit+0x134>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x134>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_UART_MspInit+0x134>)
 80015c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_UART_MspInit+0x134>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <HAL_UART_MspInit+0x134>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_UART_MspInit+0x134>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fe:	2307      	movs	r3, #7
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_UART_MspInit+0x13c>)
 800160a:	f000 ff53 	bl	80024b4 <HAL_GPIO_Init>
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004400 	.word	0x40004400
 800161c:	58024400 	.word	0x58024400
 8001620:	58020000 	.word	0x58020000
 8001624:	58020c00 	.word	0x58020c00
 8001628:	40004800 	.word	0x40004800

0800162c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001634:	1d39      	adds	r1, r7, #4
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2201      	movs	r2, #1
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <__io_putchar+0x20>)
 800163e:	f004 fc77 	bl	8005f30 <HAL_UART_Transmit>
    return ch;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	24004a5c 	.word	0x24004a5c

08001650 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001658:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800165c:	2209      	movs	r2, #9
 800165e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001662:	2202      	movs	r2, #2
 8001664:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800166e:	2202      	movs	r2, #2
 8001670:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001674:	2201      	movs	r2, #1
 8001676:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001686:	2201      	movs	r2, #1
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800168c:	2201      	movs	r2, #1
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001692:	2200      	movs	r2, #0
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001698:	f001 fcf9 	bl	800308e <HAL_PCD_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80016a2:	f7ff fcb1 	bl	8001008 <Error_Handler>
  }

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	24004b74 	.word	0x24004b74
 80016b0:	40080000 	.word	0x40080000

080016b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_PCD_MspInit+0xa4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d13b      	bne.n	800174e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_PCD_MspInit+0xa8>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_PCD_MspInit+0xa8>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_PCD_MspInit+0xa8>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016f4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001706:	230a      	movs	r3, #10
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <HAL_PCD_MspInit+0xac>)
 8001712:	f000 fecf 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <HAL_PCD_MspInit+0xac>)
 800172c:	f000 fec2 	bl	80024b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_PCD_MspInit+0xa8>)
 8001732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_PCD_MspInit+0xa8>)
 8001738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800173c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_PCD_MspInit+0xa8>)
 8001742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40080000 	.word	0x40080000
 800175c:	58024400 	.word	0x58024400
 8001760:	58020000 	.word	0x58020000

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001768:	f7ff fd94 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800176c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800176e:	e003      	b.n	8001778 <LoopCopyDataInit>

08001770 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001772:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001774:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001776:	3104      	adds	r1, #4

08001778 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800177c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800177e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001780:	d3f6      	bcc.n	8001770 <CopyDataInit>
  ldr  r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001784:	e002      	b.n	800178c <LoopFillZerobss>

08001786 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001786:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001788:	f842 3b04 	str.w	r3, [r2], #4

0800178c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800178e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001790:	d3f9      	bcc.n	8001786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f009 fa0d 	bl	800abb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fb47 	bl	8000e28 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80017a0:	0800e940 	.word	0x0800e940
  ldr  r0, =_sdata
 80017a4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017a8:	24000720 	.word	0x24000720
  ldr  r2, =_sbss
 80017ac:	240007e0 	.word	0x240007e0
  ldr  r3, = _ebss
 80017b0:	24005254 	.word	0x24005254

080017b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC3_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017be:	2003      	movs	r0, #3
 80017c0:	f000 f945 	bl	8001a4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c4:	f002 fbbc 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_Init+0x6c>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
 80017e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_Init+0x6c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_Init+0x70>)
 80017fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_Init+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fc22 	bl	800104c <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fc01 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58024400 	.word	0x58024400
 8001824:	0800bce4 	.word	0x0800bce4
 8001828:	24000004 	.word	0x24000004
 800182c:	24000000 	.word	0x24000000

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2400000c 	.word	0x2400000c
 8001854:	24004f7c 	.word	0x24004f7c

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	24004f7c 	.word	0x24004f7c

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_Delay+0x40>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2400000c 	.word	0x2400000c

080018b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetREVID+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0c1b      	lsrs	r3, r3, #16
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	5c001000 	.word	0x5c001000

080018cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80018dc:	4904      	ldr	r1, [pc, #16]	; (80018f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	58000400 	.word	0x58000400

080018f4 <__NVIC_SetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4c 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a72:	f7ff ff63 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7ff ffb3 	bl	80019e8 <NVIC_EncodePriority>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff82 	bl	8001994 <__NVIC_SetPriority>
}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff56 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e054      	b.n	8001b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7f5b      	ldrb	r3, [r3, #29]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe fdf4 	bl	80006c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_CRC_Init+0xc4>)
 8001af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0218 	bic.w	r2, r2, #24
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	e00c      	b.n	8001b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f834 	bl	8001b7c <HAL_CRCEx_Polynomial_Set>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e028      	b.n	8001b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	e004      	b.n	8001b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6912      	ldr	r2, [r2, #16]
 8001b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	04c11db7 	.word	0x04c11db7

08001b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b8c:	231f      	movs	r3, #31
 8001b8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b90:	bf00      	nop
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	613a      	str	r2, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b18      	cmp	r3, #24
 8001bb4:	d846      	bhi.n	8001c44 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001c4b 	.word	0x08001c4b
 8001bc0:	08001c45 	.word	0x08001c45
 8001bc4:	08001c45 	.word	0x08001c45
 8001bc8:	08001c45 	.word	0x08001c45
 8001bcc:	08001c45 	.word	0x08001c45
 8001bd0:	08001c45 	.word	0x08001c45
 8001bd4:	08001c45 	.word	0x08001c45
 8001bd8:	08001c45 	.word	0x08001c45
 8001bdc:	08001c39 	.word	0x08001c39
 8001be0:	08001c45 	.word	0x08001c45
 8001be4:	08001c45 	.word	0x08001c45
 8001be8:	08001c45 	.word	0x08001c45
 8001bec:	08001c45 	.word	0x08001c45
 8001bf0:	08001c45 	.word	0x08001c45
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	08001c2d 	.word	0x08001c2d
 8001c00:	08001c45 	.word	0x08001c45
 8001c04:	08001c45 	.word	0x08001c45
 8001c08:	08001c45 	.word	0x08001c45
 8001c0c:	08001c45 	.word	0x08001c45
 8001c10:	08001c45 	.word	0x08001c45
 8001c14:	08001c45 	.word	0x08001c45
 8001c18:	08001c45 	.word	0x08001c45
 8001c1c:	08001c21 	.word	0x08001c21
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d913      	bls.n	8001c4e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c2a:	e010      	b.n	8001c4e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d90f      	bls.n	8001c52 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c36:	e00c      	b.n	8001c52 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	d90b      	bls.n	8001c56 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c42:	e008      	b.n	8001c56 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	75fb      	strb	r3, [r7, #23]
      break;
 8001c48:	e006      	b.n	8001c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e004      	b.n	8001c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e002      	b.n	8001c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c52:	bf00      	nop
 8001c54:	e000      	b.n	8001c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c56:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10d      	bne.n	8001c7a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 0118 	bic.w	r1, r3, #24
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0c6      	b.n	8001e28 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fd82 	bl	80007ac <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2223      	movs	r2, #35	; 0x23
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_ETH_Init+0x1a8>)
 8001cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb4:	4a5e      	ldr	r2, [pc, #376]	; (8001e30 <HAL_ETH_Init+0x1a8>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <HAL_ETH_Init+0x1a8>)
 8001cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7a1b      	ldrb	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fdf9 	bl	80018cc <HAL_SYSCFG_ETHInterfaceSelect>
 8001cda:	e003      	b.n	8001ce4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001cdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ce0:	f7ff fdf4 	bl	80018cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7ff fdac 	bl	8001858 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d02:	e00f      	b.n	8001d24 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001d04:	f7ff fda8 	bl	8001858 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d12:	d907      	bls.n	8001d24 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2204      	movs	r2, #4
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	22e0      	movs	r2, #224	; 0xe0
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e081      	b.n	8001e28 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e6      	bne.n	8001d04 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fac0 	bl	80022bc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d3c:	f002 fa72 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_ETH_Init+0x1ac>)
 8001d44:	fba3 2302 	umull	r2, r3, r3, r2
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fa13 	bl	8002180 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d70:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d74:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	22e0      	movs	r2, #224	; 0xe0
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e04a      	b.n	8001e28 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_ETH_Init+0x1b0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6952      	ldr	r2, [r2, #20]
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6809      	ldr	r1, [r1, #0]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	f241 1308 	movw	r3, #4360	; 0x1108
 8001db2:	440b      	add	r3, r1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fad8 	bl	800236c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fb1c 	bl	80023fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	3305      	adds	r3, #5
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	021a      	lsls	r2, r3, #8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	3303      	adds	r3, #3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	3302      	adds	r3, #2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e0e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2210      	movs	r2, #16
 8001e24:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	ffff8001 	.word	0xffff8001

08001e3c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001e4e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001e56:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7b1b      	ldrb	r3, [r3, #12]
 8001e5c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001e5e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7b5b      	ldrb	r3, [r3, #13]
 8001e64:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e66:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	7b9b      	ldrb	r3, [r3, #14]
 8001e6c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7bdb      	ldrb	r3, [r3, #15]
 8001e74:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e76:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	7c12      	ldrb	r2, [r2, #16]
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d102      	bne.n	8001e86 <ETH_SetMACConfig+0x4a>
 8001e80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e84:	e000      	b.n	8001e88 <ETH_SetMACConfig+0x4c>
 8001e86:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e88:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	7c52      	ldrb	r2, [r2, #17]
 8001e8e:	2a00      	cmp	r2, #0
 8001e90:	d102      	bne.n	8001e98 <ETH_SetMACConfig+0x5c>
 8001e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e96:	e000      	b.n	8001e9a <ETH_SetMACConfig+0x5e>
 8001e98:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e9a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	7c9b      	ldrb	r3, [r3, #18]
 8001ea0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ea2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ea8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001eae:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	7f1b      	ldrb	r3, [r3, #28]
 8001eb4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001eb6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7f5b      	ldrb	r3, [r3, #29]
 8001ebc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001ebe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	7f92      	ldrb	r2, [r2, #30]
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d102      	bne.n	8001ece <ETH_SetMACConfig+0x92>
 8001ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ecc:	e000      	b.n	8001ed0 <ETH_SetMACConfig+0x94>
 8001ece:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ed0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7fdb      	ldrb	r3, [r3, #31]
 8001ed6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ed8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ee0:	2a00      	cmp	r2, #0
 8001ee2:	d102      	bne.n	8001eea <ETH_SetMACConfig+0xae>
 8001ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee8:	e000      	b.n	8001eec <ETH_SetMACConfig+0xb0>
 8001eea:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001eec:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ef2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001efa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001efc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b56      	ldr	r3, [pc, #344]	; (8002068 <ETH_SetMACConfig+0x22c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f26:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001f28:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f30:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001f32:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001f3a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001f3c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d102      	bne.n	8001f4e <ETH_SetMACConfig+0x112>
 8001f48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x114>
 8001f4e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001f50:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <ETH_SetMACConfig+0x230>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	68f9      	ldr	r1, [r7, #12]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f74:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <ETH_SetMACConfig+0x234>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f98:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f9e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	d101      	bne.n	8001fae <ETH_SetMACConfig+0x172>
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	e000      	b.n	8001fb0 <ETH_SetMACConfig+0x174>
 8001fae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001fb0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	68f9      	ldr	r1, [r7, #12]
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001fd8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001fe0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f023 0103 	bic.w	r1, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002006:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002022:	2a00      	cmp	r2, #0
 8002024:	d101      	bne.n	800202a <ETH_SetMACConfig+0x1ee>
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	e000      	b.n	800202c <ETH_SetMACConfig+0x1f0>
 800202a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800202c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002034:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002036:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800203e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800204c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	430a      	orrs	r2, r1
 8002058:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	00048083 	.word	0x00048083
 800206c:	c0f88000 	.word	0xc0f88000
 8002070:	fffffef0 	.word	0xfffffef0

08002074 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b38      	ldr	r3, [pc, #224]	; (800216c <ETH_SetDMAConfig+0xf8>)
 800208a:	4013      	ands	r3, r2
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	431a      	orrs	r2, r3
 8002096:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800209a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80020a6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	7b1b      	ldrb	r3, [r3, #12]
 80020ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80020ba:	4413      	add	r3, r2
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <ETH_SetDMAConfig+0xfc>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	f241 0304 	movw	r3, #4100	; 0x1004
 80020ce:	440b      	add	r3, r1
 80020d0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	7b5b      	ldrb	r3, [r3, #13]
 80020d6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <ETH_SetDMAConfig+0x100>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6811      	ldr	r1, [r2, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80020fa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	7d1b      	ldrb	r3, [r3, #20]
 8002104:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002106:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	7f5b      	ldrb	r3, [r3, #29]
 800210c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f241 1304 	movw	r3, #4356	; 0x1104
 800211a:	4413      	add	r3, r2
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <ETH_SetDMAConfig+0x104>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6811      	ldr	r1, [r2, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	431a      	orrs	r2, r3
 800212a:	f241 1304 	movw	r3, #4356	; 0x1104
 800212e:	440b      	add	r3, r1
 8002130:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7f1b      	ldrb	r3, [r3, #28]
 8002136:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f241 1308 	movw	r3, #4360	; 0x1108
 8002148:	4413      	add	r3, r2
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <ETH_SetDMAConfig+0x108>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6811      	ldr	r1, [r2, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	431a      	orrs	r2, r3
 8002158:	f241 1308 	movw	r3, #4360	; 0x1108
 800215c:	440b      	add	r3, r1
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	ffff87fd 	.word	0xffff87fd
 8002170:	ffff2ffe 	.word	0xffff2ffe
 8002174:	fffec000 	.word	0xfffec000
 8002178:	ffc0efef 	.word	0xffc0efef
 800217c:	7fc0ffff 	.word	0x7fc0ffff

08002180 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0a4      	sub	sp, #144	; 0x90
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800218e:	2300      	movs	r3, #0
 8002190:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80021d8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80021fa:	2300      	movs	r3, #0
 80021fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80021fe:	2300      	movs	r3, #0
 8002200:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002202:	2300      	movs	r3, #0
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002218:	2320      	movs	r3, #32
 800221a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800222a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002230:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002234:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800225a:	2300      	movs	r3, #0
 800225c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fde6 	bl	8001e3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002270:	2301      	movs	r3, #1
 8002272:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800228a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800228e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002298:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80022a0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fee1 	bl	8002074 <ETH_SetDMAConfig>
}
 80022b2:	bf00      	nop
 80022b4:	3790      	adds	r7, #144	; 0x90
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022d6:	f001 ffa5 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 80022da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d908      	bls.n	80022f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d804      	bhi.n	80022f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e027      	b.n	8002346 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d908      	bls.n	8002310 <ETH_MAC_MDIO_ClkConfig+0x54>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d804      	bhi.n	8002310 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e01a      	b.n	8002346 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d903      	bls.n	8002320 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d911      	bls.n	8002344 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d908      	bls.n	800233a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d804      	bhi.n	800233a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e005      	b.n	8002346 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e000      	b.n	8002346 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002344:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	01312cff 	.word	0x01312cff
 800235c:	02160ebf 	.word	0x02160ebf
 8002360:	039386ff 	.word	0x039386ff
 8002364:	05f5e0ff 	.word	0x05f5e0ff
 8002368:	08f0d17f 	.word	0x08f0d17f

0800236c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e01d      	b.n	80023b6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	3206      	adds	r2, #6
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d9de      	bls.n	800237a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f241 132c 	movw	r3, #4396	; 0x112c
 80023ca:	4413      	add	r3, r2
 80023cc:	2203      	movs	r2, #3
 80023ce:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68d9      	ldr	r1, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f241 1314 	movw	r3, #4372	; 0x1114
 80023dc:	4413      	add	r3, r2
 80023de:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e024      	b.n	8002452 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	330a      	adds	r3, #10
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d9d7      	bls.n	8002408 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f241 1330 	movw	r3, #4400	; 0x1130
 800247e:	4413      	add	r3, r2
 8002480:	2203      	movs	r2, #3
 8002482:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6919      	ldr	r1, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002490:	4413      	add	r3, r2
 8002492:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f241 1328 	movw	r3, #4392	; 0x1128
 80024a4:	4413      	add	r3, r2
 80024a6:	6019      	str	r1, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_GPIO_Init+0x234>)
 80024c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c6:	e194      	b.n	80027f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8186 	beq.w	80027ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d00b      	beq.n	8002500 <HAL_GPIO_Init+0x4c>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d007      	beq.n	8002500 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f4:	2b11      	cmp	r3, #17
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d130      	bne.n	8002562 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002536:	2201      	movs	r2, #1
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0201 	and.w	r2, r3, #1
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0xee>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d123      	bne.n	80025ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80e0 	beq.w	80027ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x238>)
 800262e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002632:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_GPIO_Init+0x238>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_GPIO_Init+0x238>)
 800263e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264a:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_GPIO_Init+0x23c>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_GPIO_Init+0x240>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d052      	beq.n	800271c <HAL_GPIO_Init+0x268>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_GPIO_Init+0x244>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <HAL_GPIO_Init+0x248>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_GPIO_Init+0x24c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_GPIO_Init+0x250>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_GPIO_Init+0x254>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_GPIO_Init+0x258>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x21a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_GPIO_Init+0x25c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x216>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_GPIO_Init+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x212>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_GPIO_Init+0x264>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20e>
 80026be:	2309      	movs	r3, #9
 80026c0:	e02d      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026c2:	230a      	movs	r3, #10
 80026c4:	e02b      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e029      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e027      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e025      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e023      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e021      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026da:	2303      	movs	r3, #3
 80026dc:	e01f      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e01d      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e01b      	b.n	800271e <HAL_GPIO_Init+0x26a>
 80026e6:	bf00      	nop
 80026e8:	58000080 	.word	0x58000080
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58000400 	.word	0x58000400
 80026f4:	58020000 	.word	0x58020000
 80026f8:	58020400 	.word	0x58020400
 80026fc:	58020800 	.word	0x58020800
 8002700:	58020c00 	.word	0x58020c00
 8002704:	58021000 	.word	0x58021000
 8002708:	58021400 	.word	0x58021400
 800270c:	58021800 	.word	0x58021800
 8002710:	58021c00 	.word	0x58021c00
 8002714:	58022000 	.word	0x58022000
 8002718:	58022400 	.word	0x58022400
 800271c:	2300      	movs	r3, #0
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	f002 0203 	and.w	r2, r2, #3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4093      	lsls	r3, r2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272e:	4938      	ldr	r1, [pc, #224]	; (8002810 <HAL_GPIO_Init+0x35c>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f ae63 	bne.w	80024c8 <HAL_GPIO_Init+0x14>
  }
}
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	58000400 	.word	0x58000400

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	401a      	ands	r2, r3
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	429a      	cmp	r2, r3
 800285e:	d104      	bne.n	800286a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	041a      	lsls	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002868:	e002      	b.n	8002870 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fa16 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e006      	b.n	8002904 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d104      	bne.n	8002916 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_I2C_Init+0x11c>)
 8002922:	430b      	orrs	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	ea42 0103 	orr.w	r1, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	021a      	lsls	r2, r3, #8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69d9      	ldr	r1, [r3, #28]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	02008000 	.word	0x02008000

0800299c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	817b      	strh	r3, [r7, #10]
 80029ae:	460b      	mov	r3, r1
 80029b0:	813b      	strh	r3, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	f040 80fd 	bne.w	8002bbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x34>
 80029ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0f1      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_I2C_Mem_Read+0x4e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0ea      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029f2:	f7fe ff31 	bl	8001858 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2319      	movs	r3, #25
 80029fe:	2201      	movs	r2, #1
 8002a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f95b 	bl	8002cc0 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0d5      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2222      	movs	r2, #34	; 0x22
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a3c:	88f8      	ldrh	r0, [r7, #6]
 8002a3e:	893a      	ldrh	r2, [r7, #8]
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f8bf 	bl	8002bd0 <I2C_RequestMemoryRead>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0ad      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	d90e      	bls.n	8002a8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <HAL_I2C_Mem_Read+0x22c>)
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa3d 	bl	8002f04 <I2C_TransferConfig>
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_I2C_Mem_Read+0x22c>)
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa2c 	bl	8002f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f902 	bl	8002cc0 <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07c      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d034      	beq.n	8002b6c <HAL_I2C_Mem_Read+0x1d0>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d130      	bne.n	8002b6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f8d3 	bl	8002cc0 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e04d      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d90e      	bls.n	8002b4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f9dd 	bl	8002f04 <I2C_TransferConfig>
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f9cc 	bl	8002f04 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d19a      	bne.n	8002aac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f920 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01a      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_I2C_Mem_Read+0x230>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	80002400 	.word	0x80002400
 8002bcc:	fe00e800 	.word	0xfe00e800

08002bd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <I2C_RequestMemoryRead+0xa4>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f984 	bl	8002f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f89d 	bl	8002d40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e02c      	b.n	8002c6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c20:	e015      	b.n	8002c4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c22:	893b      	ldrh	r3, [r7, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f883 	bl	8002d40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e012      	b.n	8002c6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f831 	bl	8002cc0 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	80002000 	.word	0x80002000

08002c78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d103      	bne.n	8002c96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d007      	beq.n	8002cb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	619a      	str	r2, [r3, #24]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd0:	e022      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d01e      	beq.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fe fdbd 	bl	8001858 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d113      	bne.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e00f      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d0cd      	beq.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d4c:	e02c      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f870 	bl	8002e38 <I2C_IsAcknowledgeFailed>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02a      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d01e      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7fe fd75 	bl	8001858 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d113      	bne.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d1cb      	bne.n	8002d4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	e028      	b.n	8002e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f830 	bl	8002e38 <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e026      	b.n	8002e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fd39 	bl	8001858 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e007      	b.n	8002e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d1cf      	bne.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d151      	bne.n	8002ef6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e52:	e022      	b.n	8002e9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d01e      	beq.n	8002e9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7fe fcfc 	bl	8001858 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <I2C_IsAcknowledgeFailed+0x3a>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d113      	bne.n	8002e9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e02e      	b.n	8002ef8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d1d5      	bne.n	8002e54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2210      	movs	r2, #16
 8002eae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff fedd 	bl	8002c78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <I2C_IsAcknowledgeFailed+0xc8>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	fe00e800 	.word	0xfe00e800

08002f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	817b      	strh	r3, [r7, #10]
 8002f12:	4613      	mov	r3, r2
 8002f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	0d5b      	lsrs	r3, r3, #21
 8002f20:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <I2C_TransferConfig+0x58>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	ea02 0103 	and.w	r1, r2, r3
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f34:	7a7b      	ldrb	r3, [r7, #9]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	03ff63ff 	.word	0x03ff63ff

08002f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d138      	bne.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e032      	b.n	8002fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b20      	cmp	r3, #32
 800300a:	d139      	bne.n	8003080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003016:	2302      	movs	r3, #2
 8003018:	e033      	b.n	8003082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800308e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003090:	b08f      	sub	sp, #60	; 0x3c
 8003092:	af0a      	add	r7, sp, #40	; 0x28
 8003094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e116      	b.n	80032ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fafa 	bl	80016b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f856 	bl	8007190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	687e      	ldr	r6, [r7, #4]
 80030ec:	466d      	mov	r5, sp
 80030ee:	f106 0410 	add.w	r4, r6, #16
 80030f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003102:	1d33      	adds	r3, r6, #4
 8003104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	f003 ffe0 	bl	80070cc <USB_CoreInit>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0d7      	b.n	80032ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f004 f844 	bl	80071b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e04a      	b.n	80031c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	333d      	adds	r3, #61	; 0x3d
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	333c      	adds	r3, #60	; 0x3c
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	b298      	uxth	r0, r3
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3342      	adds	r3, #66	; 0x42
 800316c:	4602      	mov	r2, r0
 800316e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333f      	adds	r3, #63	; 0x3f
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3344      	adds	r3, #68	; 0x44
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3348      	adds	r3, #72	; 0x48
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3350      	adds	r3, #80	; 0x50
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	3301      	adds	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d3af      	bcc.n	8003130 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e044      	b.n	8003260 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3301      	adds	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3b5      	bcc.n	80031d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	687e      	ldr	r6, [r7, #4]
 8003272:	466d      	mov	r5, sp
 8003274:	f106 0410 	add.w	r4, r6, #16
 8003278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003284:	e885 0003 	stmia.w	r5, {r0, r1}
 8003288:	1d33      	adds	r3, r6, #4
 800328a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	f003 ffbb 	bl	8007208 <USB_DevInit>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e014      	b.n	80032ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f80b 	bl	80032d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 f95d 	bl	8007586 <USB_DevDisconnect>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_PCDEx_ActivateLPM+0x44>)
 8003308:	4313      	orrs	r3, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	10000003 	.word	0x10000003

08003320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_PWREx_ConfigSupply+0x70>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00a      	beq.n	800334a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_PWREx_ConfigSupply+0x70>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e01f      	b.n	8003386 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e01d      	b.n	8003386 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_PWREx_ConfigSupply+0x70>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	490f      	ldr	r1, [pc, #60]	; (8003390 <HAL_PWREx_ConfigSupply+0x70>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800335a:	f7fe fa7d 	bl	8001858 <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003360:	e009      	b.n	8003376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003362:	f7fe fa79 	bl	8001858 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003370:	d901      	bls.n	8003376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_PWREx_ConfigSupply+0x70>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003382:	d1ee      	bne.n	8003362 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	58024800 	.word	0x58024800

08003394 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	60d3      	str	r3, [r2, #12]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	58024800 	.word	0x58024800

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e3ff      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8087 	beq.w	80034e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033de:	4b97      	ldr	r3, [pc, #604]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d007      	beq.n	80033fa <HAL_RCC_OscConfig+0x46>
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2b18      	cmp	r3, #24
 80033ee:	d110      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d10b      	bne.n	8003412 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fa:	4b90      	ldr	r3, [pc, #576]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d06c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x12c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d168      	bne.n	80034e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e3d9      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x76>
 800341c:	4b87      	ldr	r3, [pc, #540]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a86      	ldr	r2, [pc, #536]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e02e      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b82      	ldr	r3, [pc, #520]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a81      	ldr	r2, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0xbc>
 8003456:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a78      	ldr	r2, [pc, #480]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a75      	ldr	r2, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xd4>
 8003470:	4b72      	ldr	r3, [pc, #456]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a71      	ldr	r2, [pc, #452]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6e      	ldr	r2, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f9e2 	bl	8001858 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe f9de 	bl	8001858 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e38d      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034aa:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xe4>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f9ce 	bl	8001858 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe f9ca 	bl	8001858 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e379      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034d2:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x10c>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80ae 	beq.w	800364c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f0:	4b52      	ldr	r3, [pc, #328]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_RCC_OscConfig+0x162>
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	2b18      	cmp	r3, #24
 800350a:	d13a      	bne.n	8003582 <HAL_RCC_OscConfig+0x1ce>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d135      	bne.n	8003582 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e34b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	f7fe f9c1 	bl	80018b4 <HAL_GetREVID>
 8003532:	4602      	mov	r2, r0
 8003534:	f241 0303 	movw	r3, #4099	; 0x1003
 8003538:	429a      	cmp	r2, r3
 800353a:	d817      	bhi.n	800356c <HAL_RCC_OscConfig+0x1b8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d108      	bne.n	8003556 <HAL_RCC_OscConfig+0x1a2>
 8003544:	4b3d      	ldr	r3, [pc, #244]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800354c:	4a3b      	ldr	r2, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	e07a      	b.n	800364c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	4935      	ldr	r1, [pc, #212]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356a:	e06f      	b.n	800364c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	4930      	ldr	r1, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	e064      	b.n	800364c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d045      	beq.n	8003616 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0219 	bic.w	r2, r3, #25
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f95c 	bl	8001858 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe f958 	bl	8001858 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e307      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	f7fe f977 	bl	80018b4 <HAL_GetREVID>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d817      	bhi.n	8003600 <HAL_RCC_OscConfig+0x24c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x236>
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e030      	b.n	800364c <HAL_RCC_OscConfig+0x298>
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	4910      	ldr	r1, [pc, #64]	; (800363c <HAL_RCC_OscConfig+0x288>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
 80035fe:	e025      	b.n	800364c <HAL_RCC_OscConfig+0x298>
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	490b      	ldr	r1, [pc, #44]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x288>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <HAL_RCC_OscConfig+0x288>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fe f919 	bl	8001858 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362a:	f7fe f915 	bl	8001858 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d903      	bls.n	8003640 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e2c4      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
 800363c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003640:	4ba4      	ldr	r3, [pc, #656]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a9 	beq.w	80037ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b9e      	ldr	r3, [pc, #632]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003664:	4b9b      	ldr	r3, [pc, #620]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d007      	beq.n	8003680 <HAL_RCC_OscConfig+0x2cc>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b18      	cmp	r3, #24
 8003674:	d13a      	bne.n	80036ec <HAL_RCC_OscConfig+0x338>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d135      	bne.n	80036ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003680:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x2e4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e296      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003698:	f7fe f90c 	bl	80018b4 <HAL_GetREVID>
 800369c:	4602      	mov	r2, r0
 800369e:	f241 0303 	movw	r3, #4099	; 0x1003
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d817      	bhi.n	80036d6 <HAL_RCC_OscConfig+0x322>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x30c>
 80036ae:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036b6:	4a87      	ldr	r2, [pc, #540]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036be:	e075      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	4981      	ldr	r1, [pc, #516]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036d4:	e06a      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	497b      	ldr	r1, [pc, #492]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ea:	e05f      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d042      	beq.n	800377a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036f4:	4b77      	ldr	r3, [pc, #476]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a76      	ldr	r2, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe f8aa 	bl	8001858 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003708:	f7fe f8a6 	bl	8001858 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e255      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800371a:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003726:	f7fe f8c5 	bl	80018b4 <HAL_GetREVID>
 800372a:	4602      	mov	r2, r0
 800372c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003730:	429a      	cmp	r2, r3
 8003732:	d817      	bhi.n	8003764 <HAL_RCC_OscConfig+0x3b0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d108      	bne.n	800374e <HAL_RCC_OscConfig+0x39a>
 800373c:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003744:	4a63      	ldr	r2, [pc, #396]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e02e      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
 800374e:	4b61      	ldr	r3, [pc, #388]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	069b      	lsls	r3, r3, #26
 800375c:	495d      	ldr	r1, [pc, #372]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	e023      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
 8003764:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4958      	ldr	r1, [pc, #352]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e018      	b.n	80037ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800377a:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe f867 	bl	8001858 <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800378e:	f7fe f863 	bl	8001858 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e212      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d036      	beq.n	8003826 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d019      	beq.n	80037f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c0:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	4a43      	ldr	r2, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe f844 	bl	8001858 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fe f840 	bl	8001858 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1ef      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x420>
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	4a36      	ldr	r2, [pc, #216]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f82a 	bl	8001858 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003808:	f7fe f826 	bl	8001858 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1d5      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d036      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d019      	beq.n	800386e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003846:	f7fe f807 	bl	8001858 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800384e:	f7fe f803 	bl	8001858 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1b2      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x49a>
 800386c:	e018      	b.n	80038a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800387a:	f7fd ffed 	bl	8001858 <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003882:	f7fd ffe9 	bl	8001858 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e198      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCC_OscConfig+0x520>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8085 	beq.w	80039b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_RCC_OscConfig+0x524>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x524>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fd ffcd 	bl	8001858 <HAL_GetTick>
 80038be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c0:	e00c      	b.n	80038dc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fd ffc9 	bl	8001858 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	; 0x64
 80038ce:	d905      	bls.n	80038dc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e178      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
 80038d4:	58024400 	.word	0x58024400
 80038d8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038dc:	4b96      	ldr	r3, [pc, #600]	; (8003b38 <HAL_RCC_OscConfig+0x784>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ec      	beq.n	80038c2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x54a>
 80038f0:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a91      	ldr	r2, [pc, #580]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	e02d      	b.n	800395a <HAL_RCC_OscConfig+0x5a6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x56c>
 8003906:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a8c      	ldr	r2, [pc, #560]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b8a      	ldr	r3, [pc, #552]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a89      	ldr	r2, [pc, #548]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	e01c      	b.n	800395a <HAL_RCC_OscConfig+0x5a6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b05      	cmp	r3, #5
 8003926:	d10c      	bne.n	8003942 <HAL_RCC_OscConfig+0x58e>
 8003928:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a83      	ldr	r2, [pc, #524]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	4b81      	ldr	r3, [pc, #516]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a80      	ldr	r2, [pc, #512]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	e00b      	b.n	800395a <HAL_RCC_OscConfig+0x5a6>
 8003942:	4b7e      	ldr	r3, [pc, #504]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a7d      	ldr	r2, [pc, #500]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a7a      	ldr	r2, [pc, #488]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003954:	f023 0304 	bic.w	r3, r3, #4
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d015      	beq.n	800398e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003962:	f7fd ff79 	bl	8001858 <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fd ff75 	bl	8001858 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e122      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003980:	4b6e      	ldr	r3, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ee      	beq.n	800396a <HAL_RCC_OscConfig+0x5b6>
 800398c:	e014      	b.n	80039b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd ff63 	bl	8001858 <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fd ff5f 	bl	8001858 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e10c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ac:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ee      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8101 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039c2:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ca:	2b18      	cmp	r3, #24
 80039cc:	f000 80bc 	beq.w	8003b48 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 8095 	bne.w	8003b04 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 80039e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fd ff37 	bl	8001858 <HAL_GetTick>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fd ff33 	bl	8001858 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0e2      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a00:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCC_OscConfig+0x78c>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	4946      	ldr	r1, [pc, #280]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	628b      	str	r3, [r1, #40]	; 0x28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	3b01      	subs	r3, #1
 8003a36:	025b      	lsls	r3, r3, #9
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a56:	4939      	ldr	r1, [pc, #228]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a36      	ldr	r2, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_OscConfig+0x790>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a74:	00d2      	lsls	r2, r2, #3
 8003a76:	4931      	ldr	r1, [pc, #196]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f023 020c 	bic.w	r2, r3, #12
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	492c      	ldr	r1, [pc, #176]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f023 0202 	bic.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4928      	ldr	r1, [pc, #160]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aa0:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd febc 	bl	8001858 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd feb8 	bl	8001858 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e067      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x730>
 8003b02:	e05f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fea2 	bl	8001858 <HAL_GetTick>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fe9e 	bl	8001858 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04d      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_OscConfig+0x788>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x764>
 8003b36:	e045      	b.n	8003bc4 <HAL_RCC_OscConfig+0x810>
 8003b38:	58024800 	.word	0x58024800
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	fffffc0c 	.word	0xfffffc0c
 8003b44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCC_OscConfig+0x81c>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_OscConfig+0x81c>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d031      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d12a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d122      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0e1b      	lsrs	r3, r3, #24
 8003bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3730      	adds	r7, #48	; 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58024400 	.word	0x58024400

08003bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e19c      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b87      	ldr	r3, [pc, #540]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 020f 	bic.w	r2, r3, #15
 8003bfe:	4985      	ldr	r1, [pc, #532]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e184      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d908      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4975      	ldr	r1, [pc, #468]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d908      	bls.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	496a      	ldr	r1, [pc, #424]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d908      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	495e      	ldr	r1, [pc, #376]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d908      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4953      	ldr	r1, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f023 020f 	bic.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4947      	ldr	r1, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d055      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4940      	ldr	r1, [pc, #256]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d24:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0f6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0ea      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0de      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f023 0207 	bic.w	r2, r3, #7
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd fd67 	bl	8001858 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8e:	f7fd fd63 	bl	8001858 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0be      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d1eb      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d208      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d214      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	4906      	ldr	r1, [pc, #24]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e086      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
 8003e14:	52002000 	.word	0x52002000
 8003e18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d208      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e38:	4b3c      	ldr	r3, [pc, #240]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4939      	ldr	r1, [pc, #228]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d208      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	492e      	ldr	r1, [pc, #184]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d208      	bcs.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4922      	ldr	r1, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d208      	bcs.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4917      	ldr	r1, [pc, #92]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ed4:	f000 f834 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003ed8:	4601      	mov	r1, r0
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa21 f303 	lsr.w	r3, r1, r3
 8003ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x360>)
 8003f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x364>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x368>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd f898 	bl	800104c <HAL_InitTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	0800bce4 	.word	0x0800bce4
 8003f34:	24000004 	.word	0x24000004
 8003f38:	24000000 	.word	0x24000000
 8003f3c:	24000008 	.word	0x24000008

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f46:	4baf      	ldr	r3, [pc, #700]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4e:	2b18      	cmp	r3, #24
 8003f50:	f200 814e 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	080041f1 	.word	0x080041f1
 8003f64:	080041f1 	.word	0x080041f1
 8003f68:	080041f1 	.word	0x080041f1
 8003f6c:	080041f1 	.word	0x080041f1
 8003f70:	080041f1 	.word	0x080041f1
 8003f74:	080041f1 	.word	0x080041f1
 8003f78:	080041f1 	.word	0x080041f1
 8003f7c:	08003fe7 	.word	0x08003fe7
 8003f80:	080041f1 	.word	0x080041f1
 8003f84:	080041f1 	.word	0x080041f1
 8003f88:	080041f1 	.word	0x080041f1
 8003f8c:	080041f1 	.word	0x080041f1
 8003f90:	080041f1 	.word	0x080041f1
 8003f94:	080041f1 	.word	0x080041f1
 8003f98:	080041f1 	.word	0x080041f1
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	080041f1 	.word	0x080041f1
 8003fa4:	080041f1 	.word	0x080041f1
 8003fa8:	080041f1 	.word	0x080041f1
 8003fac:	080041f1 	.word	0x080041f1
 8003fb0:	080041f1 	.word	0x080041f1
 8003fb4:	080041f1 	.word	0x080041f1
 8003fb8:	080041f1 	.word	0x080041f1
 8003fbc:	08003ff3 	.word	0x08003ff3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc0:	4b90      	ldr	r3, [pc, #576]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fcc:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	4a8c      	ldr	r2, [pc, #560]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fde:	e10a      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fe0:	4b89      	ldr	r3, [pc, #548]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003fe2:	61bb      	str	r3, [r7, #24]
    break;
 8003fe4:	e107      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fe6:	4b89      	ldr	r3, [pc, #548]	; (800420c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003fe8:	61bb      	str	r3, [r7, #24]
    break;
 8003fea:	e104      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fec:	4b88      	ldr	r3, [pc, #544]	; (8004210 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003fee:	61bb      	str	r3, [r7, #24]
    break;
 8003ff0:	e101      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff2:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004006:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004008:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004012:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80da 	beq.w	80041ea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d05a      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800403c:	2b01      	cmp	r3, #1
 800403e:	d302      	bcc.n	8004046 <HAL_RCC_GetSysClockFreq+0x106>
 8004040:	2b02      	cmp	r3, #2
 8004042:	d078      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004044:	e099      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02d      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407c:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004090:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80040ac:	e087      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004218 <HAL_RCC_GetSysClockFreq+0x2d8>
 80040bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c0:	4b50      	ldr	r3, [pc, #320]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2d4>
 80040d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040f0:	e065      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800421c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004104:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004114:	ed97 6a02 	vldr	s12, [r7, #8]
 8004118:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2d4>
 800411c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004134:	e043      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004220 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004158:	ed97 6a02 	vldr	s12, [r7, #8]
 800415c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004178:	e021      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004184:	eddf 6a25 	vldr	s13, [pc, #148]	; 800421c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419c:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2d4>
 80041a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041bc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c8:	3301      	adds	r3, #1
 80041ca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e2:	ee17 3a90 	vmov	r3, s15
 80041e6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041e8:	e005      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
    break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80041f2:	61bb      	str	r3, [r7, #24]
    break;
 80041f4:	bf00      	nop
  }

  return sysclockfreq;
 80041f6:	69bb      	ldr	r3, [r7, #24]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3724      	adds	r7, #36	; 0x24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	58024400 	.word	0x58024400
 8004208:	03d09000 	.word	0x03d09000
 800420c:	003d0900 	.word	0x003d0900
 8004210:	007a1200 	.word	0x007a1200
 8004214:	46000000 	.word	0x46000000
 8004218:	4c742400 	.word	0x4c742400
 800421c:	4a742400 	.word	0x4a742400
 8004220:	4af42400 	.word	0x4af42400

08004224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800422a:	f7ff fe89 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 800422e:	4601      	mov	r1, r0
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_GetHCLKFreq+0x50>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <HAL_RCC_GetHCLKFreq+0x54>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	fa21 f303 	lsr.w	r3, r1, r3
 8004246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_RCC_GetHCLKFreq+0x50>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_GetHCLKFreq+0x54>)
 8004252:	5cd3      	ldrb	r3, [r2, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <HAL_RCC_GetHCLKFreq+0x58>)
 8004260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_RCC_GetHCLKFreq+0x58>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	0800bce4 	.word	0x0800bce4
 800427c:	24000004 	.word	0x24000004
 8004280:	24000000 	.word	0x24000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004288:	f7ff ffcc 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 800428c:	4601      	mov	r1, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800429a:	5cd3      	ldrb	r3, [r2, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	58024400 	.word	0x58024400
 80042ac:	0800bce4 	.word	0x0800bce4

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80042b4:	f7ff ffb6 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	58024400 	.word	0x58024400
 80042d8:	0800bce4 	.word	0x0800bce4

080042dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	223f      	movs	r2, #63	; 0x3f
 80042ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0207 	and.w	r2, r3, #7
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_GetClockConfig+0x80>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58024400 	.word	0x58024400
 800435c:	52002000 	.word	0x52002000

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800436c:	2300      	movs	r3, #0
 800436e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004384:	d013      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438a:	d802      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004390:	e01f      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004396:	d013      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800439c:	d01c      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800439e:	e018      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a0:	4baf      	ldr	r3, [pc, #700]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4aae      	ldr	r2, [pc, #696]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043ac:	e015      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f96f 	bl	8005698 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fa18 	bl	80057fc <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043e0:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ec:	499c      	ldr	r1, [pc, #624]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	650b      	str	r3, [r1, #80]	; 0x50
 80043f2:	e001      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03d      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b04      	cmp	r3, #4
 800440a:	d826      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004429 	.word	0x08004429
 8004418:	08004437 	.word	0x08004437
 800441c:	08004449 	.word	0x08004449
 8004420:	08004461 	.word	0x08004461
 8004424:	08004461 	.word	0x08004461
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004428:	4b8d      	ldr	r3, [pc, #564]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a8c      	ldr	r2, [pc, #560]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004434:	e015      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f92b 	bl	8005698 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f9d4 	bl	80057fc <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
      break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004468:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446c:	f023 0207 	bic.w	r2, r3, #7
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	497a      	ldr	r1, [pc, #488]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004476:	4313      	orrs	r3, r2
 8004478:	650b      	str	r3, [r1, #80]	; 0x50
 800447a:	e001      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03e      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d01c      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d804      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d00d      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80044a0:	e01e      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80044a2:	2bc0      	cmp	r3, #192	; 0xc0
 80044a4:	d01f      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d01e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044ac:	e018      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ae:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a6b      	ldr	r2, [pc, #428]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044ba:	e017      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 f8e8 	bl	8005698 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044cc:	e00e      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3324      	adds	r3, #36	; 0x24
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f991 	bl	80057fc <RCCEx_PLL3_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80044ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4958      	ldr	r1, [pc, #352]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004500:	4313      	orrs	r3, r2
 8004502:	650b      	str	r3, [r1, #80]	; 0x50
 8004504:	e001      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d044      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004520:	d01f      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004526:	d805      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800452c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004530:	d00e      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004532:	e01f      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004538:	d01f      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800453a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800453e:	d01e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004540:	e018      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	4a46      	ldr	r2, [pc, #280]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800454e:	e017      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f89e 	bl	8005698 <RCCEx_PLL2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004560:	e00e      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3324      	adds	r3, #36	; 0x24
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f947 	bl	80057fc <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
      break;
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800457e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004594:	4932      	ldr	r1, [pc, #200]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004596:	4313      	orrs	r3, r2
 8004598:	658b      	str	r3, [r1, #88]	; 0x58
 800459a:	e001      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d044      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b6:	d01f      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045bc:	d805      	bhi.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80045c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045c8:	e01f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80045ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ce:	d01f      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80045d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045d4:	d01e      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80045d6:	e018      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045e4:	e017      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f853 	bl	8005698 <RCCEx_PLL2_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045f6:	e00e      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3324      	adds	r3, #36	; 0x24
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f8fc 	bl	80057fc <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004608:	e005      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800462a:	490d      	ldr	r1, [pc, #52]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800462c:	4313      	orrs	r3, r2
 800462e:	658b      	str	r3, [r1, #88]	; 0x58
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d035      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	2b10      	cmp	r3, #16
 8004648:	d00c      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800464a:	2b10      	cmp	r3, #16
 800464c:	d802      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01b      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004652:	e017      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d00c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d018      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800465c:	e012      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004664:	4baf      	ldr	r3, [pc, #700]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4aae      	ldr	r2, [pc, #696]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004670:	e00e      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f80d 	bl	8005698 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004682:	e005      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
      break;
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800468e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004696:	4ba3      	ldr	r3, [pc, #652]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	49a0      	ldr	r1, [pc, #640]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046a8:	e001      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d042      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d01f      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	d805      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	d00e      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80046d4:	e01f      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80046d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046da:	d01f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d01e      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80046e2:	e018      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e4:	4b8f      	ldr	r3, [pc, #572]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046f0:	e017      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 ffcd 	bl	8005698 <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004702:	e00e      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f876 	bl	80057fc <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
      break;
 800471a:	e002      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004728:	4b7e      	ldr	r3, [pc, #504]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	497b      	ldr	r1, [pc, #492]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	650b      	str	r3, [r1, #80]	; 0x50
 800473a:	e001      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d042      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004754:	d01b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475a:	d805      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d022      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004766:	e01b      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800476c:	d01d      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800476e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004772:	d01c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004778:	d01b      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f000 ff88 	bl	8005698 <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800478c:	e012      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3324      	adds	r3, #36	; 0x24
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f831 	bl	80057fc <RCCEx_PLL3_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800479e:	e009      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
      break;
 80047a4:	e006      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80047a6:	bf00      	nop
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80047b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047ba:	4b5a      	ldr	r3, [pc, #360]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	4957      	ldr	r1, [pc, #348]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	650b      	str	r3, [r1, #80]	; 0x50
 80047cc:	e001      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d044      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d01b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ee:	d805      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d022      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80047fa:	e01b      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d01d      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004806:	d01c      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800480c:	d01b      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800480e:	e011      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	2101      	movs	r1, #1
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ff3e 	bl	8005698 <RCCEx_PLL2_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004820:	e012      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	2101      	movs	r1, #1
 8004828:	4618      	mov	r0, r3
 800482a:	f000 ffe7 	bl	80057fc <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004832:	e009      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
      break;
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800483a:	bf00      	nop
 800483c:	e004      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800484e:	4b35      	ldr	r3, [pc, #212]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800485c:	4931      	ldr	r1, [pc, #196]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	658b      	str	r3, [r1, #88]	; 0x58
 8004862:	e001      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02d      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800487c:	d005      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800487e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004882:	d009      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004888:	e00f      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488a:	4b26      	ldr	r3, [pc, #152]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004896:	e00c      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	2101      	movs	r1, #1
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fefa 	bl	8005698 <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
      break;
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80048b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c4:	4917      	ldr	r1, [pc, #92]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	650b      	str	r3, [r1, #80]	; 0x50
 80048ca:	e001      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d035      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d81b      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004929 	.word	0x08004929
 80048f0:	080048fd 	.word	0x080048fd
 80048f4:	0800490b 	.word	0x0800490b
 80048f8:	08004929 	.word	0x08004929
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004908:	e00f      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fec1 	bl	8005698 <RCCEx_PLL2_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800491a:	e006      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	75fb      	strb	r3, [r7, #23]
      break;
 8004920:	e003      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
      break;
 8004928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004930:	4bba      	ldr	r3, [pc, #744]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	f023 0203 	bic.w	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	49b7      	ldr	r1, [pc, #732]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004942:	e001      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8086 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004956:	4bb2      	ldr	r3, [pc, #712]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4ab1      	ldr	r2, [pc, #708]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004962:	f7fc ff79 	bl	8001858 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004968:	e009      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496a:	f7fc ff75 	bl	8001858 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b64      	cmp	r3, #100	; 0x64
 8004976:	d902      	bls.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	75fb      	strb	r3, [r7, #23]
        break;
 800497c:	e005      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497e:	4ba8      	ldr	r3, [pc, #672]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ef      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d166      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004990:	4ba2      	ldr	r3, [pc, #648]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800499a:	4053      	eors	r3, r2
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a4:	4b9d      	ldr	r3, [pc, #628]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ae:	4b9b      	ldr	r3, [pc, #620]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a9a      	ldr	r2, [pc, #616]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ba:	4b98      	ldr	r3, [pc, #608]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a97      	ldr	r2, [pc, #604]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049c6:	4a95      	ldr	r2, [pc, #596]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d115      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc ff3e 	bl	8001858 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049de:	e00b      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fc ff3a 	bl	8001858 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d902      	bls.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	75fb      	strb	r3, [r7, #23]
            break;
 80049f6:	e005      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f8:	4b88      	ldr	r3, [pc, #544]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ed      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d126      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a18:	d10d      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004a1a:	4b80      	ldr	r3, [pc, #512]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a28:	0919      	lsrs	r1, r3, #4
 8004a2a:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	497b      	ldr	r1, [pc, #492]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]
 8004a34:	e005      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004a36:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	4a78      	ldr	r2, [pc, #480]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a40:	6113      	str	r3, [r2, #16]
 8004a42:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a50:	4972      	ldr	r1, [pc, #456]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	670b      	str	r3, [r1, #112]	; 0x70
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	75bb      	strb	r3, [r7, #22]
 8004a5c:	e001      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d07d      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a72:	2b28      	cmp	r3, #40	; 0x28
 8004a74:	d866      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004b4b 	.word	0x08004b4b
 8004a80:	08004b45 	.word	0x08004b45
 8004a84:	08004b45 	.word	0x08004b45
 8004a88:	08004b45 	.word	0x08004b45
 8004a8c:	08004b45 	.word	0x08004b45
 8004a90:	08004b45 	.word	0x08004b45
 8004a94:	08004b45 	.word	0x08004b45
 8004a98:	08004b45 	.word	0x08004b45
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004b45 	.word	0x08004b45
 8004aa4:	08004b45 	.word	0x08004b45
 8004aa8:	08004b45 	.word	0x08004b45
 8004aac:	08004b45 	.word	0x08004b45
 8004ab0:	08004b45 	.word	0x08004b45
 8004ab4:	08004b45 	.word	0x08004b45
 8004ab8:	08004b45 	.word	0x08004b45
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b45 	.word	0x08004b45
 8004ac4:	08004b45 	.word	0x08004b45
 8004ac8:	08004b45 	.word	0x08004b45
 8004acc:	08004b45 	.word	0x08004b45
 8004ad0:	08004b45 	.word	0x08004b45
 8004ad4:	08004b45 	.word	0x08004b45
 8004ad8:	08004b45 	.word	0x08004b45
 8004adc:	08004b4b 	.word	0x08004b4b
 8004ae0:	08004b45 	.word	0x08004b45
 8004ae4:	08004b45 	.word	0x08004b45
 8004ae8:	08004b45 	.word	0x08004b45
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b4b 	.word	0x08004b4b
 8004b00:	08004b45 	.word	0x08004b45
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b4b 	.word	0x08004b4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fdb6 	bl	8005698 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b30:	e00c      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3324      	adds	r3, #36	; 0x24
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fe5f 	bl	80057fc <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b52:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5e:	492f      	ldr	r1, [pc, #188]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	654b      	str	r3, [r1, #84]	; 0x54
 8004b64:	e001      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d037      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d820      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004bc7 	.word	0x08004bc7
 8004b88:	08004b9d 	.word	0x08004b9d
 8004b8c:	08004baf 	.word	0x08004baf
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd78 	bl	8005698 <RCCEx_PLL2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	; 0x24
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fe21 	bl	80057fc <RCCEx_PLL3_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f023 0207 	bic.w	r2, r3, #7
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	4910      	ldr	r1, [pc, #64]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	654b      	str	r3, [r1, #84]	; 0x54
 8004be0:	e001      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d040      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	d827      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c53 	.word	0x08004c53
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c53 	.word	0x08004c53
 8004c14:	08004c53 	.word	0x08004c53
 8004c18:	08004c53 	.word	0x08004c53
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58024800 	.word	0x58024800
 8004c24:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd32 	bl	8005698 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c38:	e00c      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3324      	adds	r3, #36	; 0x24
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fddb 	bl	80057fc <RCCEx_PLL3_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c5a:	4bb2      	ldr	r3, [pc, #712]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f023 0207 	bic.w	r2, r3, #7
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	49ae      	ldr	r1, [pc, #696]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d044      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d805      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d022      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004c9c:	e01b      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d01d      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d01c      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cae:	d01b      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004cb0:	e011      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fced 	bl	8005698 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cc2:	e012      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	2102      	movs	r1, #2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fd96 	bl	80057fc <RCCEx_PLL3_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e009      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cda:	e006      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e004      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfe:	4989      	ldr	r1, [pc, #548]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	654b      	str	r3, [r1, #84]	; 0x54
 8004d04:	e001      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d044      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d01b      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d805      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d022      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004d32:	e01b      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d38:	d01d      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004d3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d3e:	d01c      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d44:	d01b      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004d46:	e011      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fca2 	bl	8005698 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d58:	e012      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd4b 	bl	80057fc <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d6a:	e009      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d86:	4b67      	ldr	r3, [pc, #412]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d94:	4963      	ldr	r1, [pc, #396]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	658b      	str	r3, [r1, #88]	; 0x58
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d044      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db6:	d01b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dbc:	d805      	bhi.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d022      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004dc8:	e01b      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	d01d      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004dd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dd4:	d01c      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004dd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dda:	d01b      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004ddc:	e011      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fc57 	bl	8005698 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004dee:	e012      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fd00 	bl	80057fc <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e00:	e009      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	e006      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004e08:	bf00      	nop
 8004e0a:	e004      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004e0c:	bf00      	nop
 8004e0e:	e002      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e2a:	493e      	ldr	r1, [pc, #248]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8004e30:	e001      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	d10a      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3324      	adds	r3, #36	; 0x24
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fcd1 	bl	80057fc <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e64:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e72:	492c      	ldr	r1, [pc, #176]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fcb0 	bl	80057fc <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb4:	491b      	ldr	r1, [pc, #108]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d032      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d00d      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fbd8 	bl	8005698 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004eec:	e00c      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3324      	adds	r3, #36	; 0x24
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fc81 	bl	80057fc <RCCEx_PLL3_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
      break;
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f1c:	4901      	ldr	r1, [pc, #4]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	658b      	str	r3, [r1, #88]	; 0x58
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02f      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f42:	d00c      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f48:	d015      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10f      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f50:	4b79      	ldr	r3, [pc, #484]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4a78      	ldr	r2, [pc, #480]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3324      	adds	r3, #36	; 0x24
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fc49 	bl	80057fc <RCCEx_PLL3_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7e:	4b6e      	ldr	r3, [pc, #440]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8c:	496a      	ldr	r1, [pc, #424]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	654b      	str	r3, [r1, #84]	; 0x54
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d029      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d007      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004fb2:	e00f      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb4:	4b60      	ldr	r3, [pc, #384]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fc0:	e00b      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fb65 	bl	8005698 <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fe0:	4b55      	ldr	r3, [pc, #340]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	4952      	ldr	r1, [pc, #328]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	2102      	movs	r1, #2
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fbf6 	bl	80057fc <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02f      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	d00c      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005034:	d802      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800503a:	e00d      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005040:	d00f      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005046:	d00e      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504a:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005056:	e007      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
      break;
 800505c:	e004      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800506e:	4b32      	ldr	r3, [pc, #200]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507a:	492f      	ldr	r1, [pc, #188]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800507c:	4313      	orrs	r3, r2
 800507e:	654b      	str	r3, [r1, #84]	; 0x54
 8005080:	e001      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4926      	ldr	r1, [pc, #152]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050b0:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050be:	491e      	ldr	r1, [pc, #120]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050dc:	4916      	ldr	r1, [pc, #88]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	4a11      	ldr	r2, [pc, #68]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f8:	6113      	str	r3, [r2, #16]
 80050fa:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005104:	490c      	ldr	r1, [pc, #48]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da08      	bge.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	4906      	ldr	r1, [pc, #24]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005120:	4313      	orrs	r3, r2
 8005122:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005124:	7dbb      	ldrb	r3, [r7, #22]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	58024400 	.word	0x58024400

0800513c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005140:	f7ff f870 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8005144:	4601      	mov	r1, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005152:	5cd3      	ldrb	r3, [r2, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	58024400 	.word	0x58024400
 8005164:	0800bce4 	.word	0x0800bce4

08005168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005170:	4b9d      	ldr	r3, [pc, #628]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800517a:	4b9b      	ldr	r3, [pc, #620]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	0b1b      	lsrs	r3, r3, #12
 8005180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005184:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005186:	4b98      	ldr	r3, [pc, #608]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005192:	4b95      	ldr	r3, [pc, #596]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 810a 	beq.w	80053ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d05a      	beq.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d302      	bcc.n	80051c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d078      	beq.n	80052b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80051c4:	e099      	b.n	80052fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c6:	4b88      	ldr	r3, [pc, #544]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d02d      	beq.n	800522e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051d2:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	4a83      	ldr	r2, [pc, #524]	; (80053ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fc:	4b7a      	ldr	r3, [pc, #488]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005210:	eddf 5a77 	vldr	s11, [pc, #476]	; 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005228:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800522c:	e087      	b.n	800533e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005238:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800523c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005240:	4b69      	ldr	r3, [pc, #420]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005250:	ed97 6a03 	vldr	s12, [r7, #12]
 8005254:	eddf 5a66 	vldr	s11, [pc, #408]	; 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005270:	e065      	b.n	800533e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005284:	4b58      	ldr	r3, [pc, #352]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005294:	ed97 6a03 	vldr	s12, [r7, #12]
 8005298:	eddf 5a55 	vldr	s11, [pc, #340]	; 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800529c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052b4:	e043      	b.n	800533e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80052c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c8:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80052dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80052e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052f8:	e021      	b.n	800533e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005304:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005320:	eddf 5a33 	vldr	s11, [pc, #204]	; 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800533c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800533e:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	0a5b      	lsrs	r3, r3, #9
 8005344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005358:	edd7 6a07 	vldr	s13, [r7, #28]
 800535c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005364:	ee17 2a90 	vmov	r2, s15
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005386:	edd7 6a07 	vldr	s13, [r7, #28]
 800538a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005392:	ee17 2a90 	vmov	r2, s15
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c0:	ee17 2a90 	vmov	r2, s15
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	58024400 	.word	0x58024400
 80053ec:	03d09000 	.word	0x03d09000
 80053f0:	46000000 	.word	0x46000000
 80053f4:	4c742400 	.word	0x4c742400
 80053f8:	4a742400 	.word	0x4a742400
 80053fc:	4af42400 	.word	0x4af42400

08005400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005408:	4b9d      	ldr	r3, [pc, #628]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005412:	4b9b      	ldr	r3, [pc, #620]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800541c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800541e:	4b98      	ldr	r3, [pc, #608]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800542a:	4b95      	ldr	r3, [pc, #596]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	08db      	lsrs	r3, r3, #3
 8005430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 810a 	beq.w	8005662 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d05a      	beq.n	800550a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005454:	2b01      	cmp	r3, #1
 8005456:	d302      	bcc.n	800545e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005458:	2b02      	cmp	r3, #2
 800545a:	d078      	beq.n	800554e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800545c:	e099      	b.n	8005592 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545e:	4b88      	ldr	r3, [pc, #544]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02d      	beq.n	80054c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800546a:	4b85      	ldr	r3, [pc, #532]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	4a83      	ldr	r2, [pc, #524]	; (8005684 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005494:	4b7a      	ldr	r3, [pc, #488]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054c4:	e087      	b.n	80055d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800568c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80054d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d8:	4b69      	ldr	r3, [pc, #420]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005508:	e065      	b.n	80055d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005514:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551c:	4b58      	ldr	r3, [pc, #352]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005530:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800554c:	e043      	b.n	80055d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800555c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005560:	4b47      	ldr	r3, [pc, #284]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005570:	ed97 6a03 	vldr	s12, [r7, #12]
 8005574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005590:	e021      	b.n	80055d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80055a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a4:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80055bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fc:	ee17 2a90 	vmov	r2, s15
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005632:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005658:	ee17 2a90 	vmov	r2, s15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	3724      	adds	r7, #36	; 0x24
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	58024400 	.word	0x58024400
 8005684:	03d09000 	.word	0x03d09000
 8005688:	46000000 	.word	0x46000000
 800568c:	4c742400 	.word	0x4c742400
 8005690:	4a742400 	.word	0x4a742400
 8005694:	4af42400 	.word	0x4af42400

08005698 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056a6:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d101      	bne.n	80056b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e099      	b.n	80057ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a4e      	ldr	r2, [pc, #312]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fc f8c9 	bl	8001858 <HAL_GetTick>
 80056c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056c8:	e008      	b.n	80056dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056ca:	f7fc f8c5 	bl	8001858 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e086      	b.n	80057ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056e8:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	493f      	ldr	r1, [pc, #252]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	628b      	str	r3, [r1, #40]	; 0x28
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	3b01      	subs	r3, #1
 800570c:	025b      	lsls	r3, r3, #9
 800570e:	b29b      	uxth	r3, r3
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	3b01      	subs	r3, #1
 8005726:	061b      	lsls	r3, r3, #24
 8005728:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800572c:	4931      	ldr	r1, [pc, #196]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	492d      	ldr	r1, [pc, #180]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005744:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f023 0220 	bic.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4928      	ldr	r1, [pc, #160]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005756:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800575c:	f023 0310 	bic.w	r3, r3, #16
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <RCCEx_PLL2_Config+0x160>)
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	69d2      	ldr	r2, [r2, #28]
 800576e:	00d2      	lsls	r2, r2, #3
 8005770:	4920      	ldr	r1, [pc, #128]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005776:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800577c:	f043 0310 	orr.w	r3, r3, #16
 8005780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800578e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005794:	e00f      	b.n	80057b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a14      	ldr	r2, [pc, #80]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057a8:	e005      	b.n	80057b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fc f849 	bl	8001858 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057c8:	e008      	b.n	80057dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057ca:	f7fc f845 	bl	8001858 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e006      	b.n	80057ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
 80057f8:	ffff0007 	.word	0xffff0007

080057fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580a:	4b53      	ldr	r3, [pc, #332]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d101      	bne.n	800581a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e099      	b.n	800594e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800581a:	4b4f      	ldr	r3, [pc, #316]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a4e      	ldr	r2, [pc, #312]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fc f817 	bl	8001858 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800582c:	e008      	b.n	8005840 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800582e:	f7fc f813 	bl	8001858 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e086      	b.n	800594e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005840:	4b45      	ldr	r3, [pc, #276]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800584c:	4b42      	ldr	r3, [pc, #264]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	493f      	ldr	r1, [pc, #252]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	628b      	str	r3, [r1, #40]	; 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	025b      	lsls	r3, r3, #9
 8005872:	b29b      	uxth	r3, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	3b01      	subs	r3, #1
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005890:	4931      	ldr	r1, [pc, #196]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005896:	4b30      	ldr	r3, [pc, #192]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	492d      	ldr	r1, [pc, #180]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4928      	ldr	r1, [pc, #160]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	4a26      	ldr	r2, [pc, #152]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058c6:	4b24      	ldr	r3, [pc, #144]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ca:	4b24      	ldr	r3, [pc, #144]	; (800595c <RCCEx_PLL3_Config+0x160>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	69d2      	ldr	r2, [r2, #28]
 80058d2:	00d2      	lsls	r2, r2, #3
 80058d4:	4920      	ldr	r1, [pc, #128]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058da:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4a1e      	ldr	r2, [pc, #120]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a19      	ldr	r2, [pc, #100]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058f8:	e00f      	b.n	800591a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005900:	4b15      	ldr	r3, [pc, #84]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4a14      	ldr	r2, [pc, #80]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800590a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800590c:	e005      	b.n	800591a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005918:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fb ff97 	bl	8001858 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800592e:	f7fb ff93 	bl	8001858 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	ffff0007 	.word	0xffff0007

08005960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e049      	b.n	8005a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f841 	bl	8005a0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f000 f9be 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d001      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e021      	b.n	8005a80 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_TIM_Base_Start_IT+0x68>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d00b      	beq.n	8005a7e <HAL_TIM_Base_Start_IT+0x5a>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d007      	beq.n	8005a7e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0202 	mvn.w	r2, #2
 8005abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f905 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8f7 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f908 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0204 	mvn.w	r2, #4
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8db 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8cd 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8de 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0208 	mvn.w	r2, #8
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8b1 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8a3 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8b4 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0210 	mvn.w	r2, #16
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f887 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f879 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f88a 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0201 	mvn.w	r2, #1
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fb f9e8 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f914 	bl	8005e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d10e      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d107      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f907 	bl	8005e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f838 	bl	8005d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d107      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0220 	mvn.w	r2, #32
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f8c7 	bl	8005e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d00f      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3d      	ldr	r2, [pc, #244]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3c      	ldr	r2, [pc, #240]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3b      	ldr	r2, [pc, #236]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01f      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d01b      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d017      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a28      	ldr	r2, [pc, #160]	; (8005e48 <TIM_Base_SetConfig+0x128>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0x9a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <TIM_Base_SetConfig+0x130>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <TIM_Base_SetConfig+0x128>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <TIM_Base_SetConfig+0x130>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d103      	bne.n	8005e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	615a      	str	r2, [r3, #20]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e042      	b.n	8005f28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d106      	bne.n	8005eba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7fb fb17 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	; 0x24
 8005ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f8c2 	bl	800605c <UART_SetConfig>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e022      	b.n	8005f28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fe66 	bl	8006bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005efe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 feed 	bl	8006d00 <UART_CheckIdleState>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	f040 8083 	bne.w	8006052 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Transmit+0x28>
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e07b      	b.n	8006054 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Transmit+0x3a>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e074      	b.n	8006054 <HAL_UART_Transmit+0x124>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2221      	movs	r2, #33	; 0x21
 8005f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005f82:	f7fb fc69 	bl	8001858 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x84>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005fc4:	e02c      	b.n	8006020 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fedd 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e039      	b.n	8006054 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e007      	b.n	800600e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1cc      	bne.n	8005fc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2200      	movs	r2, #0
 8006034:	2140      	movs	r1, #64	; 0x40
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 feaa 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e006      	b.n	8006054 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e000      	b.n	8006054 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006052:	2302      	movs	r3, #2
  }
}
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800605c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006060:	b08e      	sub	sp, #56	; 0x38
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608a:	4313      	orrs	r3, r2
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4bc1      	ldr	r3, [pc, #772]	; (800639c <UART_SetConfig+0x340>)
 8006096:	4013      	ands	r3, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800609e:	430b      	orrs	r3, r1
 80060a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4ab7      	ldr	r2, [pc, #732]	; (80063a0 <UART_SetConfig+0x344>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ce:	4313      	orrs	r3, r2
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	4bb2      	ldr	r3, [pc, #712]	; (80063a4 <UART_SetConfig+0x348>)
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f023 010f 	bic.w	r1, r3, #15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4aa9      	ldr	r2, [pc, #676]	; (80063a8 <UART_SetConfig+0x34c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d177      	bne.n	80061f6 <UART_SetConfig+0x19a>
 8006106:	4ba9      	ldr	r3, [pc, #676]	; (80063ac <UART_SetConfig+0x350>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610e:	2b28      	cmp	r3, #40	; 0x28
 8006110:	d86c      	bhi.n	80061ec <UART_SetConfig+0x190>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0xbc>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	080061bd 	.word	0x080061bd
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	080061ed 	.word	0x080061ed
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061cd 	.word	0x080061cd
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061ed 	.word	0x080061ed
 8006170:	080061ed 	.word	0x080061ed
 8006174:	080061ed 	.word	0x080061ed
 8006178:	080061d5 	.word	0x080061d5
 800617c:	080061ed 	.word	0x080061ed
 8006180:	080061ed 	.word	0x080061ed
 8006184:	080061ed 	.word	0x080061ed
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061ed 	.word	0x080061ed
 8006194:	080061ed 	.word	0x080061ed
 8006198:	080061dd 	.word	0x080061dd
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	080061ed 	.word	0x080061ed
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061ed 	.word	0x080061ed
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c2:	e233      	b.n	800662c <UART_SetConfig+0x5d0>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ca:	e22f      	b.n	800662c <UART_SetConfig+0x5d0>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e22b      	b.n	800662c <UART_SetConfig+0x5d0>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e227      	b.n	800662c <UART_SetConfig+0x5d0>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e223      	b.n	800662c <UART_SetConfig+0x5d0>
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e21f      	b.n	800662c <UART_SetConfig+0x5d0>
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	bf00      	nop
 80061f4:	e21a      	b.n	800662c <UART_SetConfig+0x5d0>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6d      	ldr	r2, [pc, #436]	; (80063b0 <UART_SetConfig+0x354>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d132      	bne.n	8006266 <UART_SetConfig+0x20a>
 8006200:	4b6a      	ldr	r3, [pc, #424]	; (80063ac <UART_SetConfig+0x350>)
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	2b05      	cmp	r3, #5
 800620a:	d827      	bhi.n	800625c <UART_SetConfig+0x200>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <UART_SetConfig+0x1b8>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006235 	.word	0x08006235
 800621c:	0800623d 	.word	0x0800623d
 8006220:	08006245 	.word	0x08006245
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006255 	.word	0x08006255
 800622c:	2300      	movs	r3, #0
 800622e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006232:	e1fb      	b.n	800662c <UART_SetConfig+0x5d0>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623a:	e1f7      	b.n	800662c <UART_SetConfig+0x5d0>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006242:	e1f3      	b.n	800662c <UART_SetConfig+0x5d0>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624a:	e1ef      	b.n	800662c <UART_SetConfig+0x5d0>
 800624c:	2320      	movs	r3, #32
 800624e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006252:	e1eb      	b.n	800662c <UART_SetConfig+0x5d0>
 8006254:	2340      	movs	r3, #64	; 0x40
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625a:	e1e7      	b.n	800662c <UART_SetConfig+0x5d0>
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	bf00      	nop
 8006264:	e1e2      	b.n	800662c <UART_SetConfig+0x5d0>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <UART_SetConfig+0x358>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d132      	bne.n	80062d6 <UART_SetConfig+0x27a>
 8006270:	4b4e      	ldr	r3, [pc, #312]	; (80063ac <UART_SetConfig+0x350>)
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	2b05      	cmp	r3, #5
 800627a:	d827      	bhi.n	80062cc <UART_SetConfig+0x270>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x228>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062a5 	.word	0x080062a5
 800628c:	080062ad 	.word	0x080062ad
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a2:	e1c3      	b.n	800662c <UART_SetConfig+0x5d0>
 80062a4:	2304      	movs	r3, #4
 80062a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062aa:	e1bf      	b.n	800662c <UART_SetConfig+0x5d0>
 80062ac:	2308      	movs	r3, #8
 80062ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b2:	e1bb      	b.n	800662c <UART_SetConfig+0x5d0>
 80062b4:	2310      	movs	r3, #16
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ba:	e1b7      	b.n	800662c <UART_SetConfig+0x5d0>
 80062bc:	2320      	movs	r3, #32
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e1b3      	b.n	800662c <UART_SetConfig+0x5d0>
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e1af      	b.n	800662c <UART_SetConfig+0x5d0>
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	bf00      	nop
 80062d4:	e1aa      	b.n	800662c <UART_SetConfig+0x5d0>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <UART_SetConfig+0x35c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d132      	bne.n	8006346 <UART_SetConfig+0x2ea>
 80062e0:	4b32      	ldr	r3, [pc, #200]	; (80063ac <UART_SetConfig+0x350>)
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d827      	bhi.n	800633c <UART_SetConfig+0x2e0>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x298>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006315 	.word	0x08006315
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006325 	.word	0x08006325
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006335 	.word	0x08006335
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e18b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e187      	b.n	800662c <UART_SetConfig+0x5d0>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e183      	b.n	800662c <UART_SetConfig+0x5d0>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e17f      	b.n	800662c <UART_SetConfig+0x5d0>
 800632c:	2320      	movs	r3, #32
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	e17b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633a:	e177      	b.n	800662c <UART_SetConfig+0x5d0>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006342:	bf00      	nop
 8006344:	e172      	b.n	800662c <UART_SetConfig+0x5d0>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <UART_SetConfig+0x360>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d144      	bne.n	80063da <UART_SetConfig+0x37e>
 8006350:	4b16      	ldr	r3, [pc, #88]	; (80063ac <UART_SetConfig+0x350>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	2b05      	cmp	r3, #5
 800635a:	d839      	bhi.n	80063d0 <UART_SetConfig+0x374>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x308>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	0800637d 	.word	0x0800637d
 8006368:	08006385 	.word	0x08006385
 800636c:	0800638d 	.word	0x0800638d
 8006370:	08006395 	.word	0x08006395
 8006374:	080063c1 	.word	0x080063c1
 8006378:	080063c9 	.word	0x080063c9
 800637c:	2300      	movs	r3, #0
 800637e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006382:	e153      	b.n	800662c <UART_SetConfig+0x5d0>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800638a:	e14f      	b.n	800662c <UART_SetConfig+0x5d0>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006392:	e14b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800639a:	e147      	b.n	800662c <UART_SetConfig+0x5d0>
 800639c:	cfff69f3 	.word	0xcfff69f3
 80063a0:	58000c00 	.word	0x58000c00
 80063a4:	11fff4ff 	.word	0x11fff4ff
 80063a8:	40011000 	.word	0x40011000
 80063ac:	58024400 	.word	0x58024400
 80063b0:	40004400 	.word	0x40004400
 80063b4:	40004800 	.word	0x40004800
 80063b8:	40004c00 	.word	0x40004c00
 80063bc:	40005000 	.word	0x40005000
 80063c0:	2320      	movs	r3, #32
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e131      	b.n	800662c <UART_SetConfig+0x5d0>
 80063c8:	2340      	movs	r3, #64	; 0x40
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e12d      	b.n	800662c <UART_SetConfig+0x5d0>
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	bf00      	nop
 80063d8:	e128      	b.n	800662c <UART_SetConfig+0x5d0>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4ab6      	ldr	r2, [pc, #728]	; (80066b8 <UART_SetConfig+0x65c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d178      	bne.n	80064d6 <UART_SetConfig+0x47a>
 80063e4:	4bb5      	ldr	r3, [pc, #724]	; (80066bc <UART_SetConfig+0x660>)
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ec:	2b28      	cmp	r3, #40	; 0x28
 80063ee:	d86d      	bhi.n	80064cc <UART_SetConfig+0x470>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x39c>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800649d 	.word	0x0800649d
 80063fc:	080064cd 	.word	0x080064cd
 8006400:	080064cd 	.word	0x080064cd
 8006404:	080064cd 	.word	0x080064cd
 8006408:	080064cd 	.word	0x080064cd
 800640c:	080064cd 	.word	0x080064cd
 8006410:	080064cd 	.word	0x080064cd
 8006414:	080064cd 	.word	0x080064cd
 8006418:	080064a5 	.word	0x080064a5
 800641c:	080064cd 	.word	0x080064cd
 8006420:	080064cd 	.word	0x080064cd
 8006424:	080064cd 	.word	0x080064cd
 8006428:	080064cd 	.word	0x080064cd
 800642c:	080064cd 	.word	0x080064cd
 8006430:	080064cd 	.word	0x080064cd
 8006434:	080064cd 	.word	0x080064cd
 8006438:	080064ad 	.word	0x080064ad
 800643c:	080064cd 	.word	0x080064cd
 8006440:	080064cd 	.word	0x080064cd
 8006444:	080064cd 	.word	0x080064cd
 8006448:	080064cd 	.word	0x080064cd
 800644c:	080064cd 	.word	0x080064cd
 8006450:	080064cd 	.word	0x080064cd
 8006454:	080064cd 	.word	0x080064cd
 8006458:	080064b5 	.word	0x080064b5
 800645c:	080064cd 	.word	0x080064cd
 8006460:	080064cd 	.word	0x080064cd
 8006464:	080064cd 	.word	0x080064cd
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064cd 	.word	0x080064cd
 8006470:	080064cd 	.word	0x080064cd
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064bd 	.word	0x080064bd
 800647c:	080064cd 	.word	0x080064cd
 8006480:	080064cd 	.word	0x080064cd
 8006484:	080064cd 	.word	0x080064cd
 8006488:	080064cd 	.word	0x080064cd
 800648c:	080064cd 	.word	0x080064cd
 8006490:	080064cd 	.word	0x080064cd
 8006494:	080064cd 	.word	0x080064cd
 8006498:	080064c5 	.word	0x080064c5
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a2:	e0c3      	b.n	800662c <UART_SetConfig+0x5d0>
 80064a4:	2304      	movs	r3, #4
 80064a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064aa:	e0bf      	b.n	800662c <UART_SetConfig+0x5d0>
 80064ac:	2308      	movs	r3, #8
 80064ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b2:	e0bb      	b.n	800662c <UART_SetConfig+0x5d0>
 80064b4:	2310      	movs	r3, #16
 80064b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ba:	e0b7      	b.n	800662c <UART_SetConfig+0x5d0>
 80064bc:	2320      	movs	r3, #32
 80064be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c2:	e0b3      	b.n	800662c <UART_SetConfig+0x5d0>
 80064c4:	2340      	movs	r3, #64	; 0x40
 80064c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ca:	e0af      	b.n	800662c <UART_SetConfig+0x5d0>
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d2:	bf00      	nop
 80064d4:	e0aa      	b.n	800662c <UART_SetConfig+0x5d0>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a79      	ldr	r2, [pc, #484]	; (80066c0 <UART_SetConfig+0x664>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d132      	bne.n	8006546 <UART_SetConfig+0x4ea>
 80064e0:	4b76      	ldr	r3, [pc, #472]	; (80066bc <UART_SetConfig+0x660>)
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d827      	bhi.n	800653c <UART_SetConfig+0x4e0>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x498>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	0800650d 	.word	0x0800650d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	0800651d 	.word	0x0800651d
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	2300      	movs	r3, #0
 800650e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006512:	e08b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651a:	e087      	b.n	800662c <UART_SetConfig+0x5d0>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006522:	e083      	b.n	800662c <UART_SetConfig+0x5d0>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652a:	e07f      	b.n	800662c <UART_SetConfig+0x5d0>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006532:	e07b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006534:	2340      	movs	r3, #64	; 0x40
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e077      	b.n	800662c <UART_SetConfig+0x5d0>
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	bf00      	nop
 8006544:	e072      	b.n	800662c <UART_SetConfig+0x5d0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a5e      	ldr	r2, [pc, #376]	; (80066c4 <UART_SetConfig+0x668>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d132      	bne.n	80065b6 <UART_SetConfig+0x55a>
 8006550:	4b5a      	ldr	r3, [pc, #360]	; (80066bc <UART_SetConfig+0x660>)
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	2b05      	cmp	r3, #5
 800655a:	d827      	bhi.n	80065ac <UART_SetConfig+0x550>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x508>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	0800657d 	.word	0x0800657d
 8006568:	08006585 	.word	0x08006585
 800656c:	0800658d 	.word	0x0800658d
 8006570:	08006595 	.word	0x08006595
 8006574:	0800659d 	.word	0x0800659d
 8006578:	080065a5 	.word	0x080065a5
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006582:	e053      	b.n	800662c <UART_SetConfig+0x5d0>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658a:	e04f      	b.n	800662c <UART_SetConfig+0x5d0>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006592:	e04b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659a:	e047      	b.n	800662c <UART_SetConfig+0x5d0>
 800659c:	2320      	movs	r3, #32
 800659e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a2:	e043      	b.n	800662c <UART_SetConfig+0x5d0>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065aa:	e03f      	b.n	800662c <UART_SetConfig+0x5d0>
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b2:	bf00      	nop
 80065b4:	e03a      	b.n	800662c <UART_SetConfig+0x5d0>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a43      	ldr	r2, [pc, #268]	; (80066c8 <UART_SetConfig+0x66c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d132      	bne.n	8006626 <UART_SetConfig+0x5ca>
 80065c0:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <UART_SetConfig+0x660>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	d827      	bhi.n	800661c <UART_SetConfig+0x5c0>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x578>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2302      	movs	r3, #2
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e01b      	b.n	800662c <UART_SetConfig+0x5d0>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e017      	b.n	800662c <UART_SetConfig+0x5d0>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e013      	b.n	800662c <UART_SetConfig+0x5d0>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x5d0>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e00b      	b.n	800662c <UART_SetConfig+0x5d0>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e007      	b.n	800662c <UART_SetConfig+0x5d0>
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <UART_SetConfig+0x5d0>
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a25      	ldr	r2, [pc, #148]	; (80066c8 <UART_SetConfig+0x66c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f040 80b8 	bne.w	80067a8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800663c:	2b08      	cmp	r3, #8
 800663e:	d019      	beq.n	8006674 <UART_SetConfig+0x618>
 8006640:	2b08      	cmp	r3, #8
 8006642:	dc04      	bgt.n	800664e <UART_SetConfig+0x5f2>
 8006644:	2b02      	cmp	r3, #2
 8006646:	d009      	beq.n	800665c <UART_SetConfig+0x600>
 8006648:	2b04      	cmp	r3, #4
 800664a:	d00b      	beq.n	8006664 <UART_SetConfig+0x608>
 800664c:	e042      	b.n	80066d4 <UART_SetConfig+0x678>
 800664e:	2b20      	cmp	r3, #32
 8006650:	d02b      	beq.n	80066aa <UART_SetConfig+0x64e>
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d02c      	beq.n	80066b0 <UART_SetConfig+0x654>
 8006656:	2b10      	cmp	r3, #16
 8006658:	d014      	beq.n	8006684 <UART_SetConfig+0x628>
 800665a:	e03b      	b.n	80066d4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800665c:	f7fe fd6e 	bl	800513c <HAL_RCCEx_GetD3PCLK1Freq>
 8006660:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006662:	e03d      	b.n	80066e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fd7d 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006672:	e035      	b.n	80066e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fec1 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006682:	e02d      	b.n	80066e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <UART_SetConfig+0x660>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <UART_SetConfig+0x660>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <UART_SetConfig+0x670>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066a2:	e01d      	b.n	80066e0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <UART_SetConfig+0x670>)
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066a8:	e01a      	b.n	80066e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <UART_SetConfig+0x674>)
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ae:	e017      	b.n	80066e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b6:	e013      	b.n	80066e0 <UART_SetConfig+0x684>
 80066b8:	40011400 	.word	0x40011400
 80066bc:	58024400 	.word	0x58024400
 80066c0:	40007800 	.word	0x40007800
 80066c4:	40007c00 	.word	0x40007c00
 80066c8:	58000c00 	.word	0x58000c00
 80066cc:	03d09000 	.word	0x03d09000
 80066d0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 824d 	beq.w	8006b82 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	4aad      	ldr	r2, [pc, #692]	; (80069a4 <UART_SetConfig+0x948>)
 80066ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066fa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4413      	add	r3, r2
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	429a      	cmp	r2, r3
 800670a:	d305      	bcc.n	8006718 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800671e:	e230      	b.n	8006b82 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	4618      	mov	r0, r3
 8006724:	f04f 0100 	mov.w	r1, #0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	4a9d      	ldr	r2, [pc, #628]	; (80069a4 <UART_SetConfig+0x948>)
 800672e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f04f 0400 	mov.w	r4, #0
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	f7f9 fe20 	bl	8000380 <__aeabi_uldivmod>
 8006740:	4603      	mov	r3, r0
 8006742:	460c      	mov	r4, r1
 8006744:	4619      	mov	r1, r3
 8006746:	4622      	mov	r2, r4
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	f04f 0400 	mov.w	r4, #0
 8006750:	0214      	lsls	r4, r2, #8
 8006752:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006756:	020b      	lsls	r3, r1, #8
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6852      	ldr	r2, [r2, #4]
 800675c:	0852      	lsrs	r2, r2, #1
 800675e:	4611      	mov	r1, r2
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	eb13 0b01 	adds.w	fp, r3, r1
 8006768:	eb44 0c02 	adc.w	ip, r4, r2
 800676c:	4658      	mov	r0, fp
 800676e:	4661      	mov	r1, ip
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	f7f9 fe00 	bl	8000380 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800678c:	d308      	bcc.n	80067a0 <UART_SetConfig+0x744>
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006794:	d204      	bcs.n	80067a0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679c:	60da      	str	r2, [r3, #12]
 800679e:	e1f0      	b.n	8006b82 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80067a6:	e1ec      	b.n	8006b82 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b0:	f040 8100 	bne.w	80069b4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80067b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	f200 80b7 	bhi.w	800692c <UART_SetConfig+0x8d0>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x768>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080068c9 	.word	0x080068c9
 80067c8:	080068d1 	.word	0x080068d1
 80067cc:	0800692d 	.word	0x0800692d
 80067d0:	0800692d 	.word	0x0800692d
 80067d4:	080068d9 	.word	0x080068d9
 80067d8:	0800692d 	.word	0x0800692d
 80067dc:	0800692d 	.word	0x0800692d
 80067e0:	0800692d 	.word	0x0800692d
 80067e4:	080068e9 	.word	0x080068e9
 80067e8:	0800692d 	.word	0x0800692d
 80067ec:	0800692d 	.word	0x0800692d
 80067f0:	0800692d 	.word	0x0800692d
 80067f4:	0800692d 	.word	0x0800692d
 80067f8:	0800692d 	.word	0x0800692d
 80067fc:	0800692d 	.word	0x0800692d
 8006800:	0800692d 	.word	0x0800692d
 8006804:	080068f9 	.word	0x080068f9
 8006808:	0800692d 	.word	0x0800692d
 800680c:	0800692d 	.word	0x0800692d
 8006810:	0800692d 	.word	0x0800692d
 8006814:	0800692d 	.word	0x0800692d
 8006818:	0800692d 	.word	0x0800692d
 800681c:	0800692d 	.word	0x0800692d
 8006820:	0800692d 	.word	0x0800692d
 8006824:	0800692d 	.word	0x0800692d
 8006828:	0800692d 	.word	0x0800692d
 800682c:	0800692d 	.word	0x0800692d
 8006830:	0800692d 	.word	0x0800692d
 8006834:	0800692d 	.word	0x0800692d
 8006838:	0800692d 	.word	0x0800692d
 800683c:	0800692d 	.word	0x0800692d
 8006840:	0800692d 	.word	0x0800692d
 8006844:	0800691f 	.word	0x0800691f
 8006848:	0800692d 	.word	0x0800692d
 800684c:	0800692d 	.word	0x0800692d
 8006850:	0800692d 	.word	0x0800692d
 8006854:	0800692d 	.word	0x0800692d
 8006858:	0800692d 	.word	0x0800692d
 800685c:	0800692d 	.word	0x0800692d
 8006860:	0800692d 	.word	0x0800692d
 8006864:	0800692d 	.word	0x0800692d
 8006868:	0800692d 	.word	0x0800692d
 800686c:	0800692d 	.word	0x0800692d
 8006870:	0800692d 	.word	0x0800692d
 8006874:	0800692d 	.word	0x0800692d
 8006878:	0800692d 	.word	0x0800692d
 800687c:	0800692d 	.word	0x0800692d
 8006880:	0800692d 	.word	0x0800692d
 8006884:	0800692d 	.word	0x0800692d
 8006888:	0800692d 	.word	0x0800692d
 800688c:	0800692d 	.word	0x0800692d
 8006890:	0800692d 	.word	0x0800692d
 8006894:	0800692d 	.word	0x0800692d
 8006898:	0800692d 	.word	0x0800692d
 800689c:	0800692d 	.word	0x0800692d
 80068a0:	0800692d 	.word	0x0800692d
 80068a4:	0800692d 	.word	0x0800692d
 80068a8:	0800692d 	.word	0x0800692d
 80068ac:	0800692d 	.word	0x0800692d
 80068b0:	0800692d 	.word	0x0800692d
 80068b4:	0800692d 	.word	0x0800692d
 80068b8:	0800692d 	.word	0x0800692d
 80068bc:	0800692d 	.word	0x0800692d
 80068c0:	0800692d 	.word	0x0800692d
 80068c4:	08006925 	.word	0x08006925
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fd fcdc 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80068cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80068ce:	e033      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d0:	f7fd fcee 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 80068d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80068d6:	e02f      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fc43 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068e6:	e027      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fd87 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068f6:	e01f      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <UART_SetConfig+0x94c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <UART_SetConfig+0x94c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	08db      	lsrs	r3, r3, #3
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	4a27      	ldr	r2, [pc, #156]	; (80069ac <UART_SetConfig+0x950>)
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006916:	e00f      	b.n	8006938 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006918:	4b24      	ldr	r3, [pc, #144]	; (80069ac <UART_SetConfig+0x950>)
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800691c:	e00c      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <UART_SetConfig+0x954>)
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006922:	e009      	b.n	8006938 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800692a:	e005      	b.n	8006938 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006936:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8121 	beq.w	8006b82 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <UART_SetConfig+0x948>)
 8006946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800694a:	461a      	mov	r2, r3
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006952:	005a      	lsls	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	441a      	add	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	b29b      	uxth	r3, r3
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d916      	bls.n	800699c <UART_SetConfig+0x940>
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006974:	d212      	bcs.n	800699c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	b29b      	uxth	r3, r3
 800697a:	f023 030f 	bic.w	r3, r3, #15
 800697e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	b29b      	uxth	r3, r3
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	b29a      	uxth	r2, r3
 800698c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800698e:	4313      	orrs	r3, r2
 8006990:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	e0f2      	b.n	8006b82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80069a2:	e0ee      	b.n	8006b82 <UART_SetConfig+0xb26>
 80069a4:	0800bcf4 	.word	0x0800bcf4
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80069b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	f200 80b7 	bhi.w	8006b2c <UART_SetConfig+0xad0>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <UART_SetConfig+0x968>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	08006ac9 	.word	0x08006ac9
 80069c8:	08006ad1 	.word	0x08006ad1
 80069cc:	08006b2d 	.word	0x08006b2d
 80069d0:	08006b2d 	.word	0x08006b2d
 80069d4:	08006ad9 	.word	0x08006ad9
 80069d8:	08006b2d 	.word	0x08006b2d
 80069dc:	08006b2d 	.word	0x08006b2d
 80069e0:	08006b2d 	.word	0x08006b2d
 80069e4:	08006ae9 	.word	0x08006ae9
 80069e8:	08006b2d 	.word	0x08006b2d
 80069ec:	08006b2d 	.word	0x08006b2d
 80069f0:	08006b2d 	.word	0x08006b2d
 80069f4:	08006b2d 	.word	0x08006b2d
 80069f8:	08006b2d 	.word	0x08006b2d
 80069fc:	08006b2d 	.word	0x08006b2d
 8006a00:	08006b2d 	.word	0x08006b2d
 8006a04:	08006af9 	.word	0x08006af9
 8006a08:	08006b2d 	.word	0x08006b2d
 8006a0c:	08006b2d 	.word	0x08006b2d
 8006a10:	08006b2d 	.word	0x08006b2d
 8006a14:	08006b2d 	.word	0x08006b2d
 8006a18:	08006b2d 	.word	0x08006b2d
 8006a1c:	08006b2d 	.word	0x08006b2d
 8006a20:	08006b2d 	.word	0x08006b2d
 8006a24:	08006b2d 	.word	0x08006b2d
 8006a28:	08006b2d 	.word	0x08006b2d
 8006a2c:	08006b2d 	.word	0x08006b2d
 8006a30:	08006b2d 	.word	0x08006b2d
 8006a34:	08006b2d 	.word	0x08006b2d
 8006a38:	08006b2d 	.word	0x08006b2d
 8006a3c:	08006b2d 	.word	0x08006b2d
 8006a40:	08006b2d 	.word	0x08006b2d
 8006a44:	08006b1f 	.word	0x08006b1f
 8006a48:	08006b2d 	.word	0x08006b2d
 8006a4c:	08006b2d 	.word	0x08006b2d
 8006a50:	08006b2d 	.word	0x08006b2d
 8006a54:	08006b2d 	.word	0x08006b2d
 8006a58:	08006b2d 	.word	0x08006b2d
 8006a5c:	08006b2d 	.word	0x08006b2d
 8006a60:	08006b2d 	.word	0x08006b2d
 8006a64:	08006b2d 	.word	0x08006b2d
 8006a68:	08006b2d 	.word	0x08006b2d
 8006a6c:	08006b2d 	.word	0x08006b2d
 8006a70:	08006b2d 	.word	0x08006b2d
 8006a74:	08006b2d 	.word	0x08006b2d
 8006a78:	08006b2d 	.word	0x08006b2d
 8006a7c:	08006b2d 	.word	0x08006b2d
 8006a80:	08006b2d 	.word	0x08006b2d
 8006a84:	08006b2d 	.word	0x08006b2d
 8006a88:	08006b2d 	.word	0x08006b2d
 8006a8c:	08006b2d 	.word	0x08006b2d
 8006a90:	08006b2d 	.word	0x08006b2d
 8006a94:	08006b2d 	.word	0x08006b2d
 8006a98:	08006b2d 	.word	0x08006b2d
 8006a9c:	08006b2d 	.word	0x08006b2d
 8006aa0:	08006b2d 	.word	0x08006b2d
 8006aa4:	08006b2d 	.word	0x08006b2d
 8006aa8:	08006b2d 	.word	0x08006b2d
 8006aac:	08006b2d 	.word	0x08006b2d
 8006ab0:	08006b2d 	.word	0x08006b2d
 8006ab4:	08006b2d 	.word	0x08006b2d
 8006ab8:	08006b2d 	.word	0x08006b2d
 8006abc:	08006b2d 	.word	0x08006b2d
 8006ac0:	08006b2d 	.word	0x08006b2d
 8006ac4:	08006b25 	.word	0x08006b25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd fbdc 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8006acc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ace:	e033      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fd fbee 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8006ad4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ad6:	e02f      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fb43 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ae6:	e027      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe fc87 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af6:	e01f      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af8:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <UART_SetConfig+0xb50>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b04:	4b29      	ldr	r3, [pc, #164]	; (8006bac <UART_SetConfig+0xb50>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	08db      	lsrs	r3, r3, #3
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <UART_SetConfig+0xb54>)
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b16:	e00f      	b.n	8006b38 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <UART_SetConfig+0xb54>)
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b1c:	e00c      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b1e:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <UART_SetConfig+0xb58>)
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b22:	e009      	b.n	8006b38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2a:	e005      	b.n	8006b38 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b36:	bf00      	nop
    }

    if (pclk != 0U)
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <UART_SetConfig+0xb5c>)
 8006b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	441a      	add	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d908      	bls.n	8006b7c <UART_SetConfig+0xb20>
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b70:	d204      	bcs.n	8006b7c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	e002      	b.n	8006b82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006b9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3738      	adds	r7, #56	; 0x38
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	03d09000 	.word	0x03d09000
 8006bb4:	003d0900 	.word	0x003d0900
 8006bb8:	0800bcf4 	.word	0x0800bcf4

08006bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01a      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cba:	d10a      	bne.n	8006cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d10:	f7fa fda2 	bl	8001858 <HAL_GetTick>
 8006d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d10e      	bne.n	8006d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f82c 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e022      	b.n	8006d88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d10e      	bne.n	8006d6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f816 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e00c      	b.n	8006d88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	e062      	b.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d05e      	beq.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fa fd55 	bl	8001858 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11d      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e045      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02e      	beq.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e18:	d126      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e00f      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d08d      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e027      	b.n	8006ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2224      	movs	r2, #36	; 0x24
 8006eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e02d      	b.n	8006f76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2224      	movs	r2, #36	; 0x24
 8006f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f850 	bl	8006ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e02d      	b.n	8006ff2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2224      	movs	r2, #36	; 0x24
 8006fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f812 	bl	8006ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007004:	4a2f      	ldr	r2, [pc, #188]	; (80070c4 <UARTEx_SetNbDataToProcess+0xc8>)
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800700e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007012:	4a2d      	ldr	r2, [pc, #180]	; (80070c8 <UARTEx_SetNbDataToProcess+0xcc>)
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800701c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007024:	2b00      	cmp	r3, #0
 8007026:	d108      	bne.n	800703a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007038:	e03d      	b.n	80070b6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800703a:	2310      	movs	r3, #16
 800703c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800703e:	2310      	movs	r3, #16
 8007040:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	0e5b      	lsrs	r3, r3, #25
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	0f5b      	lsrs	r3, r3, #29
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007062:	7fbb      	ldrb	r3, [r7, #30]
 8007064:	7f3a      	ldrb	r2, [r7, #28]
 8007066:	f107 0120 	add.w	r1, r7, #32
 800706a:	440a      	add	r2, r1
 800706c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	7f3a      	ldrb	r2, [r7, #28]
 8007076:	f107 0120 	add.w	r1, r7, #32
 800707a:	440a      	add	r2, r1
 800707c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007080:	fb93 f3f2 	sdiv	r3, r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800708c:	7ffb      	ldrb	r3, [r7, #31]
 800708e:	7f7a      	ldrb	r2, [r7, #29]
 8007090:	f107 0120 	add.w	r1, r7, #32
 8007094:	440a      	add	r2, r1
 8007096:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	7f7a      	ldrb	r2, [r7, #29]
 80070a0:	f107 0120 	add.w	r1, r7, #32
 80070a4:	440a      	add	r2, r1
 80070a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80070aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070b6:	bf00      	nop
 80070b8:	3724      	adds	r7, #36	; 0x24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	0800bc98 	.word	0x0800bc98
 80070c8:	0800bca0 	.word	0x0800bca0

080070cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070cc:	b084      	sub	sp, #16
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	f107 001c 	add.w	r0, r7, #28
 80070da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d120      	bne.n	8007126 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	4b25      	ldr	r3, [pc, #148]	; (800718c <USB_CoreInit+0xc0>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d105      	bne.n	800711a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa4c 	bl	80075b8 <USB_CoreReset>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e01a      	b.n	800715c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa40 	bl	80075b8 <USB_CoreReset>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800713c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
 800714e:	e005      	b.n	800715c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	2b01      	cmp	r3, #1
 8007160:	d10b      	bne.n	800717a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f043 0206 	orr.w	r2, r3, #6
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f043 0220 	orr.w	r2, r3, #32
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007186:	b004      	add	sp, #16
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	ffbdffbf 	.word	0xffbdffbf

08007190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f023 0201 	bic.w	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
 80071dc:	e00b      	b.n	80071f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e001      	b.n	80071f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e003      	b.n	80071fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80071f6:	2032      	movs	r0, #50	; 0x32
 80071f8:	f7fa fb3a 	bl	8001870 <HAL_Delay>

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007208:	b084      	sub	sp, #16
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	e009      	b.n	800723c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3340      	adds	r3, #64	; 0x40
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	2200      	movs	r2, #0
 8007234:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3301      	adds	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b0e      	cmp	r3, #14
 8007240:	d9f2      	bls.n	8007228 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11c      	bne.n	8007282 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007256:	f043 0302 	orr.w	r3, r3, #2
 800725a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e005      	b.n	800728e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	4619      	mov	r1, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a8:	461a      	mov	r2, r3
 80072aa:	680b      	ldr	r3, [r1, #0]
 80072ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d10c      	bne.n	80072ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f949 	bl	8007554 <USB_SetDevSpeed>
 80072c2:	e008      	b.n	80072d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072c4:	2101      	movs	r1, #1
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f944 	bl	8007554 <USB_SetDevSpeed>
 80072cc:	e003      	b.n	80072d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072ce:	2103      	movs	r1, #3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f93f 	bl	8007554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072d6:	2110      	movs	r1, #16
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8f3 	bl	80074c4 <USB_FlushTxFifo>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f911 	bl	8007510 <USB_FlushRxFifo>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	461a      	mov	r2, r3
 8007300:	2300      	movs	r3, #0
 8007302:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	461a      	mov	r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007316:	461a      	mov	r2, r3
 8007318:	2300      	movs	r3, #0
 800731a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	e043      	b.n	80073aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007338:	d118      	bne.n	800736c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	461a      	mov	r2, r3
 800734e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e013      	b.n	800737e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007362:	461a      	mov	r2, r3
 8007364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e008      	b.n	800737e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	461a      	mov	r2, r3
 800737a:	2300      	movs	r3, #0
 800737c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	461a      	mov	r2, r3
 800738c:	2300      	movs	r3, #0
 800738e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739c:	461a      	mov	r2, r3
 800739e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	3301      	adds	r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3b7      	bcc.n	8007322 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	e043      	b.n	8007440 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ce:	d118      	bne.n	8007402 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	461a      	mov	r2, r3
 80073e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	e013      	b.n	8007414 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f8:	461a      	mov	r2, r3
 80073fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	e008      	b.n	8007414 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	461a      	mov	r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	461a      	mov	r2, r3
 8007422:	2300      	movs	r3, #0
 8007424:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	461a      	mov	r2, r3
 8007434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007438:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d3b7      	bcc.n	80073b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800745a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007468:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f043 0210 	orr.w	r2, r3, #16
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699a      	ldr	r2, [r3, #24]
 8007480:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <USB_DevInit+0x2b4>)
 8007482:	4313      	orrs	r3, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800749a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d105      	bne.n	80074ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <USB_DevInit+0x2b8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b8:	b004      	add	sp, #16
 80074ba:	4770      	bx	lr
 80074bc:	803c3800 	.word	0x803c3800
 80074c0:	40000004 	.word	0x40000004

080074c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <USB_FlushTxFifo+0x48>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d901      	bls.n	80074f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e006      	b.n	80074fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d0f0      	beq.n	80074de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	00030d40 	.word	0x00030d40

08007510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2210      	movs	r2, #16
 8007520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4a09      	ldr	r2, [pc, #36]	; (8007550 <USB_FlushRxFifo+0x40>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d901      	bls.n	8007534 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e006      	b.n	8007542 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d0f0      	beq.n	8007522 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	00030d40 	.word	0x00030d40

08007554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075a0:	f043 0302 	orr.w	r3, r3, #2
 80075a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80075a6:	2003      	movs	r0, #3
 80075a8:	f7fa f962 	bl	8001870 <HAL_Delay>

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a13      	ldr	r2, [pc, #76]	; (800761c <USB_CoreReset+0x64>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e01b      	b.n	800760e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	daf2      	bge.n	80075c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f043 0201 	orr.w	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <USB_CoreReset+0x64>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d901      	bls.n	8007600 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e006      	b.n	800760e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b01      	cmp	r3, #1
 800760a:	d0f0      	beq.n	80075ee <USB_CoreReset+0x36>

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	00030d40 	.word	0x00030d40

08007620 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800762e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007632:	2b84      	cmp	r3, #132	; 0x84
 8007634:	d005      	beq.n	8007642 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007636:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	3303      	adds	r3, #3
 8007640:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007654:	f000 fada 	bl	8007c0c <vTaskStartScheduler>
  
  return osOK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	bd80      	pop	{r7, pc}

0800765e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800765e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007660:	b089      	sub	sp, #36	; 0x24
 8007662:	af04      	add	r7, sp, #16
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d020      	beq.n	80076b2 <osThreadCreate+0x54>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01c      	beq.n	80076b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685c      	ldr	r4, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681d      	ldr	r5, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691e      	ldr	r6, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff ffc8 	bl	8007620 <makeFreeRtosPriority>
 8007690:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	9100      	str	r1, [sp, #0]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	4632      	mov	r2, r6
 80076a4:	4629      	mov	r1, r5
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f8ed 	bl	8007886 <xTaskCreateStatic>
 80076ac:	4603      	mov	r3, r0
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e01c      	b.n	80076ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685c      	ldr	r4, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076be:	b29e      	uxth	r6, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ffaa 	bl	8007620 <makeFreeRtosPriority>
 80076cc:	4602      	mov	r2, r0
 80076ce:	f107 030c 	add.w	r3, r7, #12
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	9200      	str	r2, [sp, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	4632      	mov	r2, r6
 80076da:	4629      	mov	r1, r5
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 f92c 	bl	800793a <xTaskCreate>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <osDelay+0x16>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	e000      	b.n	800770e <osDelay+0x18>
 800770c:	2301      	movs	r3, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa48 	bl	8007ba4 <vTaskDelay>
  
  return osOK;
 8007714:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f103 0208 	add.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f04f 32ff 	mov.w	r2, #4294967295
 8007736:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0208 	add.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f103 0208 	add.w	r2, r3, #8
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d103      	bne.n	80077e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	e00c      	b.n	80077fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3308      	adds	r3, #8
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	e002      	b.n	80077ee <vListInsert+0x2e>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d2f6      	bcs.n	80077e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6892      	ldr	r2, [r2, #8]
 8007848:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6852      	ldr	r2, [r2, #4]
 8007852:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d103      	bne.n	8007866 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1e5a      	subs	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007886:	b580      	push	{r7, lr}
 8007888:	b08e      	sub	sp, #56	; 0x38
 800788a:	af04      	add	r7, sp, #16
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	623b      	str	r3, [r7, #32]
 80078ac:	e7fe      	b.n	80078ac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <xTaskCreateStatic+0x42>
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	e7fe      	b.n	80078c6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078c8:	2354      	movs	r3, #84	; 0x54
 80078ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b54      	cmp	r3, #84	; 0x54
 80078d0:	d009      	beq.n	80078e6 <xTaskCreateStatic+0x60>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e7fe      	b.n	80078e4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01e      	beq.n	800792c <xTaskCreateStatic+0xa6>
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2202      	movs	r2, #2
 8007902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007906:	2300      	movs	r3, #0
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f850 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007926:	f000 f8d3 	bl	8007ad0 <prvAddNewTaskToReadyList>
 800792a:	e001      	b.n	8007930 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007930:	697b      	ldr	r3, [r7, #20]
	}
 8007932:	4618      	mov	r0, r3
 8007934:	3728      	adds	r7, #40	; 0x28
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800793a:	b580      	push	{r7, lr}
 800793c:	b08c      	sub	sp, #48	; 0x30
 800793e:	af04      	add	r7, sp, #16
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	4613      	mov	r3, r2
 8007948:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4618      	mov	r0, r3
 8007950:	f000 feb0 	bl	80086b4 <pvPortMalloc>
 8007954:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800795c:	2054      	movs	r0, #84	; 0x54
 800795e:	f000 fea9 	bl	80086b4 <pvPortMalloc>
 8007962:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
 8007970:	e005      	b.n	800797e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007972:	6978      	ldr	r0, [r7, #20]
 8007974:	f000 ff60 	bl	8008838 <vPortFree>
 8007978:	e001      	b.n	800797e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	2300      	movs	r3, #0
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f80e 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079a8:	69f8      	ldr	r0, [r7, #28]
 80079aa:	f000 f891 	bl	8007ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e002      	b.n	80079ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ba:	69bb      	ldr	r3, [r7, #24]
	}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80079dc:	440b      	add	r3, r1
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <prvInitialiseNewTask+0x46>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e7fe      	b.n	8007a08 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01f      	beq.n	8007a50 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e012      	b.n	8007a3c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	3334      	adds	r3, #52	; 0x34
 8007a26:	460a      	mov	r2, r1
 8007a28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d006      	beq.n	8007a44 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b0f      	cmp	r3, #15
 8007a40:	d9e9      	bls.n	8007a16 <prvInitialiseNewTask+0x52>
 8007a42:	e000      	b.n	8007a46 <prvInitialiseNewTask+0x82>
			{
				break;
 8007a44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a4e:	e003      	b.n	8007a58 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	2b06      	cmp	r3, #6
 8007a5c:	d901      	bls.n	8007a62 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a5e:	2306      	movs	r3, #6
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2200      	movs	r2, #0
 8007a72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	3304      	adds	r3, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fe70 	bl	800775e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	3318      	adds	r3, #24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fe6b 	bl	800775e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	f1c3 0207 	rsb	r2, r3, #7
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	69b8      	ldr	r0, [r7, #24]
 8007ab2:	f000 fbfd 	bl	80082b0 <pxPortInitialiseStack>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac8:	bf00      	nop
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ad8:	f000 fd10 	bl	80084fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007adc:	4b2a      	ldr	r3, [pc, #168]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ae6:	4b29      	ldr	r3, [pc, #164]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aee:	4a27      	ldr	r2, [pc, #156]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007af4:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d110      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007afc:	f000 fab8 	bl	8008070 <prvInitialiseTaskLists>
 8007b00:	e00d      	b.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <prvAddNewTaskToReadyList+0xc0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b0a:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d802      	bhi.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b18:	4a1c      	ldr	r2, [pc, #112]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007b26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <prvAddNewTaskToReadyList+0xcc>)
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f7ff fe11 	bl	8007778 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b56:	f000 fcff 	bl	8008558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <prvAddNewTaskToReadyList+0xc0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00e      	beq.n	8007b80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d207      	bcs.n	8007b80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <prvAddNewTaskToReadyList+0xd0>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	24000b54 	.word	0x24000b54
 8007b8c:	24000a54 	.word	0x24000a54
 8007b90:	24000b60 	.word	0x24000b60
 8007b94:	24000b70 	.word	0x24000b70
 8007b98:	24000b5c 	.word	0x24000b5c
 8007b9c:	24000a58 	.word	0x24000a58
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d016      	beq.n	8007be4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <vTaskDelay+0x60>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <vTaskDelay+0x2e>
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	e7fe      	b.n	8007bd0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007bd2:	f000 f879 	bl	8007cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb03 	bl	80081e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bde:	f000 f881 	bl	8007ce4 <xTaskResumeAll>
 8007be2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <vTaskDelay+0x64>)
 8007bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	24000b7c 	.word	0x24000b7c
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	1d39      	adds	r1, r7, #4
 8007c1e:	f107 0308 	add.w	r3, r7, #8
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f8 fe90 	bl	8000948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	9202      	str	r2, [sp, #8]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	460a      	mov	r2, r1
 8007c3a:	491d      	ldr	r1, [pc, #116]	; (8007cb0 <vTaskStartScheduler+0xa4>)
 8007c3c:	481d      	ldr	r0, [pc, #116]	; (8007cb4 <vTaskStartScheduler+0xa8>)
 8007c3e:	f7ff fe22 	bl	8007886 <xTaskCreateStatic>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <vTaskStartScheduler+0xac>)
 8007c46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <vTaskStartScheduler+0xac>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e001      	b.n	8007c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d115      	bne.n	8007c8c <vTaskStartScheduler+0x80>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <vTaskStartScheduler+0xb0>)
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c7a:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <vTaskStartScheduler+0xb4>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <vTaskStartScheduler+0xb8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c86:	f000 fb9b 	bl	80083c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c8a:	e00d      	b.n	8007ca8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d109      	bne.n	8007ca8 <vTaskStartScheduler+0x9c>
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e7fe      	b.n	8007ca6 <vTaskStartScheduler+0x9a>
}
 8007ca8:	bf00      	nop
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	0800bca8 	.word	0x0800bca8
 8007cb4:	08008041 	.word	0x08008041
 8007cb8:	24000b78 	.word	0x24000b78
 8007cbc:	24000b74 	.word	0x24000b74
 8007cc0:	24000b60 	.word	0x24000b60
 8007cc4:	24000b58 	.word	0x24000b58

08007cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <vTaskSuspendAll+0x18>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a03      	ldr	r2, [pc, #12]	; (8007ce0 <vTaskSuspendAll+0x18>)
 8007cd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	24000b7c 	.word	0x24000b7c

08007ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cf2:	4b41      	ldr	r3, [pc, #260]	; (8007df8 <xTaskResumeAll+0x114>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <xTaskResumeAll+0x2a>
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	e7fe      	b.n	8007d0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d0e:	f000 fbf5 	bl	80084fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d12:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <xTaskResumeAll+0x114>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4a37      	ldr	r2, [pc, #220]	; (8007df8 <xTaskResumeAll+0x114>)
 8007d1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1c:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <xTaskResumeAll+0x114>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d161      	bne.n	8007de8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d24:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <xTaskResumeAll+0x118>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d05d      	beq.n	8007de8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d2c:	e02e      	b.n	8007d8c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2e:	4b34      	ldr	r3, [pc, #208]	; (8007e00 <xTaskResumeAll+0x11c>)
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3318      	adds	r3, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fd79 	bl	8007832 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fd74 	bl	8007832 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	2201      	movs	r2, #1
 8007d50:	409a      	lsls	r2, r3
 8007d52:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <xTaskResumeAll+0x120>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <xTaskResumeAll+0x120>)
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <xTaskResumeAll+0x124>)
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7ff fd00 	bl	8007778 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4b23      	ldr	r3, [pc, #140]	; (8007e0c <xTaskResumeAll+0x128>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007d86:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <xTaskResumeAll+0x12c>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d8c:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <xTaskResumeAll+0x11c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1cc      	bne.n	8007d2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d9a:	f000 fa03 	bl	80081a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <xTaskResumeAll+0x130>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007daa:	f000 f837 	bl	8007e1c <xTaskIncrementTick>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007db4:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <xTaskResumeAll+0x12c>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f1      	bne.n	8007daa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007dc6:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <xTaskResumeAll+0x130>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <xTaskResumeAll+0x12c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <xTaskResumeAll+0x134>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de8:	f000 fbb6 	bl	8008558 <vPortExitCritical>

	return xAlreadyYielded;
 8007dec:	68bb      	ldr	r3, [r7, #8]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	24000b7c 	.word	0x24000b7c
 8007dfc:	24000b54 	.word	0x24000b54
 8007e00:	24000b14 	.word	0x24000b14
 8007e04:	24000b5c 	.word	0x24000b5c
 8007e08:	24000a58 	.word	0x24000a58
 8007e0c:	24000a54 	.word	0x24000a54
 8007e10:	24000b68 	.word	0x24000b68
 8007e14:	24000b64 	.word	0x24000b64
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e26:	4b4e      	ldr	r3, [pc, #312]	; (8007f60 <xTaskIncrementTick+0x144>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 8087 	bne.w	8007f3e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <xTaskIncrementTick+0x148>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e38:	4a4a      	ldr	r2, [pc, #296]	; (8007f64 <xTaskIncrementTick+0x148>)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11f      	bne.n	8007e84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e44:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <xTaskIncrementTick+0x46>
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	e7fe      	b.n	8007e60 <xTaskIncrementTick+0x44>
 8007e62:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a3e      	ldr	r2, [pc, #248]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	4a3e      	ldr	r2, [pc, #248]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4b3e      	ldr	r3, [pc, #248]	; (8007f70 <xTaskIncrementTick+0x154>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	4a3c      	ldr	r2, [pc, #240]	; (8007f70 <xTaskIncrementTick+0x154>)
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	f000 f990 	bl	80081a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e84:	4b3b      	ldr	r3, [pc, #236]	; (8007f74 <xTaskIncrementTick+0x158>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d348      	bcc.n	8007f20 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e8e:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e98:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <xTaskIncrementTick+0x158>)
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	601a      	str	r2, [r3, #0]
					break;
 8007ea0:	e03e      	b.n	8007f20 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea2:	4b31      	ldr	r3, [pc, #196]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d203      	bcs.n	8007ec2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eba:	4a2e      	ldr	r2, [pc, #184]	; (8007f74 <xTaskIncrementTick+0x158>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ec0:	e02e      	b.n	8007f20 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fcb3 	bl	8007832 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3318      	adds	r3, #24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff fcaa 	bl	8007832 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <xTaskIncrementTick+0x15c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <xTaskIncrementTick+0x15c>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4a1f      	ldr	r2, [pc, #124]	; (8007f7c <xTaskIncrementTick+0x160>)
 8007efe:	441a      	add	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f7ff fc36 	bl	8007778 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <xTaskIncrementTick+0x164>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d3b9      	bcc.n	8007e8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f1e:	e7b6      	b.n	8007e8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f20:	4b17      	ldr	r3, [pc, #92]	; (8007f80 <xTaskIncrementTick+0x164>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f26:	4915      	ldr	r1, [pc, #84]	; (8007f7c <xTaskIncrementTick+0x160>)
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d907      	bls.n	8007f48 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e004      	b.n	8007f48 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <xTaskIncrementTick+0x168>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0f      	ldr	r2, [pc, #60]	; (8007f84 <xTaskIncrementTick+0x168>)
 8007f46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <xTaskIncrementTick+0x16c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f54:	697b      	ldr	r3, [r7, #20]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	24000b7c 	.word	0x24000b7c
 8007f64:	24000b58 	.word	0x24000b58
 8007f68:	24000b0c 	.word	0x24000b0c
 8007f6c:	24000b10 	.word	0x24000b10
 8007f70:	24000b6c 	.word	0x24000b6c
 8007f74:	24000b74 	.word	0x24000b74
 8007f78:	24000b5c 	.word	0x24000b5c
 8007f7c:	24000a58 	.word	0x24000a58
 8007f80:	24000a54 	.word	0x24000a54
 8007f84:	24000b64 	.word	0x24000b64
 8007f88:	24000b68 	.word	0x24000b68

08007f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f92:	4b26      	ldr	r3, [pc, #152]	; (800802c <vTaskSwitchContext+0xa0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f9a:	4b25      	ldr	r3, [pc, #148]	; (8008030 <vTaskSwitchContext+0xa4>)
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fa0:	e03e      	b.n	8008020 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <vTaskSwitchContext+0xa4>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa8:	4b22      	ldr	r3, [pc, #136]	; (8008034 <vTaskSwitchContext+0xa8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	fab3 f383 	clz	r3, r3
 8007fb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	f1c3 031f 	rsb	r3, r3, #31
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	491e      	ldr	r1, [pc, #120]	; (8008038 <vTaskSwitchContext+0xac>)
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	e7fe      	b.n	8007fe4 <vTaskSwitchContext+0x58>
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4a11      	ldr	r2, [pc, #68]	; (8008038 <vTaskSwitchContext+0xac>)
 8007ff2:	4413      	add	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	3308      	adds	r3, #8
 8008008:	429a      	cmp	r2, r3
 800800a:	d104      	bne.n	8008016 <vTaskSwitchContext+0x8a>
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4a07      	ldr	r2, [pc, #28]	; (800803c <vTaskSwitchContext+0xb0>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	24000b7c 	.word	0x24000b7c
 8008030:	24000b68 	.word	0x24000b68
 8008034:	24000b5c 	.word	0x24000b5c
 8008038:	24000a58 	.word	0x24000a58
 800803c:	24000a54 	.word	0x24000a54

08008040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008048:	f000 f852 	bl	80080f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <prvIdleTask+0x28>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d9f9      	bls.n	8008048 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <prvIdleTask+0x2c>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008064:	e7f0      	b.n	8008048 <prvIdleTask+0x8>
 8008066:	bf00      	nop
 8008068:	24000a58 	.word	0x24000a58
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008076:	2300      	movs	r3, #0
 8008078:	607b      	str	r3, [r7, #4]
 800807a:	e00c      	b.n	8008096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4a12      	ldr	r2, [pc, #72]	; (80080d0 <prvInitialiseTaskLists+0x60>)
 8008088:	4413      	add	r3, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fb47 	bl	800771e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3301      	adds	r3, #1
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b06      	cmp	r3, #6
 800809a:	d9ef      	bls.n	800807c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800809c:	480d      	ldr	r0, [pc, #52]	; (80080d4 <prvInitialiseTaskLists+0x64>)
 800809e:	f7ff fb3e 	bl	800771e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080a2:	480d      	ldr	r0, [pc, #52]	; (80080d8 <prvInitialiseTaskLists+0x68>)
 80080a4:	f7ff fb3b 	bl	800771e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080a8:	480c      	ldr	r0, [pc, #48]	; (80080dc <prvInitialiseTaskLists+0x6c>)
 80080aa:	f7ff fb38 	bl	800771e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080ae:	480c      	ldr	r0, [pc, #48]	; (80080e0 <prvInitialiseTaskLists+0x70>)
 80080b0:	f7ff fb35 	bl	800771e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080b4:	480b      	ldr	r0, [pc, #44]	; (80080e4 <prvInitialiseTaskLists+0x74>)
 80080b6:	f7ff fb32 	bl	800771e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <prvInitialiseTaskLists+0x78>)
 80080bc:	4a05      	ldr	r2, [pc, #20]	; (80080d4 <prvInitialiseTaskLists+0x64>)
 80080be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <prvInitialiseTaskLists+0x7c>)
 80080c2:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <prvInitialiseTaskLists+0x68>)
 80080c4:	601a      	str	r2, [r3, #0]
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	24000a58 	.word	0x24000a58
 80080d4:	24000ae4 	.word	0x24000ae4
 80080d8:	24000af8 	.word	0x24000af8
 80080dc:	24000b14 	.word	0x24000b14
 80080e0:	24000b28 	.word	0x24000b28
 80080e4:	24000b40 	.word	0x24000b40
 80080e8:	24000b0c 	.word	0x24000b0c
 80080ec:	24000b10 	.word	0x24000b10

080080f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080f6:	e019      	b.n	800812c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080f8:	f000 fa00 	bl	80084fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <prvCheckTasksWaitingTermination+0x4c>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fb92 	bl	8007832 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <prvCheckTasksWaitingTermination+0x50>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3b01      	subs	r3, #1
 8008114:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <prvCheckTasksWaitingTermination+0x50>)
 8008116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <prvCheckTasksWaitingTermination+0x54>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	4a09      	ldr	r2, [pc, #36]	; (8008144 <prvCheckTasksWaitingTermination+0x54>)
 8008120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008122:	f000 fa19 	bl	8008558 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f80e 	bl	8008148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <prvCheckTasksWaitingTermination+0x54>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e1      	bne.n	80080f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	24000b28 	.word	0x24000b28
 8008140:	24000b54 	.word	0x24000b54
 8008144:	24000b3c 	.word	0x24000b3c

08008148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008156:	2b00      	cmp	r3, #0
 8008158:	d108      	bne.n	800816c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fb6a 	bl	8008838 <vPortFree>
				vPortFree( pxTCB );
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb67 	bl	8008838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800816a:	e017      	b.n	800819c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008172:	2b01      	cmp	r3, #1
 8008174:	d103      	bne.n	800817e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb5e 	bl	8008838 <vPortFree>
	}
 800817c:	e00e      	b.n	800819c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008184:	2b02      	cmp	r3, #2
 8008186:	d009      	beq.n	800819c <prvDeleteTCB+0x54>
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e7fe      	b.n	800819a <prvDeleteTCB+0x52>
	}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081aa:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <prvResetNextTaskUnblockTime+0x38>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081b4:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <prvResetNextTaskUnblockTime+0x3c>)
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081bc:	e008      	b.n	80081d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <prvResetNextTaskUnblockTime+0x38>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a04      	ldr	r2, [pc, #16]	; (80081e0 <prvResetNextTaskUnblockTime+0x3c>)
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	24000b0c 	.word	0x24000b0c
 80081e0:	24000b74 	.word	0x24000b74

080081e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ee:	4b29      	ldr	r3, [pc, #164]	; (8008294 <prvAddCurrentTaskToDelayedList+0xb0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f4:	4b28      	ldr	r3, [pc, #160]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fb19 	bl	8007832 <uxListRemove>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2201      	movs	r2, #1
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43da      	mvns	r2, r3
 8008214:	4b21      	ldr	r3, [pc, #132]	; (800829c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4013      	ands	r3, r2
 800821a:	4a20      	ldr	r2, [pc, #128]	; (800829c <prvAddCurrentTaskToDelayedList+0xb8>)
 800821c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d10a      	bne.n	800823c <prvAddCurrentTaskToDelayedList+0x58>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822c:	4b1a      	ldr	r3, [pc, #104]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3304      	adds	r3, #4
 8008232:	4619      	mov	r1, r3
 8008234:	481a      	ldr	r0, [pc, #104]	; (80082a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008236:	f7ff fa9f 	bl	8007778 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800823a:	e026      	b.n	800828a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008244:	4b14      	ldr	r3, [pc, #80]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	429a      	cmp	r2, r3
 8008252:	d209      	bcs.n	8008268 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008254:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f7ff faad 	bl	80077c0 <vListInsert>
}
 8008266:	e010      	b.n	800828a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008268:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <prvAddCurrentTaskToDelayedList+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f7ff faa3 	bl	80077c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	429a      	cmp	r2, r3
 8008282:	d202      	bcs.n	800828a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008284:	4a09      	ldr	r2, [pc, #36]	; (80082ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6013      	str	r3, [r2, #0]
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	24000b58 	.word	0x24000b58
 8008298:	24000a54 	.word	0x24000a54
 800829c:	24000b5c 	.word	0x24000b5c
 80082a0:	24000b40 	.word	0x24000b40
 80082a4:	24000b10 	.word	0x24000b10
 80082a8:	24000b0c 	.word	0x24000b0c
 80082ac:	24000b74 	.word	0x24000b74

080082b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3b04      	subs	r3, #4
 80082c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3b04      	subs	r3, #4
 80082ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f023 0201 	bic.w	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3b04      	subs	r3, #4
 80082de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082e0:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <pxPortInitialiseStack+0x64>)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3b14      	subs	r3, #20
 80082ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3b04      	subs	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f06f 0202 	mvn.w	r2, #2
 80082fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3b20      	subs	r3, #32
 8008304:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008306:	68fb      	ldr	r3, [r7, #12]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	08008319 	.word	0x08008319

08008318 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008322:	4b11      	ldr	r3, [pc, #68]	; (8008368 <prvTaskExitError+0x50>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d009      	beq.n	8008340 <prvTaskExitError+0x28>
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e7fe      	b.n	800833e <prvTaskExitError+0x26>
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008352:	bf00      	nop
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0fc      	beq.n	8008354 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	24000010 	.word	0x24000010
 800836c:	00000000 	.word	0x00000000

08008370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <pxCurrentTCBConst2>)
 8008372:	6819      	ldr	r1, [r3, #0]
 8008374:	6808      	ldr	r0, [r1, #0]
 8008376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	f380 8809 	msr	PSP, r0
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f04f 0000 	mov.w	r0, #0
 8008386:	f380 8811 	msr	BASEPRI, r0
 800838a:	4770      	bx	lr
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst2>:
 8008390:	24000a54 	.word	0x24000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008398:	4808      	ldr	r0, [pc, #32]	; (80083bc <prvPortStartFirstTask+0x24>)
 800839a:	6800      	ldr	r0, [r0, #0]
 800839c:	6800      	ldr	r0, [r0, #0]
 800839e:	f380 8808 	msr	MSP, r0
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8814 	msr	CONTROL, r0
 80083aa:	b662      	cpsie	i
 80083ac:	b661      	cpsie	f
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	df00      	svc	0
 80083b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ba:	bf00      	nop
 80083bc:	e000ed08 	.word	0xe000ed08

080083c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083c6:	4b44      	ldr	r3, [pc, #272]	; (80084d8 <xPortStartScheduler+0x118>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a44      	ldr	r2, [pc, #272]	; (80084dc <xPortStartScheduler+0x11c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d109      	bne.n	80083e4 <xPortStartScheduler+0x24>
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	e7fe      	b.n	80083e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083e4:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <xPortStartScheduler+0x118>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a3d      	ldr	r2, [pc, #244]	; (80084e0 <xPortStartScheduler+0x120>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d109      	bne.n	8008402 <xPortStartScheduler+0x42>
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e7fe      	b.n	8008400 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008402:	4b38      	ldr	r3, [pc, #224]	; (80084e4 <xPortStartScheduler+0x124>)
 8008404:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	22ff      	movs	r2, #255	; 0xff
 8008412:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008424:	b2da      	uxtb	r2, r3
 8008426:	4b30      	ldr	r3, [pc, #192]	; (80084e8 <xPortStartScheduler+0x128>)
 8008428:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800842a:	4b30      	ldr	r3, [pc, #192]	; (80084ec <xPortStartScheduler+0x12c>)
 800842c:	2207      	movs	r2, #7
 800842e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008430:	e009      	b.n	8008446 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008432:	4b2e      	ldr	r3, [pc, #184]	; (80084ec <xPortStartScheduler+0x12c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3b01      	subs	r3, #1
 8008438:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <xPortStartScheduler+0x12c>)
 800843a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	b2db      	uxtb	r3, r3
 8008444:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844e:	2b80      	cmp	r3, #128	; 0x80
 8008450:	d0ef      	beq.n	8008432 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <xPortStartScheduler+0x12c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f1c3 0307 	rsb	r3, r3, #7
 800845a:	2b04      	cmp	r3, #4
 800845c:	d009      	beq.n	8008472 <xPortStartScheduler+0xb2>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60bb      	str	r3, [r7, #8]
 8008470:	e7fe      	b.n	8008470 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008472:	4b1e      	ldr	r3, [pc, #120]	; (80084ec <xPortStartScheduler+0x12c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	4a1c      	ldr	r2, [pc, #112]	; (80084ec <xPortStartScheduler+0x12c>)
 800847a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800847c:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <xPortStartScheduler+0x12c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008484:	4a19      	ldr	r2, [pc, #100]	; (80084ec <xPortStartScheduler+0x12c>)
 8008486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008490:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <xPortStartScheduler+0x130>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a16      	ldr	r2, [pc, #88]	; (80084f0 <xPortStartScheduler+0x130>)
 8008496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800849a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800849c:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <xPortStartScheduler+0x130>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <xPortStartScheduler+0x130>)
 80084a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084a8:	f000 f8d6 	bl	8008658 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084ac:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <xPortStartScheduler+0x134>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084b2:	f000 f8f5 	bl	80086a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084b6:	4b10      	ldr	r3, [pc, #64]	; (80084f8 <xPortStartScheduler+0x138>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a0f      	ldr	r2, [pc, #60]	; (80084f8 <xPortStartScheduler+0x138>)
 80084bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084c2:	f7ff ff69 	bl	8008398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084c6:	f7ff fd61 	bl	8007f8c <vTaskSwitchContext>
	prvTaskExitError();
 80084ca:	f7ff ff25 	bl	8008318 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	e000ed00 	.word	0xe000ed00
 80084dc:	410fc271 	.word	0x410fc271
 80084e0:	410fc270 	.word	0x410fc270
 80084e4:	e000e400 	.word	0xe000e400
 80084e8:	24000b80 	.word	0x24000b80
 80084ec:	24000b84 	.word	0x24000b84
 80084f0:	e000ed20 	.word	0xe000ed20
 80084f4:	24000010 	.word	0x24000010
 80084f8:	e000ef34 	.word	0xe000ef34

080084fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <vPortEnterCritical+0x54>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a0d      	ldr	r2, [pc, #52]	; (8008550 <vPortEnterCritical+0x54>)
 800851c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800851e:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <vPortEnterCritical+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10e      	bne.n	8008544 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <vPortEnterCritical+0x58>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <vPortEnterCritical+0x48>
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	e7fe      	b.n	8008542 <vPortEnterCritical+0x46>
	}
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	24000010 	.word	0x24000010
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800855e:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <vPortExitCritical+0x4c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <vPortExitCritical+0x22>
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e7fe      	b.n	8008578 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <vPortExitCritical+0x4c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3b01      	subs	r3, #1
 8008580:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <vPortExitCritical+0x4c>)
 8008582:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008584:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <vPortExitCritical+0x4c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <vPortExitCritical+0x3e>
 800858c:	2300      	movs	r3, #0
 800858e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	24000010 	.word	0x24000010
	...

080085b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085b0:	f3ef 8009 	mrs	r0, PSP
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <pxCurrentTCBConst>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	f01e 0f10 	tst.w	lr, #16
 80085c0:	bf08      	it	eq
 80085c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	6010      	str	r0, [r2, #0]
 80085cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085d4:	f380 8811 	msr	BASEPRI, r0
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f7ff fcd4 	bl	8007f8c <vTaskSwitchContext>
 80085e4:	f04f 0000 	mov.w	r0, #0
 80085e8:	f380 8811 	msr	BASEPRI, r0
 80085ec:	bc09      	pop	{r0, r3}
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	6808      	ldr	r0, [r1, #0]
 80085f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f6:	f01e 0f10 	tst.w	lr, #16
 80085fa:	bf08      	it	eq
 80085fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008600:	f380 8809 	msr	PSP, r0
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w

08008610 <pxCurrentTCBConst>:
 8008610:	24000a54 	.word	0x24000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop

08008618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008630:	f7ff fbf4 	bl	8007e1c <xTaskIncrementTick>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <SysTick_Handler+0x3c>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800865c:	4b0b      	ldr	r3, [pc, #44]	; (800868c <vPortSetupTimerInterrupt+0x34>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <vPortSetupTimerInterrupt+0x38>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <vPortSetupTimerInterrupt+0x3c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <vPortSetupTimerInterrupt+0x40>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	099b      	lsrs	r3, r3, #6
 8008674:	4a09      	ldr	r2, [pc, #36]	; (800869c <vPortSetupTimerInterrupt+0x44>)
 8008676:	3b01      	subs	r3, #1
 8008678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800867a:	4b04      	ldr	r3, [pc, #16]	; (800868c <vPortSetupTimerInterrupt+0x34>)
 800867c:	2207      	movs	r2, #7
 800867e:	601a      	str	r2, [r3, #0]
}
 8008680:	bf00      	nop
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	e000e010 	.word	0xe000e010
 8008690:	e000e018 	.word	0xe000e018
 8008694:	24000000 	.word	0x24000000
 8008698:	10624dd3 	.word	0x10624dd3
 800869c:	e000e014 	.word	0xe000e014

080086a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086b0 <vPortEnableVFP+0x10>
 80086a4:	6801      	ldr	r1, [r0, #0]
 80086a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086aa:	6001      	str	r1, [r0, #0]
 80086ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086ae:	bf00      	nop
 80086b0:	e000ed88 	.word	0xe000ed88

080086b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086c0:	f7ff fb02 	bl	8007cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086c4:	4b57      	ldr	r3, [pc, #348]	; (8008824 <pvPortMalloc+0x170>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086cc:	f000 f90c 	bl	80088e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086d0:	4b55      	ldr	r3, [pc, #340]	; (8008828 <pvPortMalloc+0x174>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 808c 	bne.w	80087f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01c      	beq.n	800871e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80086e4:	2208      	movs	r2, #8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d013      	beq.n	800871e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f023 0307 	bic.w	r3, r3, #7
 80086fc:	3308      	adds	r3, #8
 80086fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b00      	cmp	r3, #0
 8008708:	d009      	beq.n	800871e <pvPortMalloc+0x6a>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e7fe      	b.n	800871c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d068      	beq.n	80087f6 <pvPortMalloc+0x142>
 8008724:	4b41      	ldr	r3, [pc, #260]	; (800882c <pvPortMalloc+0x178>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d863      	bhi.n	80087f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800872e:	4b40      	ldr	r3, [pc, #256]	; (8008830 <pvPortMalloc+0x17c>)
 8008730:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008732:	4b3f      	ldr	r3, [pc, #252]	; (8008830 <pvPortMalloc+0x17c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008738:	e004      	b.n	8008744 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d903      	bls.n	8008756 <pvPortMalloc+0xa2>
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1f1      	bne.n	800873a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008756:	4b33      	ldr	r3, [pc, #204]	; (8008824 <pvPortMalloc+0x170>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	429a      	cmp	r2, r3
 800875e:	d04a      	beq.n	80087f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2208      	movs	r2, #8
 8008766:	4413      	add	r3, r2
 8008768:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	1ad2      	subs	r2, r2, r3
 800877a:	2308      	movs	r3, #8
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	429a      	cmp	r2, r3
 8008780:	d91e      	bls.n	80087c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <pvPortMalloc+0xf4>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	e7fe      	b.n	80087a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087ba:	69b8      	ldr	r0, [r7, #24]
 80087bc:	f000 f8f6 	bl	80089ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087c0:	4b1a      	ldr	r3, [pc, #104]	; (800882c <pvPortMalloc+0x178>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	4a18      	ldr	r2, [pc, #96]	; (800882c <pvPortMalloc+0x178>)
 80087cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087ce:	4b17      	ldr	r3, [pc, #92]	; (800882c <pvPortMalloc+0x178>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b18      	ldr	r3, [pc, #96]	; (8008834 <pvPortMalloc+0x180>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d203      	bcs.n	80087e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087da:	4b14      	ldr	r3, [pc, #80]	; (800882c <pvPortMalloc+0x178>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a15      	ldr	r2, [pc, #84]	; (8008834 <pvPortMalloc+0x180>)
 80087e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4b10      	ldr	r3, [pc, #64]	; (8008828 <pvPortMalloc+0x174>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	431a      	orrs	r2, r3
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087f6:	f7ff fa75 	bl	8007ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	2b00      	cmp	r3, #0
 8008802:	d009      	beq.n	8008818 <pvPortMalloc+0x164>
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e7fe      	b.n	8008816 <pvPortMalloc+0x162>
	return pvReturn;
 8008818:	69fb      	ldr	r3, [r7, #28]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	24004790 	.word	0x24004790
 8008828:	2400479c 	.word	0x2400479c
 800882c:	24004794 	.word	0x24004794
 8008830:	24004788 	.word	0x24004788
 8008834:	24004798 	.word	0x24004798

08008838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d046      	beq.n	80088d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800884a:	2308      	movs	r3, #8
 800884c:	425b      	negs	r3, r3
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4413      	add	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	4b20      	ldr	r3, [pc, #128]	; (80088e0 <vPortFree+0xa8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4013      	ands	r3, r2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <vPortFree+0x42>
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e7fe      	b.n	8008878 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <vPortFree+0x5e>
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60bb      	str	r3, [r7, #8]
 8008894:	e7fe      	b.n	8008894 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <vPortFree+0xa8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d019      	beq.n	80088d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d115      	bne.n	80088d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortFree+0xa8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	43db      	mvns	r3, r3
 80088b6:	401a      	ands	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088bc:	f7ff fa04 	bl	8007cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <vPortFree+0xac>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4413      	add	r3, r2
 80088ca:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <vPortFree+0xac>)
 80088cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088ce:	6938      	ldr	r0, [r7, #16]
 80088d0:	f000 f86c 	bl	80089ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80088d4:	f7ff fa06 	bl	8007ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	2400479c 	.word	0x2400479c
 80088e4:	24004794 	.word	0x24004794

080088e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088f4:	4b27      	ldr	r3, [pc, #156]	; (8008994 <prvHeapInit+0xac>)
 80088f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00c      	beq.n	800891c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3307      	adds	r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <prvHeapInit+0xac>)
 8008918:	4413      	add	r3, r2
 800891a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008920:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <prvHeapInit+0xb0>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008926:	4b1c      	ldr	r3, [pc, #112]	; (8008998 <prvHeapInit+0xb0>)
 8008928:	2200      	movs	r2, #0
 800892a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008934:	2208      	movs	r2, #8
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0307 	bic.w	r3, r3, #7
 8008942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4a15      	ldr	r2, [pc, #84]	; (800899c <prvHeapInit+0xb4>)
 8008948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800894a:	4b14      	ldr	r3, [pc, #80]	; (800899c <prvHeapInit+0xb4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <prvHeapInit+0xb4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008968:	4b0c      	ldr	r3, [pc, #48]	; (800899c <prvHeapInit+0xb4>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <prvHeapInit+0xb8>)
 8008976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4a09      	ldr	r2, [pc, #36]	; (80089a4 <prvHeapInit+0xbc>)
 800897e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <prvHeapInit+0xc0>)
 8008982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008986:	601a      	str	r2, [r3, #0]
}
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	24000b88 	.word	0x24000b88
 8008998:	24004788 	.word	0x24004788
 800899c:	24004790 	.word	0x24004790
 80089a0:	24004798 	.word	0x24004798
 80089a4:	24004794 	.word	0x24004794
 80089a8:	2400479c 	.word	0x2400479c

080089ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089b4:	4b28      	ldr	r3, [pc, #160]	; (8008a58 <prvInsertBlockIntoFreeList+0xac>)
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e002      	b.n	80089c0 <prvInsertBlockIntoFreeList+0x14>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d8f7      	bhi.n	80089ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d108      	bne.n	80089ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	441a      	add	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d118      	bne.n	8008a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <prvInsertBlockIntoFreeList+0xb0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d00d      	beq.n	8008a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	441a      	add	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e008      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <prvInsertBlockIntoFreeList+0xb0>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e003      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d002      	beq.n	8008a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	24004788 	.word	0x24004788
 8008a5c:	24004790 	.word	0x24004790

08008a60 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b090      	sub	sp, #64	; 0x40
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8008a68:	4b28      	ldr	r3, [pc, #160]	; (8008b0c <aiInit+0xac>)
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	823b      	strh	r3, [r7, #16]
 8008a70:	2301      	movs	r3, #1
 8008a72:	827b      	strh	r3, [r7, #18]
 8008a74:	2301      	movs	r3, #1
 8008a76:	82bb      	strh	r3, [r7, #20]
 8008a78:	f642 2314 	movw	r3, #10772	; 0x2a14
 8008a7c:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8008a7e:	f000 fa2b 	bl	8008ed8 <ai_network_data_weights_get>
 8008a82:	4603      	mov	r3, r0
    const ai_network_params params = {
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	2300      	movs	r3, #0
 8008a88:	623b      	str	r3, [r7, #32]
 8008a8a:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <aiInit+0xb0>)
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8e:	2301      	movs	r3, #1
 8008a90:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a92:	2301      	movs	r3, #1
 8008a94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a96:	2301      	movs	r3, #1
 8008a98:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a9a:	23c0      	movs	r3, #192	; 0xc0
 8008a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	481a      	ldr	r0, [pc, #104]	; (8008b14 <aiInit+0xb4>)
 8008aaa:	f000 f9a3 	bl	8008df4 <ai_network_create>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 8008ab2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <aiInit+0x60>
	    return -1;
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	e020      	b.n	8008b02 <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 8008ac0:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <aiInit+0xb4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f107 020c 	add.w	r2, r7, #12
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f9b4 	bl	8008e38 <ai_network_init>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f083 0301 	eor.w	r3, r3, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d011      	beq.n	8008b00 <aiInit+0xa0>
        err = ai_network_get_error(network);
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <aiInit+0xb4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f97b 	bl	8008ddc <ai_network_get_error>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 8008aea:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <aiInit+0xb4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f996 	bl	8008e20 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8008af4:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <aiInit+0xb4>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
	    return -2;
 8008afa:	f06f 0301 	mvn.w	r3, #1
 8008afe:	e000      	b.n	8008b02 <aiInit+0xa2>
    }

    return 0;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3740      	adds	r7, #64	; 0x40
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40040440 	.word	0x40040440
 8008b10:	00040440 	.word	0x00040440
 8008b14:	240047a0 	.word	0x240047a0

08008b18 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d006      	beq.n	8008b36 <aiRun+0x1e>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <aiRun+0x1e>
 8008b2e:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <aiRun+0x74>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <aiRun+0x24>
        return -1;
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3a:	e022      	b.n	8008b82 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <aiRun+0x78>)
 8008b3e:	2201      	movs	r2, #1
 8008b40:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8008b42:	4a13      	ldr	r2, [pc, #76]	; (8008b90 <aiRun+0x78>)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8008b48:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <aiRun+0x7c>)
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8008b4e:	4a11      	ldr	r2, [pc, #68]	; (8008b94 <aiRun+0x7c>)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8008b54:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <aiRun+0x74>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <aiRun+0x7c>)
 8008b5a:	490d      	ldr	r1, [pc, #52]	; (8008b90 <aiRun+0x78>)
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f9aa 	bl	8008eb6 <ai_network_run>
 8008b62:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d00a      	beq.n	8008b80 <aiRun+0x68>
        err = ai_network_get_error(network);
 8008b6a:	4b08      	ldr	r3, [pc, #32]	; (8008b8c <aiRun+0x74>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f934 	bl	8008ddc <ai_network_get_error>
 8008b74:	4603      	mov	r3, r0
 8008b76:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008b7e:	e000      	b.n	8008b82 <aiRun+0x6a>
    }

    return 0;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	240047a0 	.word	0x240047a0
 8008b90:	24000014 	.word	0x24000014
 8008b94:	2400002c 	.word	0x2400002c

08008b98 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8008b9c:	4802      	ldr	r0, [pc, #8]	; (8008ba8 <MX_X_CUBE_AI_Init+0x10>)
 8008b9e:	f7ff ff5f 	bl	8008a60 <aiInit>
    /* USER CODE END 0 */
}
 8008ba2:	bf00      	nop
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	240047a4 	.word	0x240047a4

08008bac <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
//
//    AI_ALIGNED(4)
//    static ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

    /* Retrieve format/type of the first input tensor - index 0 */
    const ai_buffer_format fmt_ = AI_BUFFER_FORMAT(&ai_input[0]);
 8008bb2:	4b24      	ldr	r3, [pc, #144]	; (8008c44 <MX_X_CUBE_AI_Process+0x98>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008bba:	61fb      	str	r3, [r7, #28]
    const uint32_t type_ = AI_BUFFER_FMT_GET_TYPE(fmt_);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	145b      	asrs	r3, r3, #17
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	61bb      	str	r3, [r7, #24]

    /* Prepare parameters for float to Qmn conversion */
    const ai_i16 N_ = AI_BUFFER_FMT_GET_FBITS(fmt_);
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b40      	subs	r3, #64	; 0x40
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	82fb      	strh	r3, [r7, #22]
    const ai_float scale_ = (0x1U << N_);
 8008bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bea:	edc7 7a04 	vstr	s15, [r7, #16]
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	11db      	asrs	r3, r3, #7
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	b29a      	uxth	r2, r3
                       - AI_BUFFER_FMT_GET_SIGN(fmt_) - N_;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	15db      	asrs	r3, r3, #23
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	b29b      	uxth	r3, r3
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 8008c10:	81fb      	strh	r3, [r7, #14]
    const ai_float max_ = (ai_float)(0x1U << M_);
 8008c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c16:	2201      	movs	r2, #1
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	edc7 7a02 	vstr	s15, [r7, #8]
//			/* Convert float to Qmn format */
//			const ai_i32 tmp_ = AI_ROUND(val * scale_, ai_i32);
//			in_data[i] =  AI_CLAMP(tmp_, -128, 127, ai_i8);
//		}
//	}
    InputGet();
 8008c28:	f000 f992 	bl	8008f50 <InputGet>
	/* Perform the inference */
	res = aiRun(XBQ_HandRec.in_data, XBQ_HandRec.out_data);
 8008c2c:	4906      	ldr	r1, [pc, #24]	; (8008c48 <MX_X_CUBE_AI_Process+0x9c>)
 8008c2e:	4807      	ldr	r0, [pc, #28]	; (8008c4c <MX_X_CUBE_AI_Process+0xa0>)
 8008c30:	f7ff ff72 	bl	8008b18 <aiRun>
 8008c34:	6078      	str	r0, [r7, #4]
	GetResult();
 8008c36:	f000 f9cb 	bl	8008fd0 <GetResult>
	if (res) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
	}

        /* Post-Process - process the output buffer */
        // ...
    /* USER CODE END 1 */
}
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	24000014 	.word	0x24000014
 8008c48:	24005238 	.word	0x24005238
 8008c4c:	24005138 	.word	0x24005138

08008c50 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	3303      	adds	r3, #3
 8008c60:	f023 0303 	bic.w	r3, r3, #3
 8008c64:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8008c66:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <network_configure_activations+0x80>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8008c6c:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <network_configure_activations+0x80>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8008c72:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <network_configure_activations+0x84>)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8008c78:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <network_configure_activations+0x84>)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 8008c7e:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <network_configure_activations+0x88>)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 8008c84:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <network_configure_activations+0x88>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 128);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3380      	adds	r3, #128	; 0x80
 8008c8e:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <network_configure_activations+0x8c>)
 8008c90:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 128);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3380      	adds	r3, #128	; 0x80
 8008c96:	4a11      	ldr	r2, [pc, #68]	; (8008cdc <network_configure_activations+0x8c>)
 8008c98:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 0);
 8008c9a:	4a11      	ldr	r2, [pc, #68]	; (8008ce0 <network_configure_activations+0x90>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 0);
 8008ca0:	4a0f      	ldr	r2, [pc, #60]	; (8008ce0 <network_configure_activations+0x90>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 64);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3340      	adds	r3, #64	; 0x40
 8008caa:	4a0e      	ldr	r2, [pc, #56]	; (8008ce4 <network_configure_activations+0x94>)
 8008cac:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 64);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3340      	adds	r3, #64	; 0x40
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <network_configure_activations+0x94>)
 8008cb4:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <network_configure_activations+0x98>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <network_configure_activations+0x98>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8008cc2:	2301      	movs	r3, #1
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	24000104 	.word	0x24000104
 8008cd4:	24000114 	.word	0x24000114
 8008cd8:	24000124 	.word	0x24000124
 8008cdc:	24000134 	.word	0x24000134
 8008ce0:	24000144 	.word	0x24000144
 8008ce4:	24000154 	.word	0x24000154
 8008ce8:	24000164 	.word	0x24000164

08008cec <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008cfc:	4b31      	ldr	r3, [pc, #196]	; (8008dc4 <network_configure_weights+0xd8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d04:	4a2f      	ldr	r2, [pc, #188]	; (8008dc4 <network_configure_weights+0xd8>)
 8008d06:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 10752);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008d0e:	4a2d      	ldr	r2, [pc, #180]	; (8008dc4 <network_configure_weights+0xd8>)
 8008d10:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 10752);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008d18:	4a2a      	ldr	r2, [pc, #168]	; (8008dc4 <network_configure_weights+0xd8>)
 8008d1a:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d1c:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <network_configure_weights+0xdc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d24:	4a28      	ldr	r2, [pc, #160]	; (8008dc8 <network_configure_weights+0xdc>)
 8008d26:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 10432);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8008d2e:	4a26      	ldr	r2, [pc, #152]	; (8008dc8 <network_configure_weights+0xdc>)
 8008d30:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 10432);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <network_configure_weights+0xdc>)
 8008d3a:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008d3c:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <network_configure_weights+0xe0>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d44:	4a21      	ldr	r2, [pc, #132]	; (8008dcc <network_configure_weights+0xe0>)
 8008d46:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 10368);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8008d4e:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <network_configure_weights+0xe0>)
 8008d50:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 10368);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8008d58:	4a1c      	ldr	r2, [pc, #112]	; (8008dcc <network_configure_weights+0xe0>)
 8008d5a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d5c:	4b1c      	ldr	r3, [pc, #112]	; (8008dd0 <network_configure_weights+0xe4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d64:	4a1a      	ldr	r2, [pc, #104]	; (8008dd0 <network_configure_weights+0xe4>)
 8008d66:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 8320);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8008d6e:	4a18      	ldr	r2, [pc, #96]	; (8008dd0 <network_configure_weights+0xe4>)
 8008d70:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 8320);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8008d78:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <network_configure_weights+0xe4>)
 8008d7a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <network_configure_weights+0xe8>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <network_configure_weights+0xe8>)
 8008d86:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 8192);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d8e:	4a11      	ldr	r2, [pc, #68]	; (8008dd4 <network_configure_weights+0xe8>)
 8008d90:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 8192);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d98:	4a0e      	ldr	r2, [pc, #56]	; (8008dd4 <network_configure_weights+0xe8>)
 8008d9a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <network_configure_weights+0xec>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008da4:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <network_configure_weights+0xec>)
 8008da6:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8008da8:	4a0b      	ldr	r2, [pc, #44]	; (8008dd8 <network_configure_weights+0xec>)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8008dae:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <network_configure_weights+0xec>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8008db4:	2301      	movs	r3, #1
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	240000a4 	.word	0x240000a4
 8008dc8:	240000b4 	.word	0x240000b4
 8008dcc:	240000c4 	.word	0x240000c4
 8008dd0:	240000d4 	.word	0x240000d4
 8008dd4:	240000e4 	.word	0x240000e4
 8008dd8:	240000f4 	.word	0x240000f4

08008ddc <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f96b 	bl	80090c0 <ai_platform_network_get_error>
 8008dea:	4603      	mov	r3, r0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	2303      	movs	r3, #3
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2301      	movs	r3, #1
 8008e08:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <ai_network_create+0x28>)
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9e5 	bl	80091dc <ai_platform_network_create>
 8008e12:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	24000044 	.word	0x24000044

08008e20 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa5b 	bl	80092e4 <ai_platform_network_destroy>
 8008e2e:	4603      	mov	r3, r0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fad7 	bl	80093f8 <ai_platform_network_init>
 8008e4a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <ai_network_init+0x1e>
 8008e52:	2300      	movs	r3, #0
 8008e54:	e02b      	b.n	8008eae <ai_network_init+0x76>

  ai_bool ok = true;
 8008e56:	2301      	movs	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff ff44 	bl	8008cec <network_configure_weights>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bf14      	ite	ne
 8008e70:	2301      	movne	r3, #1
 8008e72:	2300      	moveq	r3, #0
 8008e74:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	3318      	adds	r3, #24
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fee7 	bl	8008c50 <network_configure_activations>
 8008e82:	4603      	mov	r3, r0
 8008e84:	461a      	mov	r2, r3
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf14      	ite	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	2300      	moveq	r3, #0
 8008e92:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fb97 	bl	80095c8 <ai_platform_network_post_init>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bf14      	ite	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	2300      	moveq	r3, #0
 8008eaa:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	68b9      	ldr	r1, [r7, #8]
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 fc2a 	bl	8009720 <ai_platform_network_process>
 8008ecc:	4603      	mov	r3, r0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
    0xa2, 0x68, 0x3e, 0x48, 0xe9, 0xd7, 0x3e, 0xf0, 0x97,
    0x0d, 0xbe, 0xf9, 0xe4, 0x4f, 0x3e, 0xe4, 0x4c, 0x1b,
    0x3e, 0x27, 0xb1, 0x26, 0xbe, 0x73, 0xda, 0xdc, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <ai_network_data_weights_get+0x10>)

}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	0800bd3c 	.word	0x0800bd3c

08008eec <readPixelsRaw>:
	}
}


void readPixelsRaw(int16_t* buf)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	read(AMG88xx_PIXEL_OFFSET, (uint8_t*)buf, 128);
 8008ef4:	2280      	movs	r2, #128	; 0x80
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	2080      	movs	r0, #128	; 0x80
 8008efa:	f000 f805 	bl	8008f08 <read>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <read>:
	return ret;
}


void read(uint8_t reg, uint8_t *buf, uint8_t num)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
 8008f14:	4613      	mov	r3, r2
 8008f16:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef err;
	
	err = HAL_I2C_Mem_Read(&hi2c1, (AMG88xx_ADDRESS<<1), reg, 1, buf, num, 0xffff);
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	b299      	uxth	r1, r3
 8008f1c:	79bb      	ldrb	r3, [r7, #6]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f24:	9202      	str	r2, [sp, #8]
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	460a      	mov	r2, r1
 8008f30:	21d0      	movs	r1, #208	; 0xd0
 8008f32:	4806      	ldr	r0, [pc, #24]	; (8008f4c <read+0x44>)
 8008f34:	f7f9 fd32 	bl	800299c <HAL_I2C_Mem_Read>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d000      	beq.n	8008f44 <read+0x3c>
		while(1);
 8008f42:	e7fe      	b.n	8008f42 <read+0x3a>
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	240049c4 	.word	0x240049c4

08008f50 <InputGet>:
#include "MyNetAPI.h"

_XBQ_HandRec XBQ_HandRec;

void InputGet()
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
	//鑾峰緱AMG883鍘熷鏁版嵁
	readPixelsRaw(pixelsRaw);
 8008f56:	481b      	ldr	r0, [pc, #108]	; (8008fc4 <InputGet+0x74>)
 8008f58:	f7ff ffc8 	bl	8008eec <readPixelsRaw>
	//鎵╁ぇ涓�鍊�
	for (u8 i = 0; i < 64; i++)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	71fb      	strb	r3, [r7, #7]
 8008f60:	e00d      	b.n	8008f7e <InputGet+0x2e>
	{
		pixelsRaw[i] = (pixelsRaw[i] - 80) << 2;
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <InputGet+0x74>)
 8008f66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008f6a:	3b50      	subs	r3, #80	; 0x50
 8008f6c:	009a      	lsls	r2, r3, #2
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	b211      	sxth	r1, r2
 8008f72:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <InputGet+0x74>)
 8008f74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u8 i = 0; i < 64; i++)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	71fb      	strb	r3, [r7, #7]
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	2b3f      	cmp	r3, #63	; 0x3f
 8008f82:	d9ee      	bls.n	8008f62 <InputGet+0x12>
	}
	//(浼�)褰掍竴鍖栵紝骞惰祴鍊肩粰input
	for (u8 i = 0; i < 64; i++)
 8008f84:	2300      	movs	r3, #0
 8008f86:	71bb      	strb	r3, [r7, #6]
 8008f88:	e014      	b.n	8008fb4 <InputGet+0x64>
	{
		XBQ_HandRec.in_data[i] = (ai_float) pixelsRaw[i] / 255;
 8008f8a:	79bb      	ldrb	r3, [r7, #6]
 8008f8c:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <InputGet+0x74>)
 8008f8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f9a:	79bb      	ldrb	r3, [r7, #6]
 8008f9c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8008fc8 <InputGet+0x78>
 8008fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fa4:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <InputGet+0x7c>)
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	edc3 7a00 	vstr	s15, [r3]
	for (u8 i = 0; i < 64; i++)
 8008fae:	79bb      	ldrb	r3, [r7, #6]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	71bb      	strb	r3, [r7, #6]
 8008fb4:	79bb      	ldrb	r3, [r7, #6]
 8008fb6:	2b3f      	cmp	r3, #63	; 0x3f
 8008fb8:	d9e7      	bls.n	8008f8a <InputGet+0x3a>
	}
}
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	24005090 	.word	0x24005090
 8008fc8:	437f0000 	.word	0x437f0000
 8008fcc:	24005138 	.word	0x24005138

08008fd0 <GetResult>:

void GetResult()
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
	u8 max_index = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
	float max_value = XBQ_HandRec.out_data[0];
 8008fda:	4b17      	ldr	r3, [pc, #92]	; (8009038 <GetResult+0x68>)
 8008fdc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008fe0:	60bb      	str	r3, [r7, #8]
	for(u8 i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	e019      	b.n	800901c <GetResult+0x4c>
	{
		if(XBQ_HandRec.out_data[i] > max_value)
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	4a13      	ldr	r2, [pc, #76]	; (8009038 <GetResult+0x68>)
 8008fec:	3340      	adds	r3, #64	; 0x40
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	edd3 7a00 	vldr	s15, [r3]
 8008ff6:	ed97 7a02 	vldr	s14, [r7, #8]
 8008ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	d508      	bpl.n	8009016 <GetResult+0x46>
		{
			max_index = i;
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	73fb      	strb	r3, [r7, #15]
			max_value = XBQ_HandRec.out_data[i];
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	4a0b      	ldr	r2, [pc, #44]	; (8009038 <GetResult+0x68>)
 800900c:	3340      	adds	r3, #64	; 0x40
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60bb      	str	r3, [r7, #8]
	for(u8 i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	3301      	adds	r3, #1
 800901a:	71fb      	strb	r3, [r7, #7]
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b04      	cmp	r3, #4
 8009020:	d9e2      	bls.n	8008fe8 <GetResult+0x18>
		}
	}
	XBQ_HandRec.result = max_index;
 8009022:	4a05      	ldr	r2, [pc, #20]	; (8009038 <GetResult+0x68>)
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	24005138 	.word	0x24005138

0800903c <HandRecResultPrint>:

void HandRecResultPrint()
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
	switch (XBQ_HandRec.result)
 8009040:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <HandRecResultPrint+0x64>)
 8009042:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009046:	2b04      	cmp	r3, #4
 8009048:	d820      	bhi.n	800908c <HandRecResultPrint+0x50>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <HandRecResultPrint+0x14>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	08009065 	.word	0x08009065
 8009054:	0800906d 	.word	0x0800906d
 8009058:	08009075 	.word	0x08009075
 800905c:	0800907d 	.word	0x0800907d
 8009060:	08009085 	.word	0x08009085
	{
	   case 0:
	   {
		   printf("nothing");
 8009064:	480f      	ldr	r0, [pc, #60]	; (80090a4 <HandRecResultPrint+0x68>)
 8009066:	f001 fe83 	bl	800ad70 <iprintf>
		   break;
 800906a:	e013      	b.n	8009094 <HandRecResultPrint+0x58>
	   }
	   case 1:
	   {
		   printf("up");
 800906c:	480e      	ldr	r0, [pc, #56]	; (80090a8 <HandRecResultPrint+0x6c>)
 800906e:	f001 fe7f 	bl	800ad70 <iprintf>
		   break;
 8009072:	e00f      	b.n	8009094 <HandRecResultPrint+0x58>
	   }
	   case 2:
	   {
		   printf("down");
 8009074:	480d      	ldr	r0, [pc, #52]	; (80090ac <HandRecResultPrint+0x70>)
 8009076:	f001 fe7b 	bl	800ad70 <iprintf>
		   break;
 800907a:	e00b      	b.n	8009094 <HandRecResultPrint+0x58>
	   }
	   case 3:
	   {
		   printf("left");
 800907c:	480c      	ldr	r0, [pc, #48]	; (80090b0 <HandRecResultPrint+0x74>)
 800907e:	f001 fe77 	bl	800ad70 <iprintf>
		   break;
 8009082:	e007      	b.n	8009094 <HandRecResultPrint+0x58>
	   }
	   case 4:
	   {
		   printf("right");
 8009084:	480b      	ldr	r0, [pc, #44]	; (80090b4 <HandRecResultPrint+0x78>)
 8009086:	f001 fe73 	bl	800ad70 <iprintf>
		   break;
 800908a:	e003      	b.n	8009094 <HandRecResultPrint+0x58>
	   }
	   default:
	   {
		   printf("error");
 800908c:	480a      	ldr	r0, [pc, #40]	; (80090b8 <HandRecResultPrint+0x7c>)
 800908e:	f001 fe6f 	bl	800ad70 <iprintf>
		   break;
 8009092:	bf00      	nop
	   }
	}
	printf("\r\n");
 8009094:	4809      	ldr	r0, [pc, #36]	; (80090bc <HandRecResultPrint+0x80>)
 8009096:	f001 fedf 	bl	800ae58 <puts>
	return;
 800909a:	bf00      	nop
}
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	24005138 	.word	0x24005138
 80090a4:	0800bcb0 	.word	0x0800bcb0
 80090a8:	0800bcb8 	.word	0x0800bcb8
 80090ac:	0800bcbc 	.word	0x0800bcbc
 80090b0:	0800bcc4 	.word	0x0800bcc4
 80090b4:	0800bccc 	.word	0x0800bccc
 80090b8:	0800bcd4 	.word	0x0800bcd4
 80090bc:	0800bcdc 	.word	0x0800bcdc

080090c0 <ai_platform_network_get_error>:
 80090c0:	b118      	cbz	r0, 80090ca <ai_platform_network_get_error+0xa>
 80090c2:	4b3c      	ldr	r3, [pc, #240]	; (80091b4 <ai_platform_network_get_error+0xf4>)
 80090c4:	6802      	ldr	r2, [r0, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d02a      	beq.n	8009120 <ai_platform_network_get_error+0x60>
 80090ca:	4a3b      	ldr	r2, [pc, #236]	; (80091b8 <ai_platform_network_get_error+0xf8>)
 80090cc:	493b      	ldr	r1, [pc, #236]	; (80091bc <ai_platform_network_get_error+0xfc>)
 80090ce:	6813      	ldr	r3, [r2, #0]
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80090dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090e0:	185a      	adds	r2, r3, r1
 80090e2:	2a01      	cmp	r2, #1
 80090e4:	d90d      	bls.n	8009102 <ai_platform_network_get_error+0x42>
 80090e6:	f240 4249 	movw	r2, #1097	; 0x449
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <ai_platform_network_get_error+0x42>
 80090ee:	4b34      	ldr	r3, [pc, #208]	; (80091c0 <ai_platform_network_get_error+0x100>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80090fa:	d02d      	beq.n	8009158 <ai_platform_network_get_error+0x98>
 80090fc:	f241 0010 	movw	r0, #4112	; 0x1010
 8009100:	4770      	bx	lr
 8009102:	4b30      	ldr	r3, [pc, #192]	; (80091c4 <ai_platform_network_get_error+0x104>)
 8009104:	2201      	movs	r2, #1
 8009106:	4619      	mov	r1, r3
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	680b      	ldr	r3, [r1, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1fc      	bne.n	800910a <ai_platform_network_get_error+0x4a>
 8009110:	4b2d      	ldr	r3, [pc, #180]	; (80091c8 <ai_platform_network_get_error+0x108>)
 8009112:	492e      	ldr	r1, [pc, #184]	; (80091cc <ai_platform_network_get_error+0x10c>)
 8009114:	4a2e      	ldr	r2, [pc, #184]	; (80091d0 <ai_platform_network_get_error+0x110>)
 8009116:	6019      	str	r1, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4293      	cmp	r3, r2
 800911c:	d0ee      	beq.n	80090fc <ai_platform_network_get_error+0x3c>
 800911e:	e7fe      	b.n	800911e <ai_platform_network_get_error+0x5e>
 8009120:	4a25      	ldr	r2, [pc, #148]	; (80091b8 <ai_platform_network_get_error+0xf8>)
 8009122:	4926      	ldr	r1, [pc, #152]	; (80091bc <ai_platform_network_get_error+0xfc>)
 8009124:	6813      	ldr	r3, [r2, #0]
 8009126:	f023 0301 	bic.w	r3, r3, #1
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009136:	189a      	adds	r2, r3, r2
 8009138:	2a01      	cmp	r2, #1
 800913a:	d92b      	bls.n	8009194 <ai_platform_network_get_error+0xd4>
 800913c:	f240 4249 	movw	r2, #1097	; 0x449
 8009140:	4293      	cmp	r3, r2
 8009142:	d027      	beq.n	8009194 <ai_platform_network_get_error+0xd4>
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <ai_platform_network_get_error+0x100>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800914c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009150:	d011      	beq.n	8009176 <ai_platform_network_get_error+0xb6>
 8009152:	3010      	adds	r0, #16
 8009154:	f000 bd96 	b.w	8009c84 <core_get_error>
 8009158:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <ai_platform_network_get_error+0x114>)
 800915a:	2201      	movs	r2, #1
 800915c:	4619      	mov	r1, r3
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	680b      	ldr	r3, [r1, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1fc      	bne.n	8009160 <ai_platform_network_get_error+0xa0>
 8009166:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <ai_platform_network_get_error+0x118>)
 8009168:	4918      	ldr	r1, [pc, #96]	; (80091cc <ai_platform_network_get_error+0x10c>)
 800916a:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <ai_platform_network_get_error+0x110>)
 800916c:	6019      	str	r1, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4293      	cmp	r3, r2
 8009172:	d0c3      	beq.n	80090fc <ai_platform_network_get_error+0x3c>
 8009174:	e7fe      	b.n	8009174 <ai_platform_network_get_error+0xb4>
 8009176:	4b17      	ldr	r3, [pc, #92]	; (80091d4 <ai_platform_network_get_error+0x114>)
 8009178:	2201      	movs	r2, #1
 800917a:	4619      	mov	r1, r3
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	680b      	ldr	r3, [r1, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1fc      	bne.n	800917e <ai_platform_network_get_error+0xbe>
 8009184:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <ai_platform_network_get_error+0x118>)
 8009186:	4911      	ldr	r1, [pc, #68]	; (80091cc <ai_platform_network_get_error+0x10c>)
 8009188:	4a11      	ldr	r2, [pc, #68]	; (80091d0 <ai_platform_network_get_error+0x110>)
 800918a:	6019      	str	r1, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4293      	cmp	r3, r2
 8009190:	d0df      	beq.n	8009152 <ai_platform_network_get_error+0x92>
 8009192:	e7fe      	b.n	8009192 <ai_platform_network_get_error+0xd2>
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <ai_platform_network_get_error+0x104>)
 8009196:	2201      	movs	r2, #1
 8009198:	4619      	mov	r1, r3
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1fc      	bne.n	800919c <ai_platform_network_get_error+0xdc>
 80091a2:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <ai_platform_network_get_error+0x108>)
 80091a4:	4909      	ldr	r1, [pc, #36]	; (80091cc <ai_platform_network_get_error+0x10c>)
 80091a6:	4a0a      	ldr	r2, [pc, #40]	; (80091d0 <ai_platform_network_get_error+0x110>)
 80091a8:	6019      	str	r1, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d0d0      	beq.n	8009152 <ai_platform_network_get_error+0x92>
 80091b0:	e7fe      	b.n	80091b0 <ai_platform_network_get_error+0xf0>
 80091b2:	bf00      	nop
 80091b4:	a1c00100 	.word	0xa1c00100
 80091b8:	e0002000 	.word	0xe0002000
 80091bc:	e0042000 	.word	0xe0042000
 80091c0:	5c001000 	.word	0x5c001000
 80091c4:	40023008 	.word	0x40023008
 80091c8:	40023000 	.word	0x40023000
 80091cc:	f407a5c2 	.word	0xf407a5c2
 80091d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80091d4:	58024c08 	.word	0x58024c08
 80091d8:	58024c00 	.word	0x58024c00

080091dc <ai_platform_network_create>:
 80091dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091de:	4d36      	ldr	r5, [pc, #216]	; (80092b8 <ai_platform_network_create+0xdc>)
 80091e0:	b083      	sub	sp, #12
 80091e2:	4e36      	ldr	r6, [pc, #216]	; (80092bc <ai_platform_network_create+0xe0>)
 80091e4:	6829      	ldr	r1, [r5, #0]
 80091e6:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80091ea:	f021 0101 	bic.w	r1, r1, #1
 80091ee:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80091f2:	6029      	str	r1, [r5, #0]
 80091f4:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 80091f8:	6831      	ldr	r1, [r6, #0]
 80091fa:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80091fe:	194d      	adds	r5, r1, r5
 8009200:	2d01      	cmp	r5, #1
 8009202:	d92f      	bls.n	8009264 <ai_platform_network_create+0x88>
 8009204:	f240 4549 	movw	r5, #1097	; 0x449
 8009208:	42a9      	cmp	r1, r5
 800920a:	d02b      	beq.n	8009264 <ai_platform_network_create+0x88>
 800920c:	492c      	ldr	r1, [pc, #176]	; (80092c0 <ai_platform_network_create+0xe4>)
 800920e:	6809      	ldr	r1, [r1, #0]
 8009210:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8009214:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8009218:	d015      	beq.n	8009246 <ai_platform_network_create+0x6a>
 800921a:	2800      	cmp	r0, #0
 800921c:	d031      	beq.n	8009282 <ai_platform_network_create+0xa6>
 800921e:	461e      	mov	r6, r3
 8009220:	4613      	mov	r3, r2
 8009222:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <ai_platform_network_create+0xe8>)
 8009224:	4605      	mov	r5, r0
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	f000 fd29 	bl	8009c80 <core_init>
 800922e:	2800      	cmp	r0, #0
 8009230:	d02b      	beq.n	800928a <ai_platform_network_create+0xae>
 8009232:	0223      	lsls	r3, r4, #8
 8009234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009238:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800923c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009240:	d92e      	bls.n	80092a0 <ai_platform_network_create+0xc4>
 8009242:	2301      	movs	r3, #1
 8009244:	e022      	b.n	800928c <ai_platform_network_create+0xb0>
 8009246:	4920      	ldr	r1, [pc, #128]	; (80092c8 <ai_platform_network_create+0xec>)
 8009248:	2501      	movs	r5, #1
 800924a:	460e      	mov	r6, r1
 800924c:	600d      	str	r5, [r1, #0]
 800924e:	6831      	ldr	r1, [r6, #0]
 8009250:	2900      	cmp	r1, #0
 8009252:	d1fc      	bne.n	800924e <ai_platform_network_create+0x72>
 8009254:	491d      	ldr	r1, [pc, #116]	; (80092cc <ai_platform_network_create+0xf0>)
 8009256:	4e1e      	ldr	r6, [pc, #120]	; (80092d0 <ai_platform_network_create+0xf4>)
 8009258:	4d1e      	ldr	r5, [pc, #120]	; (80092d4 <ai_platform_network_create+0xf8>)
 800925a:	600e      	str	r6, [r1, #0]
 800925c:	6809      	ldr	r1, [r1, #0]
 800925e:	42a9      	cmp	r1, r5
 8009260:	d0db      	beq.n	800921a <ai_platform_network_create+0x3e>
 8009262:	e7fe      	b.n	8009262 <ai_platform_network_create+0x86>
 8009264:	491c      	ldr	r1, [pc, #112]	; (80092d8 <ai_platform_network_create+0xfc>)
 8009266:	2501      	movs	r5, #1
 8009268:	460e      	mov	r6, r1
 800926a:	600d      	str	r5, [r1, #0]
 800926c:	6831      	ldr	r1, [r6, #0]
 800926e:	2900      	cmp	r1, #0
 8009270:	d1fc      	bne.n	800926c <ai_platform_network_create+0x90>
 8009272:	491a      	ldr	r1, [pc, #104]	; (80092dc <ai_platform_network_create+0x100>)
 8009274:	4e16      	ldr	r6, [pc, #88]	; (80092d0 <ai_platform_network_create+0xf4>)
 8009276:	4d17      	ldr	r5, [pc, #92]	; (80092d4 <ai_platform_network_create+0xf8>)
 8009278:	600e      	str	r6, [r1, #0]
 800927a:	6809      	ldr	r1, [r1, #0]
 800927c:	42a9      	cmp	r1, r5
 800927e:	d0cc      	beq.n	800921a <ai_platform_network_create+0x3e>
 8009280:	e7fe      	b.n	8009280 <ai_platform_network_create+0xa4>
 8009282:	f241 0010 	movw	r0, #4112	; 0x1010
 8009286:	b003      	add	sp, #12
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928a:	2330      	movs	r3, #48	; 0x30
 800928c:	2100      	movs	r1, #0
 800928e:	2210      	movs	r2, #16
 8009290:	6029      	str	r1, [r5, #0]
 8009292:	2000      	movs	r0, #0
 8009294:	f363 0007 	bfi	r0, r3, #0, #8
 8009298:	f362 201f 	bfi	r0, r2, #8, #24
 800929c:	b003      	add	sp, #12
 800929e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <ai_platform_network_create+0x104>)
 80092a2:	a802      	add	r0, sp, #8
 80092a4:	f840 3d04 	str.w	r3, [r0, #-4]!
 80092a8:	f001 fba4 	bl	800a9f4 <ai_check_custom_types>
 80092ac:	b110      	cbz	r0, 80092b4 <ai_platform_network_create+0xd8>
 80092ae:	2200      	movs	r2, #0
 80092b0:	4613      	mov	r3, r2
 80092b2:	e7ee      	b.n	8009292 <ai_platform_network_create+0xb6>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e7e9      	b.n	800928c <ai_platform_network_create+0xb0>
 80092b8:	e0002000 	.word	0xe0002000
 80092bc:	e0042000 	.word	0xe0042000
 80092c0:	5c001000 	.word	0x5c001000
 80092c4:	a1c00100 	.word	0xa1c00100
 80092c8:	58024c08 	.word	0x58024c08
 80092cc:	58024c00 	.word	0x58024c00
 80092d0:	f407a5c2 	.word	0xf407a5c2
 80092d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80092d8:	40023008 	.word	0x40023008
 80092dc:	40023000 	.word	0x40023000
 80092e0:	84048403 	.word	0x84048403

080092e4 <ai_platform_network_destroy>:
 80092e4:	b118      	cbz	r0, 80092ee <ai_platform_network_destroy+0xa>
 80092e6:	4b3a      	ldr	r3, [pc, #232]	; (80093d0 <ai_platform_network_destroy+0xec>)
 80092e8:	6802      	ldr	r2, [r0, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d037      	beq.n	800935e <ai_platform_network_destroy+0x7a>
 80092ee:	4a39      	ldr	r2, [pc, #228]	; (80093d4 <ai_platform_network_destroy+0xf0>)
 80092f0:	4939      	ldr	r1, [pc, #228]	; (80093d8 <ai_platform_network_destroy+0xf4>)
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009304:	185a      	adds	r2, r3, r1
 8009306:	2a01      	cmp	r2, #1
 8009308:	d90b      	bls.n	8009322 <ai_platform_network_destroy+0x3e>
 800930a:	f240 4249 	movw	r2, #1097	; 0x449
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <ai_platform_network_destroy+0x3e>
 8009312:	4b32      	ldr	r3, [pc, #200]	; (80093dc <ai_platform_network_destroy+0xf8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800931a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800931e:	d00f      	beq.n	8009340 <ai_platform_network_destroy+0x5c>
 8009320:	4770      	bx	lr
 8009322:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <ai_platform_network_destroy+0xfc>)
 8009324:	2201      	movs	r2, #1
 8009326:	4619      	mov	r1, r3
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	680b      	ldr	r3, [r1, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1fc      	bne.n	800932a <ai_platform_network_destroy+0x46>
 8009330:	4b2c      	ldr	r3, [pc, #176]	; (80093e4 <ai_platform_network_destroy+0x100>)
 8009332:	492d      	ldr	r1, [pc, #180]	; (80093e8 <ai_platform_network_destroy+0x104>)
 8009334:	4a2d      	ldr	r2, [pc, #180]	; (80093ec <ai_platform_network_destroy+0x108>)
 8009336:	6019      	str	r1, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4293      	cmp	r3, r2
 800933c:	d0f0      	beq.n	8009320 <ai_platform_network_destroy+0x3c>
 800933e:	e7fe      	b.n	800933e <ai_platform_network_destroy+0x5a>
 8009340:	4b2b      	ldr	r3, [pc, #172]	; (80093f0 <ai_platform_network_destroy+0x10c>)
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	680b      	ldr	r3, [r1, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1fc      	bne.n	8009348 <ai_platform_network_destroy+0x64>
 800934e:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <ai_platform_network_destroy+0x110>)
 8009350:	4925      	ldr	r1, [pc, #148]	; (80093e8 <ai_platform_network_destroy+0x104>)
 8009352:	4a26      	ldr	r2, [pc, #152]	; (80093ec <ai_platform_network_destroy+0x108>)
 8009354:	6019      	str	r1, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4293      	cmp	r3, r2
 800935a:	d0e1      	beq.n	8009320 <ai_platform_network_destroy+0x3c>
 800935c:	e7fe      	b.n	800935c <ai_platform_network_destroy+0x78>
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <ai_platform_network_destroy+0xf0>)
 8009360:	491d      	ldr	r1, [pc, #116]	; (80093d8 <ai_platform_network_destroy+0xf4>)
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800936e:	680b      	ldr	r3, [r1, #0]
 8009370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009374:	189a      	adds	r2, r3, r2
 8009376:	2a01      	cmp	r2, #1
 8009378:	d90c      	bls.n	8009394 <ai_platform_network_destroy+0xb0>
 800937a:	f240 4249 	movw	r2, #1097	; 0x449
 800937e:	4293      	cmp	r3, r2
 8009380:	d008      	beq.n	8009394 <ai_platform_network_destroy+0xb0>
 8009382:	4b16      	ldr	r3, [pc, #88]	; (80093dc <ai_platform_network_destroy+0xf8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800938a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800938e:	d010      	beq.n	80093b2 <ai_platform_network_destroy+0xce>
 8009390:	2000      	movs	r0, #0
 8009392:	4770      	bx	lr
 8009394:	4b12      	ldr	r3, [pc, #72]	; (80093e0 <ai_platform_network_destroy+0xfc>)
 8009396:	2201      	movs	r2, #1
 8009398:	4619      	mov	r1, r3
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1fc      	bne.n	800939c <ai_platform_network_destroy+0xb8>
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <ai_platform_network_destroy+0x100>)
 80093a4:	4910      	ldr	r1, [pc, #64]	; (80093e8 <ai_platform_network_destroy+0x104>)
 80093a6:	4a11      	ldr	r2, [pc, #68]	; (80093ec <ai_platform_network_destroy+0x108>)
 80093a8:	6019      	str	r1, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d0ef      	beq.n	8009390 <ai_platform_network_destroy+0xac>
 80093b0:	e7fe      	b.n	80093b0 <ai_platform_network_destroy+0xcc>
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <ai_platform_network_destroy+0x10c>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	4619      	mov	r1, r3
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	680b      	ldr	r3, [r1, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1fc      	bne.n	80093ba <ai_platform_network_destroy+0xd6>
 80093c0:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <ai_platform_network_destroy+0x110>)
 80093c2:	4909      	ldr	r1, [pc, #36]	; (80093e8 <ai_platform_network_destroy+0x104>)
 80093c4:	4a09      	ldr	r2, [pc, #36]	; (80093ec <ai_platform_network_destroy+0x108>)
 80093c6:	6019      	str	r1, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d0e0      	beq.n	8009390 <ai_platform_network_destroy+0xac>
 80093ce:	e7fe      	b.n	80093ce <ai_platform_network_destroy+0xea>
 80093d0:	a1c00100 	.word	0xa1c00100
 80093d4:	e0002000 	.word	0xe0002000
 80093d8:	e0042000 	.word	0xe0042000
 80093dc:	5c001000 	.word	0x5c001000
 80093e0:	40023008 	.word	0x40023008
 80093e4:	40023000 	.word	0x40023000
 80093e8:	f407a5c2 	.word	0xf407a5c2
 80093ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80093f0:	58024c08 	.word	0x58024c08
 80093f4:	58024c00 	.word	0x58024c00

080093f8 <ai_platform_network_init>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d05e      	beq.n	80094bc <ai_platform_network_init+0xc4>
 80093fe:	4b68      	ldr	r3, [pc, #416]	; (80095a0 <ai_platform_network_init+0x1a8>)
 8009400:	6802      	ldr	r2, [r0, #0]
 8009402:	429a      	cmp	r2, r3
 8009404:	d15a      	bne.n	80094bc <ai_platform_network_init+0xc4>
 8009406:	4a67      	ldr	r2, [pc, #412]	; (80095a4 <ai_platform_network_init+0x1ac>)
 8009408:	4c67      	ldr	r4, [pc, #412]	; (80095a8 <ai_platform_network_init+0x1b0>)
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	f023 0301 	bic.w	r3, r3, #1
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800941c:	189a      	adds	r2, r3, r2
 800941e:	2a01      	cmp	r2, #1
 8009420:	d93d      	bls.n	800949e <ai_platform_network_init+0xa6>
 8009422:	f240 4249 	movw	r2, #1097	; 0x449
 8009426:	4293      	cmp	r3, r2
 8009428:	d039      	beq.n	800949e <ai_platform_network_init+0xa6>
 800942a:	4b60      	ldr	r3, [pc, #384]	; (80095ac <ai_platform_network_init+0x1b4>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009432:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009436:	d06b      	beq.n	8009510 <ai_platform_network_init+0x118>
 8009438:	4605      	mov	r5, r0
 800943a:	460c      	mov	r4, r1
 800943c:	2900      	cmp	r1, #0
 800943e:	f000 80a8 	beq.w	8009592 <ai_platform_network_init+0x19a>
 8009442:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8009444:	690e      	ldr	r6, [r1, #16]
 8009446:	2f00      	cmp	r7, #0
 8009448:	f000 8092 	beq.w	8009570 <ai_platform_network_init+0x178>
 800944c:	2e00      	cmp	r6, #0
 800944e:	d07d      	beq.n	800954c <ai_platform_network_init+0x154>
 8009450:	f104 0718 	add.w	r7, r4, #24
 8009454:	f105 0c18 	add.w	ip, r5, #24
 8009458:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800945c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800945e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009466:	2403      	movs	r4, #3
 8009468:	e88c 0003 	stmia.w	ip, {r0, r1}
 800946c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800946e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009470:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009474:	e886 0003 	stmia.w	r6, {r0, r1}
 8009478:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800947a:	60ec      	str	r4, [r5, #12]
 800947c:	b16a      	cbz	r2, 800949a <ai_platform_network_init+0xa2>
 800947e:	68d3      	ldr	r3, [r2, #12]
 8009480:	6095      	str	r5, [r2, #8]
 8009482:	b153      	cbz	r3, 800949a <ai_platform_network_init+0xa2>
 8009484:	429a      	cmp	r2, r3
 8009486:	d104      	bne.n	8009492 <ai_platform_network_init+0x9a>
 8009488:	e007      	b.n	800949a <ai_platform_network_init+0xa2>
 800948a:	429a      	cmp	r2, r3
 800948c:	4613      	mov	r3, r2
 800948e:	d004      	beq.n	800949a <ai_platform_network_init+0xa2>
 8009490:	b11a      	cbz	r2, 800949a <ai_platform_network_init+0xa2>
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	609d      	str	r5, [r3, #8]
 8009496:	2a00      	cmp	r2, #0
 8009498:	d1f7      	bne.n	800948a <ai_platform_network_init+0x92>
 800949a:	4628      	mov	r0, r5
 800949c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800949e:	4b44      	ldr	r3, [pc, #272]	; (80095b0 <ai_platform_network_init+0x1b8>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	461c      	mov	r4, r3
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1fc      	bne.n	80094a6 <ai_platform_network_init+0xae>
 80094ac:	4b41      	ldr	r3, [pc, #260]	; (80095b4 <ai_platform_network_init+0x1bc>)
 80094ae:	4c42      	ldr	r4, [pc, #264]	; (80095b8 <ai_platform_network_init+0x1c0>)
 80094b0:	4a42      	ldr	r2, [pc, #264]	; (80095bc <ai_platform_network_init+0x1c4>)
 80094b2:	601c      	str	r4, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d0be      	beq.n	8009438 <ai_platform_network_init+0x40>
 80094ba:	e7fe      	b.n	80094ba <ai_platform_network_init+0xc2>
 80094bc:	4a39      	ldr	r2, [pc, #228]	; (80095a4 <ai_platform_network_init+0x1ac>)
 80094be:	493a      	ldr	r1, [pc, #232]	; (80095a8 <ai_platform_network_init+0x1b0>)
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	f023 0301 	bic.w	r3, r3, #1
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	680b      	ldr	r3, [r1, #0]
 80094ca:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80094ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094d2:	185a      	adds	r2, r3, r1
 80094d4:	2a01      	cmp	r2, #1
 80094d6:	d90c      	bls.n	80094f2 <ai_platform_network_init+0xfa>
 80094d8:	f240 4249 	movw	r2, #1097	; 0x449
 80094dc:	4293      	cmp	r3, r2
 80094de:	d008      	beq.n	80094f2 <ai_platform_network_init+0xfa>
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <ai_platform_network_init+0x1b4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80094ec:	d01f      	beq.n	800952e <ai_platform_network_init+0x136>
 80094ee:	2000      	movs	r0, #0
 80094f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f2:	4b2f      	ldr	r3, [pc, #188]	; (80095b0 <ai_platform_network_init+0x1b8>)
 80094f4:	2201      	movs	r2, #1
 80094f6:	4619      	mov	r1, r3
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	680b      	ldr	r3, [r1, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1fc      	bne.n	80094fa <ai_platform_network_init+0x102>
 8009500:	4b2c      	ldr	r3, [pc, #176]	; (80095b4 <ai_platform_network_init+0x1bc>)
 8009502:	492d      	ldr	r1, [pc, #180]	; (80095b8 <ai_platform_network_init+0x1c0>)
 8009504:	4a2d      	ldr	r2, [pc, #180]	; (80095bc <ai_platform_network_init+0x1c4>)
 8009506:	6019      	str	r1, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4293      	cmp	r3, r2
 800950c:	d0ef      	beq.n	80094ee <ai_platform_network_init+0xf6>
 800950e:	e7fe      	b.n	800950e <ai_platform_network_init+0x116>
 8009510:	4b2b      	ldr	r3, [pc, #172]	; (80095c0 <ai_platform_network_init+0x1c8>)
 8009512:	2201      	movs	r2, #1
 8009514:	461c      	mov	r4, r3
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1fc      	bne.n	8009518 <ai_platform_network_init+0x120>
 800951e:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <ai_platform_network_init+0x1cc>)
 8009520:	4c25      	ldr	r4, [pc, #148]	; (80095b8 <ai_platform_network_init+0x1c0>)
 8009522:	4a26      	ldr	r2, [pc, #152]	; (80095bc <ai_platform_network_init+0x1c4>)
 8009524:	601c      	str	r4, [r3, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4293      	cmp	r3, r2
 800952a:	d085      	beq.n	8009438 <ai_platform_network_init+0x40>
 800952c:	e7fe      	b.n	800952c <ai_platform_network_init+0x134>
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <ai_platform_network_init+0x1c8>)
 8009530:	2201      	movs	r2, #1
 8009532:	4619      	mov	r1, r3
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	680b      	ldr	r3, [r1, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1fc      	bne.n	8009536 <ai_platform_network_init+0x13e>
 800953c:	4b21      	ldr	r3, [pc, #132]	; (80095c4 <ai_platform_network_init+0x1cc>)
 800953e:	491e      	ldr	r1, [pc, #120]	; (80095b8 <ai_platform_network_init+0x1c0>)
 8009540:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <ai_platform_network_init+0x1c4>)
 8009542:	6019      	str	r1, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4293      	cmp	r3, r2
 8009548:	d0d1      	beq.n	80094ee <ai_platform_network_init+0xf6>
 800954a:	e7fe      	b.n	800954a <ai_platform_network_init+0x152>
 800954c:	8921      	ldrh	r1, [r4, #8]
 800954e:	88e2      	ldrh	r2, [r4, #6]
 8009550:	68e3      	ldr	r3, [r4, #12]
 8009552:	fb02 f201 	mul.w	r2, r2, r1
 8009556:	fb03 f302 	mul.w	r3, r3, r2
 800955a:	2b00      	cmp	r3, #0
 800955c:	f43f af78 	beq.w	8009450 <ai_platform_network_init+0x58>
 8009560:	f105 0010 	add.w	r0, r5, #16
 8009564:	2212      	movs	r2, #18
 8009566:	2110      	movs	r1, #16
 8009568:	f000 fb92 	bl	8009c90 <core_set_error>
 800956c:	4630      	mov	r0, r6
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009570:	8c09      	ldrh	r1, [r1, #32]
 8009572:	8be2      	ldrh	r2, [r4, #30]
 8009574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009576:	fb02 f201 	mul.w	r2, r2, r1
 800957a:	fb03 f302 	mul.w	r3, r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	f43f af64 	beq.w	800944c <ai_platform_network_init+0x54>
 8009584:	2213      	movs	r2, #19
 8009586:	2110      	movs	r1, #16
 8009588:	3010      	adds	r0, #16
 800958a:	f000 fb81 	bl	8009c90 <core_set_error>
 800958e:	4638      	mov	r0, r7
 8009590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009592:	2211      	movs	r2, #17
 8009594:	2110      	movs	r1, #16
 8009596:	3010      	adds	r0, #16
 8009598:	f000 fb7a 	bl	8009c90 <core_set_error>
 800959c:	4620      	mov	r0, r4
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a0:	a1c00100 	.word	0xa1c00100
 80095a4:	e0002000 	.word	0xe0002000
 80095a8:	e0042000 	.word	0xe0042000
 80095ac:	5c001000 	.word	0x5c001000
 80095b0:	40023008 	.word	0x40023008
 80095b4:	40023000 	.word	0x40023000
 80095b8:	f407a5c2 	.word	0xf407a5c2
 80095bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80095c0:	58024c08 	.word	0x58024c08
 80095c4:	58024c00 	.word	0x58024c00

080095c8 <ai_platform_network_post_init>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	b118      	cbz	r0, 80095d4 <ai_platform_network_post_init+0xc>
 80095cc:	4b4a      	ldr	r3, [pc, #296]	; (80096f8 <ai_platform_network_post_init+0x130>)
 80095ce:	6802      	ldr	r2, [r0, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d029      	beq.n	8009628 <ai_platform_network_post_init+0x60>
 80095d4:	4a49      	ldr	r2, [pc, #292]	; (80096fc <ai_platform_network_post_init+0x134>)
 80095d6:	494a      	ldr	r1, [pc, #296]	; (8009700 <ai_platform_network_post_init+0x138>)
 80095d8:	6813      	ldr	r3, [r2, #0]
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	680b      	ldr	r3, [r1, #0]
 80095e2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80095e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ea:	185a      	adds	r2, r3, r1
 80095ec:	2a01      	cmp	r2, #1
 80095ee:	d90c      	bls.n	800960a <ai_platform_network_post_init+0x42>
 80095f0:	f240 4249 	movw	r2, #1097	; 0x449
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d008      	beq.n	800960a <ai_platform_network_post_init+0x42>
 80095f8:	4b42      	ldr	r3, [pc, #264]	; (8009704 <ai_platform_network_post_init+0x13c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009600:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009604:	d044      	beq.n	8009690 <ai_platform_network_post_init+0xc8>
 8009606:	2000      	movs	r0, #0
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	4b3f      	ldr	r3, [pc, #252]	; (8009708 <ai_platform_network_post_init+0x140>)
 800960c:	2201      	movs	r2, #1
 800960e:	4619      	mov	r1, r3
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	680b      	ldr	r3, [r1, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1fc      	bne.n	8009612 <ai_platform_network_post_init+0x4a>
 8009618:	4b3c      	ldr	r3, [pc, #240]	; (800970c <ai_platform_network_post_init+0x144>)
 800961a:	493d      	ldr	r1, [pc, #244]	; (8009710 <ai_platform_network_post_init+0x148>)
 800961c:	4a3d      	ldr	r2, [pc, #244]	; (8009714 <ai_platform_network_post_init+0x14c>)
 800961e:	6019      	str	r1, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4293      	cmp	r3, r2
 8009624:	d0ef      	beq.n	8009606 <ai_platform_network_post_init+0x3e>
 8009626:	e7fe      	b.n	8009626 <ai_platform_network_post_init+0x5e>
 8009628:	4a34      	ldr	r2, [pc, #208]	; (80096fc <ai_platform_network_post_init+0x134>)
 800962a:	4935      	ldr	r1, [pc, #212]	; (8009700 <ai_platform_network_post_init+0x138>)
 800962c:	6813      	ldr	r3, [r2, #0]
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009638:	680b      	ldr	r3, [r1, #0]
 800963a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800963e:	189a      	adds	r2, r3, r2
 8009640:	2a01      	cmp	r2, #1
 8009642:	d94a      	bls.n	80096da <ai_platform_network_post_init+0x112>
 8009644:	f240 4249 	movw	r2, #1097	; 0x449
 8009648:	4293      	cmp	r3, r2
 800964a:	d046      	beq.n	80096da <ai_platform_network_post_init+0x112>
 800964c:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <ai_platform_network_post_init+0x13c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009654:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009658:	d030      	beq.n	80096bc <ai_platform_network_post_init+0xf4>
 800965a:	68c3      	ldr	r3, [r0, #12]
 800965c:	4604      	mov	r4, r0
 800965e:	f013 0502 	ands.w	r5, r3, #2
 8009662:	d024      	beq.n	80096ae <ai_platform_network_post_init+0xe6>
 8009664:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009666:	b18b      	cbz	r3, 800968c <ai_platform_network_post_init+0xc4>
 8009668:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800966a:	b90d      	cbnz	r5, 8009670 <ai_platform_network_post_init+0xa8>
 800966c:	e00e      	b.n	800968c <ai_platform_network_post_init+0xc4>
 800966e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009670:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009672:	4629      	mov	r1, r5
 8009674:	2000      	movs	r0, #0
 8009676:	4798      	blx	r3
 8009678:	68ea      	ldr	r2, [r5, #12]
 800967a:	1b53      	subs	r3, r2, r5
 800967c:	4615      	mov	r5, r2
 800967e:	bf18      	it	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2a00      	cmp	r2, #0
 8009684:	bf08      	it	eq
 8009686:	2300      	moveq	r3, #0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1f0      	bne.n	800966e <ai_platform_network_post_init+0xa6>
 800968c:	2001      	movs	r0, #1
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	4b21      	ldr	r3, [pc, #132]	; (8009718 <ai_platform_network_post_init+0x150>)
 8009692:	2201      	movs	r2, #1
 8009694:	4619      	mov	r1, r3
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	680b      	ldr	r3, [r1, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1fc      	bne.n	8009698 <ai_platform_network_post_init+0xd0>
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <ai_platform_network_post_init+0x154>)
 80096a0:	491b      	ldr	r1, [pc, #108]	; (8009710 <ai_platform_network_post_init+0x148>)
 80096a2:	4a1c      	ldr	r2, [pc, #112]	; (8009714 <ai_platform_network_post_init+0x14c>)
 80096a4:	6019      	str	r1, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d0ac      	beq.n	8009606 <ai_platform_network_post_init+0x3e>
 80096ac:	e7fe      	b.n	80096ac <ai_platform_network_post_init+0xe4>
 80096ae:	2210      	movs	r2, #16
 80096b0:	2111      	movs	r1, #17
 80096b2:	3010      	adds	r0, #16
 80096b4:	f000 faec 	bl	8009c90 <core_set_error>
 80096b8:	4628      	mov	r0, r5
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	4b16      	ldr	r3, [pc, #88]	; (8009718 <ai_platform_network_post_init+0x150>)
 80096be:	2201      	movs	r2, #1
 80096c0:	4619      	mov	r1, r3
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	680b      	ldr	r3, [r1, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1fc      	bne.n	80096c4 <ai_platform_network_post_init+0xfc>
 80096ca:	4b14      	ldr	r3, [pc, #80]	; (800971c <ai_platform_network_post_init+0x154>)
 80096cc:	4910      	ldr	r1, [pc, #64]	; (8009710 <ai_platform_network_post_init+0x148>)
 80096ce:	4a11      	ldr	r2, [pc, #68]	; (8009714 <ai_platform_network_post_init+0x14c>)
 80096d0:	6019      	str	r1, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d0c0      	beq.n	800965a <ai_platform_network_post_init+0x92>
 80096d8:	e7fe      	b.n	80096d8 <ai_platform_network_post_init+0x110>
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <ai_platform_network_post_init+0x140>)
 80096dc:	2201      	movs	r2, #1
 80096de:	4619      	mov	r1, r3
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	680b      	ldr	r3, [r1, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1fc      	bne.n	80096e2 <ai_platform_network_post_init+0x11a>
 80096e8:	4b08      	ldr	r3, [pc, #32]	; (800970c <ai_platform_network_post_init+0x144>)
 80096ea:	4909      	ldr	r1, [pc, #36]	; (8009710 <ai_platform_network_post_init+0x148>)
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <ai_platform_network_post_init+0x14c>)
 80096ee:	6019      	str	r1, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d0b1      	beq.n	800965a <ai_platform_network_post_init+0x92>
 80096f6:	e7fe      	b.n	80096f6 <ai_platform_network_post_init+0x12e>
 80096f8:	a1c00100 	.word	0xa1c00100
 80096fc:	e0002000 	.word	0xe0002000
 8009700:	e0042000 	.word	0xe0042000
 8009704:	5c001000 	.word	0x5c001000
 8009708:	40023008 	.word	0x40023008
 800970c:	40023000 	.word	0x40023000
 8009710:	f407a5c2 	.word	0xf407a5c2
 8009714:	b5e8b5cd 	.word	0xb5e8b5cd
 8009718:	58024c08 	.word	0x58024c08
 800971c:	58024c00 	.word	0x58024c00

08009720 <ai_platform_network_process>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	4692      	mov	sl, r2
 8009726:	b083      	sub	sp, #12
 8009728:	4604      	mov	r4, r0
 800972a:	b120      	cbz	r0, 8009736 <ai_platform_network_process+0x16>
 800972c:	4b86      	ldr	r3, [pc, #536]	; (8009948 <ai_platform_network_process+0x228>)
 800972e:	6802      	ldr	r2, [r0, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	bf18      	it	ne
 8009734:	2400      	movne	r4, #0
 8009736:	4a85      	ldr	r2, [pc, #532]	; (800994c <ai_platform_network_process+0x22c>)
 8009738:	4885      	ldr	r0, [pc, #532]	; (8009950 <ai_platform_network_process+0x230>)
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	f023 0301 	bic.w	r3, r3, #1
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	6803      	ldr	r3, [r0, #0]
 8009744:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8009748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800974c:	181a      	adds	r2, r3, r0
 800974e:	2a01      	cmp	r2, #1
 8009750:	f240 80c6 	bls.w	80098e0 <ai_platform_network_process+0x1c0>
 8009754:	f240 4249 	movw	r2, #1097	; 0x449
 8009758:	4293      	cmp	r3, r2
 800975a:	f000 80c1 	beq.w	80098e0 <ai_platform_network_process+0x1c0>
 800975e:	4b7d      	ldr	r3, [pc, #500]	; (8009954 <ai_platform_network_process+0x234>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009766:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800976a:	f000 80a9 	beq.w	80098c0 <ai_platform_network_process+0x1a0>
 800976e:	2c00      	cmp	r4, #0
 8009770:	f000 80db 	beq.w	800992a <ai_platform_network_process+0x20a>
 8009774:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009778:	68e0      	ldr	r0, [r4, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	f000 0003 	and.w	r0, r0, #3
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 80bd 	beq.w	8009900 <ai_platform_network_process+0x1e0>
 8009786:	2600      	movs	r6, #0
 8009788:	2803      	cmp	r0, #3
 800978a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800978c:	6166      	str	r6, [r4, #20]
 800978e:	f040 80c6 	bne.w	800991e <ai_platform_network_process+0x1fe>
 8009792:	2900      	cmp	r1, #0
 8009794:	f000 80b7 	beq.w	8009906 <ai_platform_network_process+0x1e6>
 8009798:	fab5 f085 	clz	r0, r5
 800979c:	0940      	lsrs	r0, r0, #5
 800979e:	2800      	cmp	r0, #0
 80097a0:	f040 80b1 	bne.w	8009906 <ai_platform_network_process+0x1e6>
 80097a4:	882e      	ldrh	r6, [r5, #0]
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	f000 80ad 	beq.w	8009906 <ai_platform_network_process+0x1e6>
 80097ac:	888f      	ldrh	r7, [r1, #4]
 80097ae:	686e      	ldr	r6, [r5, #4]
 80097b0:	9701      	str	r7, [sp, #4]
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	f000 825f 	beq.w	8009c76 <ai_platform_network_process+0x556>
 80097b8:	6836      	ldr	r6, [r6, #0]
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	f000 825b 	beq.w	8009c76 <ai_platform_network_process+0x556>
 80097c0:	68ab      	ldr	r3, [r5, #8]
 80097c2:	f8d3 9000 	ldr.w	r9, [r3]
 80097c6:	f1b9 0f00 	cmp.w	r9, #0
 80097ca:	f000 809c 	beq.w	8009906 <ai_platform_network_process+0x1e6>
 80097ce:	460f      	mov	r7, r1
 80097d0:	4680      	mov	r8, r0
 80097d2:	e05e      	b.n	8009892 <ai_platform_network_process+0x172>
 80097d4:	68f3      	ldr	r3, [r6, #12]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	455a      	cmp	r2, fp
 80097da:	d168      	bne.n	80098ae <ai_platform_network_process+0x18e>
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	4572      	cmp	r2, lr
 80097e0:	d165      	bne.n	80098ae <ai_platform_network_process+0x18e>
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	459c      	cmp	ip, r3
 80097e6:	d162      	bne.n	80098ae <ai_platform_network_process+0x18e>
 80097e8:	6800      	ldr	r0, [r0, #0]
 80097ea:	f001 f9b3 	bl	800ab54 <ai_array_get_byte_size>
 80097ee:	68f2      	ldr	r2, [r6, #12]
 80097f0:	6973      	ldr	r3, [r6, #20]
 80097f2:	68d2      	ldr	r2, [r2, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	fb03 f302 	mul.w	r3, r3, r2
 80097fa:	4298      	cmp	r0, r3
 80097fc:	d357      	bcc.n	80098ae <ai_platform_network_process+0x18e>
 80097fe:	69b3      	ldr	r3, [r6, #24]
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	f001 f95b 	bl	800aabc <ai_array_to_buffer_fmt>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	4043      	eors	r3, r0
 800980a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800980e:	f040 8229 	bne.w	8009c64 <ai_platform_network_process+0x544>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 821d 	beq.w	8009c54 <ai_platform_network_process+0x534>
 800981a:	88bb      	ldrh	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 808a 	beq.w	8009936 <ai_platform_network_process+0x216>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	68f1      	ldr	r1, [r6, #12]
 8009826:	429a      	cmp	r2, r3
 8009828:	68c9      	ldr	r1, [r1, #12]
 800982a:	bf38      	it	cc
 800982c:	461a      	movcc	r2, r3
 800982e:	9201      	str	r2, [sp, #4]
 8009830:	6972      	ldr	r2, [r6, #20]
 8009832:	68d3      	ldr	r3, [r2, #12]
 8009834:	fb03 f301 	mul.w	r3, r3, r1
 8009838:	f8c9 3008 	str.w	r3, [r9, #8]
 800983c:	88ba      	ldrh	r2, [r7, #4]
 800983e:	fb03 f302 	mul.w	r3, r3, r2
 8009842:	f8c9 300c 	str.w	r3, [r9, #12]
 8009846:	6939      	ldr	r1, [r7, #16]
 8009848:	f8c9 1004 	str.w	r1, [r9, #4]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4413      	add	r3, r2
 8009850:	f8c9 3000 	str.w	r3, [r9]
 8009854:	69b0      	ldr	r0, [r6, #24]
 8009856:	6803      	ldr	r3, [r0, #0]
 8009858:	009a      	lsls	r2, r3, #2
 800985a:	d408      	bmi.n	800986e <ai_platform_network_process+0x14e>
 800985c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	4419      	add	r1, r3
 8009864:	6081      	str	r1, [r0, #8]
 8009866:	69b3      	ldr	r3, [r6, #24]
 8009868:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	f108 0801 	add.w	r8, r8, #1
 8009872:	882b      	ldrh	r3, [r5, #0]
 8009874:	4598      	cmp	r8, r3
 8009876:	d27b      	bcs.n	8009970 <ai_platform_network_process+0x250>
 8009878:	686b      	ldr	r3, [r5, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d078      	beq.n	8009970 <ai_platform_network_process+0x250>
 800987e:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8009882:	2e00      	cmp	r6, #0
 8009884:	d074      	beq.n	8009970 <ai_platform_network_process+0x250>
 8009886:	68ab      	ldr	r3, [r5, #8]
 8009888:	3718      	adds	r7, #24
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8009890:	d039      	beq.n	8009906 <ai_platform_network_process+0x1e6>
 8009892:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8009896:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800989a:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800989e:	fb0b f30e 	mul.w	r3, fp, lr
 80098a2:	69b0      	ldr	r0, [r6, #24]
 80098a4:	fb0c f303 	mul.w	r3, ip, r3
 80098a8:	6841      	ldr	r1, [r0, #4]
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d292      	bcs.n	80097d4 <ai_platform_network_process+0xb4>
 80098ae:	f104 0010 	add.w	r0, r4, #16
 80098b2:	2218      	movs	r2, #24
 80098b4:	2112      	movs	r1, #18
 80098b6:	f04f 0b00 	mov.w	fp, #0
 80098ba:	f000 f9e9 	bl	8009c90 <core_set_error>
 80098be:	e02a      	b.n	8009916 <ai_platform_network_process+0x1f6>
 80098c0:	4b25      	ldr	r3, [pc, #148]	; (8009958 <ai_platform_network_process+0x238>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	4618      	mov	r0, r3
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	6803      	ldr	r3, [r0, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1fc      	bne.n	80098c8 <ai_platform_network_process+0x1a8>
 80098ce:	4b23      	ldr	r3, [pc, #140]	; (800995c <ai_platform_network_process+0x23c>)
 80098d0:	4823      	ldr	r0, [pc, #140]	; (8009960 <ai_platform_network_process+0x240>)
 80098d2:	4a24      	ldr	r2, [pc, #144]	; (8009964 <ai_platform_network_process+0x244>)
 80098d4:	6018      	str	r0, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4293      	cmp	r3, r2
 80098da:	f43f af48 	beq.w	800976e <ai_platform_network_process+0x4e>
 80098de:	e7fe      	b.n	80098de <ai_platform_network_process+0x1be>
 80098e0:	4b21      	ldr	r3, [pc, #132]	; (8009968 <ai_platform_network_process+0x248>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	4618      	mov	r0, r3
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	6803      	ldr	r3, [r0, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1fc      	bne.n	80098e8 <ai_platform_network_process+0x1c8>
 80098ee:	4b1f      	ldr	r3, [pc, #124]	; (800996c <ai_platform_network_process+0x24c>)
 80098f0:	481b      	ldr	r0, [pc, #108]	; (8009960 <ai_platform_network_process+0x240>)
 80098f2:	4a1c      	ldr	r2, [pc, #112]	; (8009964 <ai_platform_network_process+0x244>)
 80098f4:	6018      	str	r0, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4293      	cmp	r3, r2
 80098fa:	f43f af38 	beq.w	800976e <ai_platform_network_process+0x4e>
 80098fe:	e7fe      	b.n	80098fe <ai_platform_network_process+0x1de>
 8009900:	2803      	cmp	r0, #3
 8009902:	6163      	str	r3, [r4, #20]
 8009904:	d10b      	bne.n	800991e <ai_platform_network_process+0x1fe>
 8009906:	f04f 0b00 	mov.w	fp, #0
 800990a:	f104 0010 	add.w	r0, r4, #16
 800990e:	2217      	movs	r2, #23
 8009910:	2112      	movs	r1, #18
 8009912:	f000 f9bd 	bl	8009c90 <core_set_error>
 8009916:	4658      	mov	r0, fp
 8009918:	b003      	add	sp, #12
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	f104 0010 	add.w	r0, r4, #16
 8009922:	2230      	movs	r2, #48	; 0x30
 8009924:	2111      	movs	r1, #17
 8009926:	f000 f9b3 	bl	8009c90 <core_set_error>
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	4658      	mov	r0, fp
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	f104 0010 	add.w	r0, r4, #16
 800993a:	2221      	movs	r2, #33	; 0x21
 800993c:	2112      	movs	r1, #18
 800993e:	469b      	mov	fp, r3
 8009940:	f000 f9a6 	bl	8009c90 <core_set_error>
 8009944:	e7e7      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009946:	bf00      	nop
 8009948:	a1c00100 	.word	0xa1c00100
 800994c:	e0002000 	.word	0xe0002000
 8009950:	e0042000 	.word	0xe0042000
 8009954:	5c001000 	.word	0x5c001000
 8009958:	58024c08 	.word	0x58024c08
 800995c:	58024c00 	.word	0x58024c00
 8009960:	f407a5c2 	.word	0xf407a5c2
 8009964:	b5e8b5cd 	.word	0xb5e8b5cd
 8009968:	40023008 	.word	0x40023008
 800996c:	40023000 	.word	0x40023000
 8009970:	f1ba 0f00 	cmp.w	sl, #0
 8009974:	f000 808c 	beq.w	8009a90 <ai_platform_network_process+0x370>
 8009978:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800997c:	2b01      	cmp	r3, #1
 800997e:	f240 813b 	bls.w	8009bf8 <ai_platform_network_process+0x4d8>
 8009982:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009984:	f115 0f0c 	cmn.w	r5, #12
 8009988:	f000 8136 	beq.w	8009bf8 <ai_platform_network_process+0x4d8>
 800998c:	89ab      	ldrh	r3, [r5, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 8132 	beq.w	8009bf8 <ai_platform_network_process+0x4d8>
 8009994:	4656      	mov	r6, sl
 8009996:	f04f 0900 	mov.w	r9, #0
 800999a:	9400      	str	r4, [sp, #0]
 800999c:	4599      	cmp	r9, r3
 800999e:	d274      	bcs.n	8009a8a <ai_platform_network_process+0x36a>
 80099a0:	692b      	ldr	r3, [r5, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d071      	beq.n	8009a8a <ai_platform_network_process+0x36a>
 80099a6:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	d06d      	beq.n	8009a8a <ai_platform_network_process+0x36a>
 80099ae:	696b      	ldr	r3, [r5, #20]
 80099b0:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80099b4:	f8d3 8000 	ldr.w	r8, [r3]
 80099b8:	eb18 0a04 	adds.w	sl, r8, r4
 80099bc:	f000 8125 	beq.w	8009c0a <ai_platform_network_process+0x4ea>
 80099c0:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80099c4:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80099c8:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80099cc:	fb0b f30e 	mul.w	r3, fp, lr
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	fb0c f303 	mul.w	r3, ip, r3
 80099d6:	6841      	ldr	r1, [r0, #4]
 80099d8:	4299      	cmp	r1, r3
 80099da:	f0c0 810c 	bcc.w	8009bf6 <ai_platform_network_process+0x4d6>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	455a      	cmp	r2, fp
 80099e4:	f040 8107 	bne.w	8009bf6 <ai_platform_network_process+0x4d6>
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	4572      	cmp	r2, lr
 80099ec:	f040 8103 	bne.w	8009bf6 <ai_platform_network_process+0x4d6>
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	459c      	cmp	ip, r3
 80099f4:	f040 80ff 	bne.w	8009bf6 <ai_platform_network_process+0x4d6>
 80099f8:	6800      	ldr	r0, [r0, #0]
 80099fa:	f001 f8ab 	bl	800ab54 <ai_array_get_byte_size>
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	68d2      	ldr	r2, [r2, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	fb03 f302 	mul.w	r3, r3, r2
 8009a0a:	4298      	cmp	r0, r3
 8009a0c:	f0c0 80f3 	bcc.w	8009bf6 <ai_platform_network_process+0x4d6>
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	f001 f852 	bl	800aabc <ai_array_to_buffer_fmt>
 8009a18:	6833      	ldr	r3, [r6, #0]
 8009a1a:	4043      	eors	r3, r0
 8009a1c:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009a20:	f040 810e 	bne.w	8009c40 <ai_platform_network_process+0x520>
 8009a24:	6933      	ldr	r3, [r6, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 8101 	beq.w	8009c2e <ai_platform_network_process+0x50e>
 8009a2c:	88b3      	ldrh	r3, [r6, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 80f4 	beq.w	8009c1c <ai_platform_network_process+0x4fc>
 8009a34:	9a01      	ldr	r2, [sp, #4]
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	68c9      	ldr	r1, [r1, #12]
 8009a3c:	bf38      	it	cc
 8009a3e:	461a      	movcc	r2, r3
 8009a40:	9201      	str	r2, [sp, #4]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	68d3      	ldr	r3, [r2, #12]
 8009a46:	fb03 f301 	mul.w	r3, r3, r1
 8009a4a:	f8ca 3008 	str.w	r3, [sl, #8]
 8009a4e:	88b2      	ldrh	r2, [r6, #4]
 8009a50:	fb03 f302 	mul.w	r3, r3, r2
 8009a54:	f8ca 300c 	str.w	r3, [sl, #12]
 8009a58:	6931      	ldr	r1, [r6, #16]
 8009a5a:	f8ca 1004 	str.w	r1, [sl, #4]
 8009a5e:	6932      	ldr	r2, [r6, #16]
 8009a60:	4413      	add	r3, r2
 8009a62:	f848 3004 	str.w	r3, [r8, r4]
 8009a66:	69b8      	ldr	r0, [r7, #24]
 8009a68:	6803      	ldr	r3, [r0, #0]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	d408      	bmi.n	8009a80 <ai_platform_network_process+0x360>
 8009a6e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	4419      	add	r1, r3
 8009a76:	6081      	str	r1, [r0, #8]
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009a7e:	60da      	str	r2, [r3, #12]
 8009a80:	f109 0901 	add.w	r9, r9, #1
 8009a84:	3618      	adds	r6, #24
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	e788      	b.n	800999c <ai_platform_network_process+0x27c>
 8009a8a:	e9dd 4300 	ldrd	r4, r3, [sp]
 8009a8e:	82a3      	strh	r3, [r4, #20]
 8009a90:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	f000 80a9 	beq.w	8009bec <ai_platform_network_process+0x4cc>
 8009a9a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a9c:	2a01      	cmp	r2, #1
 8009a9e:	f240 80a8 	bls.w	8009bf2 <ai_platform_network_process+0x4d2>
 8009aa2:	f105 060c 	add.w	r6, r5, #12
 8009aa6:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8009aaa:	8aa3      	ldrh	r3, [r4, #20]
 8009aac:	455b      	cmp	r3, fp
 8009aae:	f67f af32 	bls.w	8009916 <ai_platform_network_process+0x1f6>
 8009ab2:	9400      	str	r4, [sp, #0]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	d037      	beq.n	8009b28 <ai_platform_network_process+0x408>
 8009ab8:	882b      	ldrh	r3, [r5, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d034      	beq.n	8009b28 <ai_platform_network_process+0x408>
 8009abe:	686b      	ldr	r3, [r5, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d031      	beq.n	8009b28 <ai_platform_network_process+0x408>
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d02e      	beq.n	8009b28 <ai_platform_network_process+0x408>
 8009aca:	f04f 0800 	mov.w	r8, #0
 8009ace:	e01a      	b.n	8009b06 <ai_platform_network_process+0x3e6>
 8009ad0:	68d4      	ldr	r4, [r2, #12]
 8009ad2:	1b00      	subs	r0, r0, r4
 8009ad4:	4401      	add	r1, r0
 8009ad6:	6091      	str	r1, [r2, #8]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	60da      	str	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f108 0801 	add.w	r8, r8, #1
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009aea:	440b      	add	r3, r1
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d301      	bcc.n	8009af4 <ai_platform_network_process+0x3d4>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	882b      	ldrh	r3, [r5, #0]
 8009af8:	4598      	cmp	r8, r3
 8009afa:	d215      	bcs.n	8009b28 <ai_platform_network_process+0x408>
 8009afc:	686b      	ldr	r3, [r5, #4]
 8009afe:	b19b      	cbz	r3, 8009b28 <ai_platform_network_process+0x408>
 8009b00:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009b04:	b183      	cbz	r3, 8009b28 <ai_platform_network_process+0x408>
 8009b06:	68a9      	ldr	r1, [r5, #8]
 8009b08:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	f8d1 a000 	ldr.w	sl, [r1]
 8009b12:	6814      	ldr	r4, [r2, #0]
 8009b14:	eb0a 0709 	add.w	r7, sl, r9
 8009b18:	6890      	ldr	r0, [r2, #8]
 8009b1a:	00a4      	lsls	r4, r4, #2
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	d5d7      	bpl.n	8009ad0 <ai_platform_network_process+0x3b0>
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	f001 f869 	bl	800abf8 <memcpy>
 8009b26:	e7da      	b.n	8009ade <ai_platform_network_process+0x3be>
 8009b28:	9800      	ldr	r0, [sp, #0]
 8009b2a:	f000 ff8d 	bl	800aa48 <ai_layers_forward_all>
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d04a      	beq.n	8009bc8 <ai_platform_network_process+0x4a8>
 8009b32:	8833      	ldrh	r3, [r6, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d047      	beq.n	8009bc8 <ai_platform_network_process+0x4a8>
 8009b38:	6873      	ldr	r3, [r6, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d044      	beq.n	8009bc8 <ai_platform_network_process+0x4a8>
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d041      	beq.n	8009bc8 <ai_platform_network_process+0x4a8>
 8009b44:	f04f 0800 	mov.w	r8, #0
 8009b48:	e019      	b.n	8009b7e <ai_platform_network_process+0x45e>
 8009b4a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	d301      	bcc.n	8009b56 <ai_platform_network_process+0x436>
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	1a51      	subs	r1, r2, r1
 8009b56:	6079      	str	r1, [r7, #4]
 8009b58:	f108 0801 	add.w	r8, r8, #1
 8009b5c:	6998      	ldr	r0, [r3, #24]
 8009b5e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8009b62:	1b12      	subs	r2, r2, r4
 8009b64:	440a      	add	r2, r1
 8009b66:	6082      	str	r2, [r0, #8]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	8833      	ldrh	r3, [r6, #0]
 8009b70:	4598      	cmp	r8, r3
 8009b72:	d229      	bcs.n	8009bc8 <ai_platform_network_process+0x4a8>
 8009b74:	6873      	ldr	r3, [r6, #4]
 8009b76:	b33b      	cbz	r3, 8009bc8 <ai_platform_network_process+0x4a8>
 8009b78:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009b7c:	b323      	cbz	r3, 8009bc8 <ai_platform_network_process+0x4a8>
 8009b7e:	68b2      	ldr	r2, [r6, #8]
 8009b80:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009b84:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8009b88:	f8d2 a000 	ldr.w	sl, [r2]
 8009b8c:	f8de 1000 	ldr.w	r1, [lr]
 8009b90:	eb0a 0709 	add.w	r7, sl, r9
 8009b94:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8009b98:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8009b9c:	eb00 0102 	add.w	r1, r0, r2
 8009ba0:	d0d3      	beq.n	8009b4a <ai_platform_network_process+0x42a>
 8009ba2:	f8de 1008 	ldr.w	r1, [lr, #8]
 8009ba6:	f001 f827 	bl	800abf8 <memcpy>
 8009baa:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009bae:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8009bb2:	440b      	add	r3, r1
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d301      	bcc.n	8009bbc <ai_platform_network_process+0x49c>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	607b      	str	r3, [r7, #4]
 8009bbe:	f108 0801 	add.w	r8, r8, #1
 8009bc2:	8833      	ldrh	r3, [r6, #0]
 8009bc4:	4598      	cmp	r8, r3
 8009bc6:	d3d5      	bcc.n	8009b74 <ai_platform_network_process+0x454>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	8a9b      	ldrh	r3, [r3, #20]
 8009bd2:	f10b 0b01 	add.w	fp, fp, #1
 8009bd6:	fa1f fb8b 	uxth.w	fp, fp
 8009bda:	455b      	cmp	r3, fp
 8009bdc:	f8a2 b016 	strh.w	fp, [r2, #22]
 8009be0:	f63f af68 	bhi.w	8009ab4 <ai_platform_network_process+0x394>
 8009be4:	4658      	mov	r0, fp
 8009be6:	b003      	add	sp, #12
 8009be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	4615      	mov	r5, r2
 8009bee:	4616      	mov	r6, r2
 8009bf0:	e759      	b.n	8009aa6 <ai_platform_network_process+0x386>
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	e757      	b.n	8009aa6 <ai_platform_network_process+0x386>
 8009bf6:	9c00      	ldr	r4, [sp, #0]
 8009bf8:	f104 0010 	add.w	r0, r4, #16
 8009bfc:	2218      	movs	r2, #24
 8009bfe:	2113      	movs	r1, #19
 8009c00:	f04f 0b00 	mov.w	fp, #0
 8009c04:	f000 f844 	bl	8009c90 <core_set_error>
 8009c08:	e685      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c0a:	9c00      	ldr	r4, [sp, #0]
 8009c0c:	2217      	movs	r2, #23
 8009c0e:	2113      	movs	r1, #19
 8009c10:	46d3      	mov	fp, sl
 8009c12:	f104 0010 	add.w	r0, r4, #16
 8009c16:	f000 f83b 	bl	8009c90 <core_set_error>
 8009c1a:	e67c      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c1c:	9c00      	ldr	r4, [sp, #0]
 8009c1e:	2221      	movs	r2, #33	; 0x21
 8009c20:	2113      	movs	r1, #19
 8009c22:	469b      	mov	fp, r3
 8009c24:	f104 0010 	add.w	r0, r4, #16
 8009c28:	f000 f832 	bl	8009c90 <core_set_error>
 8009c2c:	e673      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c2e:	9c00      	ldr	r4, [sp, #0]
 8009c30:	2217      	movs	r2, #23
 8009c32:	2113      	movs	r1, #19
 8009c34:	469b      	mov	fp, r3
 8009c36:	f104 0010 	add.w	r0, r4, #16
 8009c3a:	f000 f829 	bl	8009c90 <core_set_error>
 8009c3e:	e66a      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c40:	9c00      	ldr	r4, [sp, #0]
 8009c42:	2219      	movs	r2, #25
 8009c44:	2113      	movs	r1, #19
 8009c46:	f04f 0b00 	mov.w	fp, #0
 8009c4a:	f104 0010 	add.w	r0, r4, #16
 8009c4e:	f000 f81f 	bl	8009c90 <core_set_error>
 8009c52:	e660      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c54:	f104 0010 	add.w	r0, r4, #16
 8009c58:	2217      	movs	r2, #23
 8009c5a:	2112      	movs	r1, #18
 8009c5c:	469b      	mov	fp, r3
 8009c5e:	f000 f817 	bl	8009c90 <core_set_error>
 8009c62:	e658      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c64:	f104 0010 	add.w	r0, r4, #16
 8009c68:	2219      	movs	r2, #25
 8009c6a:	2112      	movs	r1, #18
 8009c6c:	f04f 0b00 	mov.w	fp, #0
 8009c70:	f000 f80e 	bl	8009c90 <core_set_error>
 8009c74:	e64f      	b.n	8009916 <ai_platform_network_process+0x1f6>
 8009c76:	f1ba 0f00 	cmp.w	sl, #0
 8009c7a:	f47f ae7f 	bne.w	800997c <ai_platform_network_process+0x25c>
 8009c7e:	e70d      	b.n	8009a9c <ai_platform_network_process+0x37c>

08009c80 <core_init>:
 8009c80:	2001      	movs	r0, #1
 8009c82:	4770      	bx	lr

08009c84 <core_get_error>:
 8009c84:	4603      	mov	r3, r0
 8009c86:	2200      	movs	r2, #0
 8009c88:	6800      	ldr	r0, [r0, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop

08009c90 <core_set_error>:
 8009c90:	4603      	mov	r3, r0
 8009c92:	7800      	ldrb	r0, [r0, #0]
 8009c94:	b930      	cbnz	r0, 8009ca4 <core_set_error+0x14>
 8009c96:	7019      	strb	r1, [r3, #0]
 8009c98:	2001      	movs	r0, #1
 8009c9a:	6819      	ldr	r1, [r3, #0]
 8009c9c:	f362 211f 	bfi	r1, r2, #8, #24
 8009ca0:	6019      	str	r1, [r3, #0]
 8009ca2:	4770      	bx	lr
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4770      	bx	lr

08009ca8 <ai_dict8_dot_array_f32>:
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	9d06      	ldr	r5, [sp, #24]
 8009cae:	4c88      	ldr	r4, [pc, #544]	; (8009ed0 <ai_dict8_dot_array_f32+0x228>)
 8009cb0:	2d07      	cmp	r5, #7
 8009cb2:	442c      	add	r4, r5
 8009cb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cb8:	f104 0620 	add.w	r6, r4, #32
 8009cbc:	d817      	bhi.n	8009cee <ai_dict8_dot_array_f32+0x46>
 8009cbe:	42b3      	cmp	r3, r6
 8009cc0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009ed4 <ai_dict8_dot_array_f32+0x22c>
 8009cc4:	d20b      	bcs.n	8009cde <ai_dict8_dot_array_f32+0x36>
 8009cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cca:	ecf3 7a01 	vldmia	r3!, {s15}
 8009cce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009cd2:	42b3      	cmp	r3, r6
 8009cd4:	edd4 6a00 	vldr	s13, [r4]
 8009cd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cdc:	d3f3      	bcc.n	8009cc6 <ai_dict8_dot_array_f32+0x1e>
 8009cde:	edd0 7a00 	vldr	s15, [r0]
 8009ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce6:	ed80 7a00 	vstr	s14, [r0]
 8009cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cee:	f001 0503 	and.w	r5, r1, #3
 8009cf2:	2d02      	cmp	r5, #2
 8009cf4:	f000 80f0 	beq.w	8009ed8 <ai_dict8_dot_array_f32+0x230>
 8009cf8:	2d03      	cmp	r5, #3
 8009cfa:	f000 81ff 	beq.w	800a0fc <ai_dict8_dot_array_f32+0x454>
 8009cfe:	2d01      	cmp	r5, #1
 8009d00:	f000 81f0 	beq.w	800a0e4 <ai_dict8_dot_array_f32+0x43c>
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	f200 81fc 	bhi.w	800a102 <ai_dict8_dot_array_f32+0x45a>
 8009d0a:	1ae4      	subs	r4, r4, r3
 8009d0c:	f101 0810 	add.w	r8, r1, #16
 8009d10:	f101 0508 	add.w	r5, r1, #8
 8009d14:	f103 0720 	add.w	r7, r3, #32
 8009d18:	0964      	lsrs	r4, r4, #5
 8009d1a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009ed4 <ai_dict8_dot_array_f32+0x22c>
 8009d1e:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8009d22:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8009d26:	3508      	adds	r5, #8
 8009d28:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009d32:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8009d36:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d3a:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8009d3e:	edde 7a00 	vldr	s15, [lr]
 8009d42:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8009d46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009d4a:	eddc 5a00 	vldr	s11, [ip]
 8009d4e:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8009d52:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8009d56:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009d5a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d5e:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8009d62:	ed9c 4a00 	vldr	s8, [ip]
 8009d66:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8009d6a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009d6e:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8009d72:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d76:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8009d7a:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009d7e:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8009d82:	ed9c 4a00 	vldr	s8, [ip]
 8009d86:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8009d8a:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8009d8e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d92:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009d96:	ed9e 5a00 	vldr	s10, [lr]
 8009d9a:	ed9c 4a00 	vldr	s8, [ip]
 8009d9e:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8009da2:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8009da6:	4545      	cmp	r5, r8
 8009da8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009dac:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009db0:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009db4:	ed9e 5a00 	vldr	s10, [lr]
 8009db8:	ed9c 6a00 	vldr	s12, [ip]
 8009dbc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009dc0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009dc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dcc:	d1a9      	bne.n	8009d22 <ai_dict8_dot_array_f32+0x7a>
 8009dce:	3401      	adds	r4, #1
 8009dd0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009dd4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8009dd8:	42b3      	cmp	r3, r6
 8009dda:	d280      	bcs.n	8009cde <ai_dict8_dot_array_f32+0x36>
 8009ddc:	461c      	mov	r4, r3
 8009dde:	780d      	ldrb	r5, [r1, #0]
 8009de0:	ecf4 6a01 	vldmia	r4!, {s13}
 8009de4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009de8:	42a6      	cmp	r6, r4
 8009dea:	edd5 7a00 	vldr	s15, [r5]
 8009dee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009df2:	f67f af74 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009df6:	784d      	ldrb	r5, [r1, #1]
 8009df8:	f103 0408 	add.w	r4, r3, #8
 8009dfc:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e00:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e04:	42a6      	cmp	r6, r4
 8009e06:	edd5 7a00 	vldr	s15, [r5]
 8009e0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e0e:	f67f af66 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e12:	788d      	ldrb	r5, [r1, #2]
 8009e14:	f103 040c 	add.w	r4, r3, #12
 8009e18:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e1c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	edd5 7a00 	vldr	s15, [r5]
 8009e26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e2a:	f67f af58 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e2e:	78cd      	ldrb	r5, [r1, #3]
 8009e30:	f103 0410 	add.w	r4, r3, #16
 8009e34:	edd3 6a03 	vldr	s13, [r3, #12]
 8009e38:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	edd5 7a00 	vldr	s15, [r5]
 8009e42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e46:	f67f af4a 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e4a:	790d      	ldrb	r5, [r1, #4]
 8009e4c:	f103 0414 	add.w	r4, r3, #20
 8009e50:	edd3 6a04 	vldr	s13, [r3, #16]
 8009e54:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e58:	42a6      	cmp	r6, r4
 8009e5a:	edd5 7a00 	vldr	s15, [r5]
 8009e5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e62:	f67f af3c 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e66:	794d      	ldrb	r5, [r1, #5]
 8009e68:	f103 0418 	add.w	r4, r3, #24
 8009e6c:	edd3 6a05 	vldr	s13, [r3, #20]
 8009e70:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e74:	42a6      	cmp	r6, r4
 8009e76:	edd5 7a00 	vldr	s15, [r5]
 8009e7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e7e:	f67f af2e 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e82:	798d      	ldrb	r5, [r1, #6]
 8009e84:	f103 041c 	add.w	r4, r3, #28
 8009e88:	edd3 6a06 	vldr	s13, [r3, #24]
 8009e8c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e90:	42a6      	cmp	r6, r4
 8009e92:	edd5 7a00 	vldr	s15, [r5]
 8009e96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e9a:	f67f af20 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009e9e:	79cd      	ldrb	r5, [r1, #7]
 8009ea0:	f103 0420 	add.w	r4, r3, #32
 8009ea4:	edd3 6a07 	vldr	s13, [r3, #28]
 8009ea8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009eac:	42a6      	cmp	r6, r4
 8009eae:	edd5 7a00 	vldr	s15, [r5]
 8009eb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009eb6:	f67f af12 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009eba:	7a09      	ldrb	r1, [r1, #8]
 8009ebc:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ec0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009ec4:	edd2 6a00 	vldr	s13, [r2]
 8009ec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ecc:	e707      	b.n	8009cde <ai_dict8_dot_array_f32+0x36>
 8009ece:	bf00      	nop
 8009ed0:	3ffffff8 	.word	0x3ffffff8
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8009ed4 <ai_dict8_dot_array_f32+0x22c>
 8009edc:	780d      	ldrb	r5, [r1, #0]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009eea:	edd5 6a00 	vldr	s13, [r5]
 8009eee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ef2:	780d      	ldrb	r5, [r1, #0]
 8009ef4:	1d1f      	adds	r7, r3, #4
 8009ef6:	edd3 7a00 	vldr	s15, [r3]
 8009efa:	f101 0c01 	add.w	ip, r1, #1
 8009efe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009f02:	42bc      	cmp	r4, r7
 8009f04:	edd5 6a00 	vldr	s13, [r5]
 8009f08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f0c:	d365      	bcc.n	8009fda <ai_dict8_dot_array_f32+0x332>
 8009f0e:	3324      	adds	r3, #36	; 0x24
 8009f10:	f101 0e11 	add.w	lr, r1, #17
 8009f14:	3109      	adds	r1, #9
 8009f16:	eba6 0803 	sub.w	r8, r6, r3
 8009f1a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009f1e:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8009f22:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009f26:	3108      	adds	r1, #8
 8009f28:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8009f2c:	3320      	adds	r3, #32
 8009f2e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009f32:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8009f36:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f3a:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8009f3e:	edd5 7a00 	vldr	s15, [r5]
 8009f42:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8009f46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009f4a:	edd4 5a00 	vldr	s11, [r4]
 8009f4e:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8009f52:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8009f56:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009f5a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f5e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009f62:	ed94 4a00 	vldr	s8, [r4]
 8009f66:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8009f6a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009f6e:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8009f72:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f76:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8009f7a:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009f7e:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8009f82:	ed94 4a00 	vldr	s8, [r4]
 8009f86:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8009f8a:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8009f8e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f92:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009f96:	ed95 5a00 	vldr	s10, [r5]
 8009f9a:	ed94 4a00 	vldr	s8, [r4]
 8009f9e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009fa2:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8009fa6:	458e      	cmp	lr, r1
 8009fa8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009fac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009fb0:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009fb4:	ed95 5a00 	vldr	s10, [r5]
 8009fb8:	ed94 6a00 	vldr	s12, [r4]
 8009fbc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fc0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009fc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fcc:	d1a9      	bne.n	8009f22 <ai_dict8_dot_array_f32+0x27a>
 8009fce:	f108 0801 	add.w	r8, r8, #1
 8009fd2:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8009fd6:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8009fda:	42b7      	cmp	r7, r6
 8009fdc:	f4bf ae7f 	bcs.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	f89c 1000 	ldrb.w	r1, [ip]
 8009fe6:	ecf3 6a01 	vldmia	r3!, {s13}
 8009fea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009fee:	429e      	cmp	r6, r3
 8009ff0:	edd1 7a00 	vldr	s15, [r1]
 8009ff4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ff8:	f67f ae71 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 8009ffc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800a000:	f107 0308 	add.w	r3, r7, #8
 800a004:	edd7 6a01 	vldr	s13, [r7, #4]
 800a008:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a00c:	429e      	cmp	r6, r3
 800a00e:	edd1 7a00 	vldr	s15, [r1]
 800a012:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a016:	f67f ae62 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a01a:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	edd7 6a02 	vldr	s13, [r7, #8]
 800a026:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a02a:	429e      	cmp	r6, r3
 800a02c:	edd1 7a00 	vldr	s15, [r1]
 800a030:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a034:	f67f ae53 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a038:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800a03c:	f107 0310 	add.w	r3, r7, #16
 800a040:	edd7 6a03 	vldr	s13, [r7, #12]
 800a044:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a048:	429e      	cmp	r6, r3
 800a04a:	edd1 7a00 	vldr	s15, [r1]
 800a04e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a052:	f67f ae44 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a056:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800a05a:	f107 0314 	add.w	r3, r7, #20
 800a05e:	edd7 6a04 	vldr	s13, [r7, #16]
 800a062:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a066:	429e      	cmp	r6, r3
 800a068:	edd1 7a00 	vldr	s15, [r1]
 800a06c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a070:	f67f ae35 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a074:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800a078:	f107 0318 	add.w	r3, r7, #24
 800a07c:	edd7 6a05 	vldr	s13, [r7, #20]
 800a080:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a084:	429e      	cmp	r6, r3
 800a086:	edd1 7a00 	vldr	s15, [r1]
 800a08a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a08e:	f67f ae26 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a092:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800a096:	f107 031c 	add.w	r3, r7, #28
 800a09a:	edd7 6a06 	vldr	s13, [r7, #24]
 800a09e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a0a2:	429e      	cmp	r6, r3
 800a0a4:	edd1 7a00 	vldr	s15, [r1]
 800a0a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0ac:	f67f ae17 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a0b0:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800a0b4:	f107 0320 	add.w	r3, r7, #32
 800a0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	edd1 7a00 	vldr	s15, [r1]
 800a0c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0ca:	f67f ae08 	bls.w	8009cde <ai_dict8_dot_array_f32+0x36>
 800a0ce:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800a0d2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a0da:	edd2 6a00 	vldr	s13, [r2]
 800a0de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0e2:	e5fc      	b.n	8009cde <ai_dict8_dot_array_f32+0x36>
 800a0e4:	780d      	ldrb	r5, [r1, #0]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a0ec:	3101      	adds	r1, #1
 800a0ee:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a0f2:	ed95 7a00 	vldr	s14, [r5]
 800a0f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0fa:	e6ef      	b.n	8009edc <ai_dict8_dot_array_f32+0x234>
 800a0fc:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8009ed4 <ai_dict8_dot_array_f32+0x22c>
 800a100:	e6f7      	b.n	8009ef2 <ai_dict8_dot_array_f32+0x24a>
 800a102:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8009ed4 <ai_dict8_dot_array_f32+0x22c>
 800a106:	e667      	b.n	8009dd8 <ai_dict8_dot_array_f32+0x130>

0800a108 <ai_dict4_dot_array_f32>:
 800a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a10e:	f027 0c01 	bic.w	ip, r7, #1
 800a112:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800a116:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a11a:	f000 80ad 	beq.w	800a278 <ai_dict4_dot_array_f32+0x170>
 800a11e:	1d0d      	adds	r5, r1, #4
 800a120:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800a124:	f103 0420 	add.w	r4, r3, #32
 800a128:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800a280 <ai_dict4_dot_array_f32+0x178>
 800a12c:	eb05 0e09 	add.w	lr, r5, r9
 800a130:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800a134:	3504      	adds	r5, #4
 800a136:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800a13a:	3420      	adds	r4, #32
 800a13c:	f006 0a0f 	and.w	sl, r6, #15
 800a140:	0936      	lsrs	r6, r6, #4
 800a142:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800a146:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a14a:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800a14e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a152:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800a156:	edda 7a00 	vldr	s15, [sl]
 800a15a:	edd6 5a00 	vldr	s11, [r6]
 800a15e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a162:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800a166:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800a16a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800a16e:	f006 060f 	and.w	r6, r6, #15
 800a172:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800a176:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800a17a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a17e:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800a182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a186:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800a18a:	ed9a 3a00 	vldr	s6, [sl]
 800a18e:	ed96 5a00 	vldr	s10, [r6]
 800a192:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800a196:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a19a:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800a19e:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800a1a2:	f00a 0a0f 	and.w	sl, sl, #15
 800a1a6:	45ae      	cmp	lr, r5
 800a1a8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a1ac:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a1b0:	ed9b 3a00 	vldr	s6, [fp]
 800a1b4:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800a1b8:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a1bc:	ed9a 4a00 	vldr	s8, [sl]
 800a1c0:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800a1c4:	f006 060f 	and.w	r6, r6, #15
 800a1c8:	ed9a 5a00 	vldr	s10, [sl]
 800a1cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1d0:	ed96 6a00 	vldr	s12, [r6]
 800a1d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a1d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a1dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a1e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a1e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1e8:	d1a2      	bne.n	800a130 <ai_dict4_dot_array_f32+0x28>
 800a1ea:	4449      	add	r1, r9
 800a1ec:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a1f0:	459c      	cmp	ip, r3
 800a1f2:	d92d      	bls.n	800a250 <ai_dict4_dot_array_f32+0x148>
 800a1f4:	f10c 0c07 	add.w	ip, ip, #7
 800a1f8:	f103 0508 	add.w	r5, r3, #8
 800a1fc:	f103 0810 	add.w	r8, r3, #16
 800a200:	f101 3eff 	add.w	lr, r1, #4294967295
 800a204:	ebac 0c05 	sub.w	ip, ip, r5
 800a208:	f02c 0407 	bic.w	r4, ip, #7
 800a20c:	44a0      	add	r8, r4
 800a20e:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800a212:	3508      	adds	r5, #8
 800a214:	ed55 5a03 	vldr	s11, [r5, #-12]
 800a218:	f004 060f 	and.w	r6, r4, #15
 800a21c:	0924      	lsrs	r4, r4, #4
 800a21e:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a222:	45a8      	cmp	r8, r5
 800a224:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a228:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a22c:	edd6 7a00 	vldr	s15, [r6]
 800a230:	ed94 6a00 	vldr	s12, [r4]
 800a234:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a238:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a23c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a240:	d1e5      	bne.n	800a20e <ai_dict4_dot_array_f32+0x106>
 800a242:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a246:	f10c 0c01 	add.w	ip, ip, #1
 800a24a:	4461      	add	r1, ip
 800a24c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800a250:	07fc      	lsls	r4, r7, #31
 800a252:	d509      	bpl.n	800a268 <ai_dict4_dot_array_f32+0x160>
 800a254:	7809      	ldrb	r1, [r1, #0]
 800a256:	edd3 7a00 	vldr	s15, [r3]
 800a25a:	090b      	lsrs	r3, r1, #4
 800a25c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a260:	edd2 6a00 	vldr	s13, [r2]
 800a264:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a268:	edd0 7a00 	vldr	s15, [r0]
 800a26c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a270:	ed80 7a00 	vstr	s14, [r0]
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a280 <ai_dict4_dot_array_f32+0x178>
 800a27c:	e7b8      	b.n	800a1f0 <ai_dict4_dot_array_f32+0xe8>
 800a27e:	bf00      	nop
 800a280:	00000000 	.word	0x00000000

0800a284 <forward_dense>:
 800a284:	6942      	ldr	r2, [r0, #20]
 800a286:	8813      	ldrh	r3, [r2, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 81c8 	beq.w	800a61e <forward_dense+0x39a>
 800a28e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a292:	ed2d 8b08 	vpush	{d8-d11}
 800a296:	6851      	ldr	r1, [r2, #4]
 800a298:	b091      	sub	sp, #68	; 0x44
 800a29a:	684d      	ldr	r5, [r1, #4]
 800a29c:	b105      	cbz	r5, 800a2a0 <forward_dense+0x1c>
 800a29e:	682d      	ldr	r5, [r5, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	f240 81b9 	bls.w	800a618 <forward_dense+0x394>
 800a2a6:	690a      	ldr	r2, [r1, #16]
 800a2a8:	b102      	cbz	r2, 800a2ac <forward_dense+0x28>
 800a2aa:	6812      	ldr	r2, [r2, #0]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	f000 81b8 	beq.w	800a622 <forward_dense+0x39e>
 800a2b2:	69cb      	ldr	r3, [r1, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8209 	beq.w	800a6cc <forward_dense+0x448>
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	9008      	str	r0, [sp, #32]
 800a2be:	f111 0018 	adds.w	r0, r1, #24
 800a2c2:	f000 81dc 	beq.w	800a67e <forward_dense+0x3fa>
 800a2c6:	8b09      	ldrh	r1, [r1, #24]
 800a2c8:	2901      	cmp	r1, #1
 800a2ca:	f240 81fc 	bls.w	800a6c6 <forward_dense+0x442>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 81d7 	beq.w	800a682 <forward_dense+0x3fe>
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	9306      	str	r3, [sp, #24]
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	68d6      	ldr	r6, [r2, #12]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	68b0      	ldr	r0, [r6, #8]
 800a2e0:	681f      	ldr	r7, [r3, #0]
 800a2e2:	68f4      	ldr	r4, [r6, #12]
 800a2e4:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800a2e8:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800a2ec:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800a2f0:	fb04 f000 	mul.w	r0, r4, r0
 800a2f4:	fa4e f10c 	asr.w	r1, lr, ip
 800a2f8:	2f04      	cmp	r7, #4
 800a2fa:	9007      	str	r0, [sp, #28]
 800a2fc:	910b      	str	r1, [sp, #44]	; 0x2c
 800a2fe:	68e9      	ldr	r1, [r5, #12]
 800a300:	6870      	ldr	r0, [r6, #4]
 800a302:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a306:	f000 81db 	beq.w	800a6c0 <forward_dense+0x43c>
 800a30a:	2f08      	cmp	r7, #8
 800a30c:	f000 81d8 	beq.w	800a6c0 <forward_dense+0x43c>
 800a310:	f04f 0a00 	mov.w	sl, #0
 800a314:	6992      	ldr	r2, [r2, #24]
 800a316:	0080      	lsls	r0, r0, #2
 800a318:	69a9      	ldr	r1, [r5, #24]
 800a31a:	6894      	ldr	r4, [r2, #8]
 800a31c:	9a08      	ldr	r2, [sp, #32]
 800a31e:	9009      	str	r0, [sp, #36]	; 0x24
 800a320:	1826      	adds	r6, r4, r0
 800a322:	6952      	ldr	r2, [r2, #20]
 800a324:	9404      	str	r4, [sp, #16]
 800a326:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a32a:	9a07      	ldr	r2, [sp, #28]
 800a32c:	688f      	ldr	r7, [r1, #8]
 800a32e:	2a00      	cmp	r2, #0
 800a330:	f000 81c1 	beq.w	800a6b6 <forward_dense+0x432>
 800a334:	f1a8 0210 	sub.w	r2, r8, #16
 800a338:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a33c:	689d      	ldr	r5, [r3, #8]
 800a33e:	0912      	lsrs	r2, r2, #4
 800a340:	910a      	str	r1, [sp, #40]	; 0x28
 800a342:	2100      	movs	r1, #0
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	3201      	adds	r2, #1
 800a348:	eddf 2acf 	vldr	s5, [pc, #828]	; 800a688 <forward_dense+0x404>
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	f008 010f 	and.w	r1, r8, #15
 800a352:	0192      	lsls	r2, r2, #6
 800a354:	910d      	str	r1, [sp, #52]	; 0x34
 800a356:	920c      	str	r2, [sp, #48]	; 0x30
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d042      	beq.n	800a3e2 <forward_dense+0x15e>
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	689c      	ldr	r4, [r3, #8]
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	f1ba 0f00 	cmp.w	sl, #0
 800a366:	d041      	beq.n	800a3ec <forward_dense+0x168>
 800a368:	42b3      	cmp	r3, r6
 800a36a:	d229      	bcs.n	800a3c0 <forward_dense+0x13c>
 800a36c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a36e:	469b      	mov	fp, r3
 800a370:	ab0f      	add	r3, sp, #60	; 0x3c
 800a372:	2a04      	cmp	r2, #4
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	4633      	mov	r3, r6
 800a378:	4646      	mov	r6, r8
 800a37a:	4698      	mov	r8, r3
 800a37c:	f000 8154 	beq.w	800a628 <forward_dense+0x3a4>
 800a380:	2c00      	cmp	r4, #0
 800a382:	f000 8183 	beq.w	800a68c <forward_dense+0x408>
 800a386:	f8d4 c000 	ldr.w	ip, [r4]
 800a38a:	463b      	mov	r3, r7
 800a38c:	4629      	mov	r1, r5
 800a38e:	9600      	str	r6, [sp, #0]
 800a390:	4652      	mov	r2, sl
 800a392:	9803      	ldr	r0, [sp, #12]
 800a394:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a398:	f7ff fc86 	bl	8009ca8 <ai_dict8_dot_array_f32>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a39e:	3404      	adds	r4, #4
 800a3a0:	444d      	add	r5, r9
 800a3a2:	f84b 3b04 	str.w	r3, [fp], #4
 800a3a6:	45c3      	cmp	fp, r8
 800a3a8:	d3ea      	bcc.n	800a380 <forward_dense+0xfc>
 800a3aa:	4643      	mov	r3, r8
 800a3ac:	46b0      	mov	r8, r6
 800a3ae:	461e      	mov	r6, r3
 800a3b0:	9a04      	ldr	r2, [sp, #16]
 800a3b2:	43d3      	mvns	r3, r2
 800a3b4:	4433      	add	r3, r6
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	18d3      	adds	r3, r2, r3
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c2:	9b05      	ldr	r3, [sp, #20]
 800a3c4:	4417      	add	r7, r2
 800a3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	4416      	add	r6, r2
 800a3cc:	9a07      	ldr	r2, [sp, #28]
 800a3ce:	9305      	str	r3, [sp, #20]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	f000 8170 	beq.w	800a6b6 <forward_dense+0x432>
 800a3d6:	9b08      	ldr	r3, [sp, #32]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	689d      	ldr	r5, [r3, #8]
 800a3dc:	9b06      	ldr	r3, [sp, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1bc      	bne.n	800a35c <forward_dense+0xd8>
 800a3e2:	461c      	mov	r4, r3
 800a3e4:	9b04      	ldr	r3, [sp, #16]
 800a3e6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ea:	d1bd      	bne.n	800a368 <forward_dense+0xe4>
 800a3ec:	42b3      	cmp	r3, r6
 800a3ee:	d2e7      	bcs.n	800a3c0 <forward_dense+0x13c>
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a3f8:	eb07 0c03 	add.w	ip, r7, r3
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	f000 80fe 	beq.w	800a600 <forward_dense+0x37c>
 800a404:	f1b8 0f0f 	cmp.w	r8, #15
 800a408:	ed94 6a00 	vldr	s12, [r4]
 800a40c:	f104 0404 	add.w	r4, r4, #4
 800a410:	f240 80fc 	bls.w	800a60c <forward_dense+0x388>
 800a414:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a418:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a41c:	4641      	mov	r1, r8
 800a41e:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800a688 <forward_dense+0x404>
 800a422:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800a426:	3910      	subs	r1, #16
 800a428:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800a42c:	3240      	adds	r2, #64	; 0x40
 800a42e:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800a432:	290f      	cmp	r1, #15
 800a434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a438:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800a43c:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800a440:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a444:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800a448:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a44c:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800a450:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800a454:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800a458:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800a45c:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800a460:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800a464:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a468:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a46c:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a470:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a474:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a478:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800a47c:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800a480:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a484:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800a488:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800a48c:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800a490:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a494:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800a498:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800a49c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a4a0:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800a4a4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800a4a8:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a4ac:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a4b0:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a4b4:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a4b8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a4bc:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800a4c0:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800a4c4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a4c8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a4cc:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a4d0:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a4d4:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a4d8:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a4dc:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a4e0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a4e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a4e8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a4ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a4f0:	d897      	bhi.n	800a422 <forward_dense+0x19e>
 800a4f2:	eb05 010e 	add.w	r1, r5, lr
 800a4f6:	465b      	mov	r3, fp
 800a4f8:	4662      	mov	r2, ip
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d075      	beq.n	800a5ea <forward_dense+0x366>
 800a4fe:	ed91 7a00 	vldr	s14, [r1]
 800a502:	2b01      	cmp	r3, #1
 800a504:	edd2 7a00 	vldr	s15, [r2]
 800a508:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a50c:	d06d      	beq.n	800a5ea <forward_dense+0x366>
 800a50e:	ed91 7a01 	vldr	s14, [r1, #4]
 800a512:	2b02      	cmp	r3, #2
 800a514:	edd2 7a01 	vldr	s15, [r2, #4]
 800a518:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a51c:	d065      	beq.n	800a5ea <forward_dense+0x366>
 800a51e:	ed91 7a02 	vldr	s14, [r1, #8]
 800a522:	2b03      	cmp	r3, #3
 800a524:	edd2 7a02 	vldr	s15, [r2, #8]
 800a528:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a52c:	d05d      	beq.n	800a5ea <forward_dense+0x366>
 800a52e:	ed91 7a03 	vldr	s14, [r1, #12]
 800a532:	2b04      	cmp	r3, #4
 800a534:	edd2 7a03 	vldr	s15, [r2, #12]
 800a538:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a53c:	d055      	beq.n	800a5ea <forward_dense+0x366>
 800a53e:	ed91 7a04 	vldr	s14, [r1, #16]
 800a542:	2b05      	cmp	r3, #5
 800a544:	edd2 7a04 	vldr	s15, [r2, #16]
 800a548:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a54c:	d04d      	beq.n	800a5ea <forward_dense+0x366>
 800a54e:	ed91 7a05 	vldr	s14, [r1, #20]
 800a552:	2b06      	cmp	r3, #6
 800a554:	edd2 7a05 	vldr	s15, [r2, #20]
 800a558:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a55c:	d045      	beq.n	800a5ea <forward_dense+0x366>
 800a55e:	ed91 7a06 	vldr	s14, [r1, #24]
 800a562:	2b07      	cmp	r3, #7
 800a564:	edd2 7a06 	vldr	s15, [r2, #24]
 800a568:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a56c:	d03d      	beq.n	800a5ea <forward_dense+0x366>
 800a56e:	ed91 7a07 	vldr	s14, [r1, #28]
 800a572:	2b08      	cmp	r3, #8
 800a574:	edd2 7a07 	vldr	s15, [r2, #28]
 800a578:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a57c:	d035      	beq.n	800a5ea <forward_dense+0x366>
 800a57e:	ed91 7a08 	vldr	s14, [r1, #32]
 800a582:	2b09      	cmp	r3, #9
 800a584:	edd2 7a08 	vldr	s15, [r2, #32]
 800a588:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a58c:	d02d      	beq.n	800a5ea <forward_dense+0x366>
 800a58e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a592:	2b0a      	cmp	r3, #10
 800a594:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a598:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a59c:	d025      	beq.n	800a5ea <forward_dense+0x366>
 800a59e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a5a2:	2b0b      	cmp	r3, #11
 800a5a4:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a5a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5ac:	d01d      	beq.n	800a5ea <forward_dense+0x366>
 800a5ae:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a5b2:	2b0c      	cmp	r3, #12
 800a5b4:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a5b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5bc:	d015      	beq.n	800a5ea <forward_dense+0x366>
 800a5be:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a5c2:	2b0d      	cmp	r3, #13
 800a5c4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a5c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5cc:	d00d      	beq.n	800a5ea <forward_dense+0x366>
 800a5ce:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a5d2:	2b0e      	cmp	r3, #14
 800a5d4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a5d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5dc:	d005      	beq.n	800a5ea <forward_dense+0x366>
 800a5de:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a5e2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a5e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a5ee:	444d      	add	r5, r9
 800a5f0:	ece0 6a01 	vstmia	r0!, {s13}
 800a5f4:	42b0      	cmp	r0, r6
 800a5f6:	f4bf aedb 	bcs.w	800a3b0 <forward_dense+0x12c>
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	f47f af02 	bne.w	800a404 <forward_dense+0x180>
 800a600:	f1b8 0f0f 	cmp.w	r8, #15
 800a604:	eeb0 6a62 	vmov.f32	s12, s5
 800a608:	f63f af04 	bhi.w	800a414 <forward_dense+0x190>
 800a60c:	4643      	mov	r3, r8
 800a60e:	4629      	mov	r1, r5
 800a610:	463a      	mov	r2, r7
 800a612:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a688 <forward_dense+0x404>
 800a616:	e770      	b.n	800a4fa <forward_dense+0x276>
 800a618:	2300      	movs	r3, #0
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	deff      	udf	#255	; 0xff
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	deff      	udf	#255	; 0xff
 800a622:	2300      	movs	r3, #0
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	deff      	udf	#255	; 0xff
 800a628:	b1a4      	cbz	r4, 800a654 <forward_dense+0x3d0>
 800a62a:	f8d4 c000 	ldr.w	ip, [r4]
 800a62e:	463b      	mov	r3, r7
 800a630:	4629      	mov	r1, r5
 800a632:	9600      	str	r6, [sp, #0]
 800a634:	4652      	mov	r2, sl
 800a636:	9803      	ldr	r0, [sp, #12]
 800a638:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a63c:	f7ff fd64 	bl	800a108 <ai_dict4_dot_array_f32>
 800a640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a642:	3404      	adds	r4, #4
 800a644:	444d      	add	r5, r9
 800a646:	f84b 3b04 	str.w	r3, [fp], #4
 800a64a:	45c3      	cmp	fp, r8
 800a64c:	f4bf aead 	bcs.w	800a3aa <forward_dense+0x126>
 800a650:	2c00      	cmp	r4, #0
 800a652:	d1ea      	bne.n	800a62a <forward_dense+0x3a6>
 800a654:	4634      	mov	r4, r6
 800a656:	4646      	mov	r6, r8
 800a658:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a65c:	463b      	mov	r3, r7
 800a65e:	4629      	mov	r1, r5
 800a660:	9400      	str	r4, [sp, #0]
 800a662:	4652      	mov	r2, sl
 800a664:	4640      	mov	r0, r8
 800a666:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a66a:	f7ff fd4d 	bl	800a108 <ai_dict4_dot_array_f32>
 800a66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a670:	444d      	add	r5, r9
 800a672:	f84b 3b04 	str.w	r3, [fp], #4
 800a676:	45b3      	cmp	fp, r6
 800a678:	d3f0      	bcc.n	800a65c <forward_dense+0x3d8>
 800a67a:	46a0      	mov	r8, r4
 800a67c:	e698      	b.n	800a3b0 <forward_dense+0x12c>
 800a67e:	9006      	str	r0, [sp, #24]
 800a680:	e62a      	b.n	800a2d8 <forward_dense+0x54>
 800a682:	9306      	str	r3, [sp, #24]
 800a684:	e628      	b.n	800a2d8 <forward_dense+0x54>
 800a686:	bf00      	nop
 800a688:	00000000 	.word	0x00000000
 800a68c:	4634      	mov	r4, r6
 800a68e:	4646      	mov	r6, r8
 800a690:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a694:	463b      	mov	r3, r7
 800a696:	4629      	mov	r1, r5
 800a698:	9400      	str	r4, [sp, #0]
 800a69a:	4652      	mov	r2, sl
 800a69c:	4640      	mov	r0, r8
 800a69e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a6a2:	f7ff fb01 	bl	8009ca8 <ai_dict8_dot_array_f32>
 800a6a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6a8:	444d      	add	r5, r9
 800a6aa:	f84b 3b04 	str.w	r3, [fp], #4
 800a6ae:	45b3      	cmp	fp, r6
 800a6b0:	d3f0      	bcc.n	800a694 <forward_dense+0x410>
 800a6b2:	46a0      	mov	r8, r4
 800a6b4:	e67c      	b.n	800a3b0 <forward_dense+0x12c>
 800a6b6:	b011      	add	sp, #68	; 0x44
 800a6b8:	ecbd 8b08 	vpop	{d8-d11}
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a6c4:	e626      	b.n	800a314 <forward_dense+0x90>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9306      	str	r3, [sp, #24]
 800a6ca:	e605      	b.n	800a2d8 <forward_dense+0x54>
 800a6cc:	9308      	str	r3, [sp, #32]
 800a6ce:	e5f6      	b.n	800a2be <forward_dense+0x3a>

0800a6d0 <nl_func_relu_generic_array_f32>:
 800a6d0:	b470      	push	{r4, r5, r6}
 800a6d2:	edd3 6a02 	vldr	s13, [r3, #8]
 800a6d6:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a6da:	6880      	ldr	r0, [r0, #8]
 800a6dc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a6e0:	4414      	add	r4, r2
 800a6e2:	688d      	ldr	r5, [r1, #8]
 800a6e4:	00a4      	lsls	r4, r4, #2
 800a6e6:	ed93 7a00 	vldr	s14, [r3]
 800a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ee:	ed93 6a01 	vldr	s12, [r3, #4]
 800a6f2:	eb00 0204 	add.w	r2, r0, r4
 800a6f6:	442c      	add	r4, r5
 800a6f8:	d420      	bmi.n	800a73c <nl_func_relu_generic_array_f32+0x6c>
 800a6fa:	42ac      	cmp	r4, r5
 800a6fc:	d33b      	bcc.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a6fe:	1d23      	adds	r3, r4, #4
 800a700:	3204      	adds	r2, #4
 800a702:	e010      	b.n	800a726 <nl_func_relu_generic_array_f32+0x56>
 800a704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a708:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a710:	dd01      	ble.n	800a716 <nl_func_relu_generic_array_f32+0x46>
 800a712:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a716:	f1a3 0408 	sub.w	r4, r3, #8
 800a71a:	ed62 7a01 	vstmdb	r2!, {s15}
 800a71e:	4603      	mov	r3, r0
 800a720:	6888      	ldr	r0, [r1, #8]
 800a722:	4284      	cmp	r4, r0
 800a724:	d327      	bcc.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a726:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a72a:	1f18      	subs	r0, r3, #4
 800a72c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	dce6      	bgt.n	800a704 <nl_func_relu_generic_array_f32+0x34>
 800a736:	eef0 7a66 	vmov.f32	s15, s13
 800a73a:	e7ec      	b.n	800a716 <nl_func_relu_generic_array_f32+0x46>
 800a73c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a744:	d019      	beq.n	800a77a <nl_func_relu_generic_array_f32+0xaa>
 800a746:	42ac      	cmp	r4, r5
 800a748:	d315      	bcc.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a74a:	1d23      	adds	r3, r4, #4
 800a74c:	3204      	adds	r2, #4
 800a74e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a752:	1f18      	subs	r0, r3, #4
 800a754:	f1a3 0508 	sub.w	r5, r3, #8
 800a758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a75c:	4603      	mov	r3, r0
 800a75e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a766:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a76a:	d51c      	bpl.n	800a7a6 <nl_func_relu_generic_array_f32+0xd6>
 800a76c:	ed62 6a01 	vstmdb	r2!, {s13}
 800a770:	6888      	ldr	r0, [r1, #8]
 800a772:	42a8      	cmp	r0, r5
 800a774:	d9eb      	bls.n	800a74e <nl_func_relu_generic_array_f32+0x7e>
 800a776:	bc70      	pop	{r4, r5, r6}
 800a778:	4770      	bx	lr
 800a77a:	42ac      	cmp	r4, r5
 800a77c:	d3fb      	bcc.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a77e:	1d23      	adds	r3, r4, #4
 800a780:	3204      	adds	r2, #4
 800a782:	2600      	movs	r6, #0
 800a784:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a788:	1f18      	subs	r0, r3, #4
 800a78a:	f1a3 0508 	sub.w	r5, r3, #8
 800a78e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a792:	4603      	mov	r3, r0
 800a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a798:	d80b      	bhi.n	800a7b2 <nl_func_relu_generic_array_f32+0xe2>
 800a79a:	ed62 7a01 	vstmdb	r2!, {s15}
 800a79e:	6888      	ldr	r0, [r1, #8]
 800a7a0:	42a8      	cmp	r0, r5
 800a7a2:	d9ef      	bls.n	800a784 <nl_func_relu_generic_array_f32+0xb4>
 800a7a4:	e7e7      	b.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a7a6:	ed62 7a01 	vstmdb	r2!, {s15}
 800a7aa:	6888      	ldr	r0, [r1, #8]
 800a7ac:	42a8      	cmp	r0, r5
 800a7ae:	d9ce      	bls.n	800a74e <nl_func_relu_generic_array_f32+0x7e>
 800a7b0:	e7e1      	b.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a7b2:	f842 6d04 	str.w	r6, [r2, #-4]!
 800a7b6:	6888      	ldr	r0, [r1, #8]
 800a7b8:	42a8      	cmp	r0, r5
 800a7ba:	d9e3      	bls.n	800a784 <nl_func_relu_generic_array_f32+0xb4>
 800a7bc:	e7db      	b.n	800a776 <nl_func_relu_generic_array_f32+0xa6>
 800a7be:	bf00      	nop

0800a7c0 <forward_relu>:
 800a7c0:	6942      	ldr	r2, [r0, #20]
 800a7c2:	8813      	ldrh	r3, [r2, #0]
 800a7c4:	b33b      	cbz	r3, 800a816 <forward_relu+0x56>
 800a7c6:	b4f0      	push	{r4, r5, r6, r7}
 800a7c8:	6852      	ldr	r2, [r2, #4]
 800a7ca:	6855      	ldr	r5, [r2, #4]
 800a7cc:	b105      	cbz	r5, 800a7d0 <forward_relu+0x10>
 800a7ce:	682d      	ldr	r5, [r5, #0]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d91d      	bls.n	800a810 <forward_relu+0x50>
 800a7d4:	6913      	ldr	r3, [r2, #16]
 800a7d6:	b103      	cbz	r3, 800a7da <forward_relu+0x1a>
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6982      	ldr	r2, [r0, #24]
 800a7dc:	68ac      	ldr	r4, [r5, #8]
 800a7de:	6998      	ldr	r0, [r3, #24]
 800a7e0:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800a7e4:	69a9      	ldr	r1, [r5, #24]
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d040      	beq.n	800a86c <forward_relu+0xac>
 800a7ea:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800a7ee:	2e01      	cmp	r6, #1
 800a7f0:	d013      	beq.n	800a81a <forward_relu+0x5a>
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	d068      	beq.n	800a8c8 <forward_relu+0x108>
 800a7f6:	68ee      	ldr	r6, [r5, #12]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a7fe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a802:	42a6      	cmp	r6, r4
 800a804:	fb05 f202 	mul.w	r2, r5, r2
 800a808:	d1f9      	bne.n	800a7fe <forward_relu+0x3e>
 800a80a:	bcf0      	pop	{r4, r5, r6, r7}
 800a80c:	f7ff bf60 	b.w	800a6d0 <nl_func_relu_generic_array_f32>
 800a810:	2300      	movs	r3, #0
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	deff      	udf	#255	; 0xff
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	deff      	udf	#255	; 0xff
 800a81a:	6887      	ldr	r7, [r0, #8]
 800a81c:	688a      	ldr	r2, [r1, #8]
 800a81e:	ed93 7a00 	vldr	s14, [r3]
 800a822:	b184      	cbz	r4, 800a846 <forward_relu+0x86>
 800a824:	68ed      	ldr	r5, [r5, #12]
 800a826:	4630      	mov	r0, r6
 800a828:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800a82c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800a830:	42a5      	cmp	r5, r4
 800a832:	fb03 f000 	mul.w	r0, r3, r0
 800a836:	d1f9      	bne.n	800a82c <forward_relu+0x6c>
 800a838:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a83c:	4403      	add	r3, r0
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	18d2      	adds	r2, r2, r3
 800a842:	441f      	add	r7, r3
 800a844:	d236      	bcs.n	800a8b4 <forward_relu+0xf4>
 800a846:	1d13      	adds	r3, r2, #4
 800a848:	2500      	movs	r5, #0
 800a84a:	1d3a      	adds	r2, r7, #4
 800a84c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a850:	1f18      	subs	r0, r3, #4
 800a852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	d82d      	bhi.n	800a8b8 <forward_relu+0xf8>
 800a85c:	ed62 7a01 	vstmdb	r2!, {s15}
 800a860:	3b08      	subs	r3, #8
 800a862:	688c      	ldr	r4, [r1, #8]
 800a864:	429c      	cmp	r4, r3
 800a866:	d825      	bhi.n	800a8b4 <forward_relu+0xf4>
 800a868:	4603      	mov	r3, r0
 800a86a:	e7ef      	b.n	800a84c <forward_relu+0x8c>
 800a86c:	6880      	ldr	r0, [r0, #8]
 800a86e:	688b      	ldr	r3, [r1, #8]
 800a870:	b184      	cbz	r4, 800a894 <forward_relu+0xd4>
 800a872:	68ee      	ldr	r6, [r5, #12]
 800a874:	2201      	movs	r2, #1
 800a876:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a87a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a87e:	42a6      	cmp	r6, r4
 800a880:	fb05 f202 	mul.w	r2, r5, r2
 800a884:	d1f9      	bne.n	800a87a <forward_relu+0xba>
 800a886:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a88a:	4414      	add	r4, r2
 800a88c:	00a2      	lsls	r2, r4, #2
 800a88e:	189b      	adds	r3, r3, r2
 800a890:	4410      	add	r0, r2
 800a892:	d20f      	bcs.n	800a8b4 <forward_relu+0xf4>
 800a894:	3304      	adds	r3, #4
 800a896:	3004      	adds	r0, #4
 800a898:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a8cc <forward_relu+0x10c>
 800a89c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a8a0:	f1a3 0208 	sub.w	r2, r3, #8
 800a8a4:	3b04      	subs	r3, #4
 800a8a6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a8aa:	ed60 7a01 	vstmdb	r0!, {s15}
 800a8ae:	688c      	ldr	r4, [r1, #8]
 800a8b0:	4294      	cmp	r4, r2
 800a8b2:	d9f3      	bls.n	800a89c <forward_relu+0xdc>
 800a8b4:	bcf0      	pop	{r4, r5, r6, r7}
 800a8b6:	4770      	bx	lr
 800a8b8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a8bc:	3b08      	subs	r3, #8
 800a8be:	688c      	ldr	r4, [r1, #8]
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	d8f7      	bhi.n	800a8b4 <forward_relu+0xf4>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	e7c1      	b.n	800a84c <forward_relu+0x8c>
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	e79e      	b.n	800a80a <forward_relu+0x4a>
 800a8cc:	00000000 	.word	0x00000000

0800a8d0 <forward_sm>:
 800a8d0:	6942      	ldr	r2, [r0, #20]
 800a8d2:	8813      	ldrh	r3, [r2, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8085 	beq.w	800a9e4 <forward_sm+0x114>
 800a8da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8de:	ed2d 8b04 	vpush	{d8-d9}
 800a8e2:	6852      	ldr	r2, [r2, #4]
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	6855      	ldr	r5, [r2, #4]
 800a8e8:	b105      	cbz	r5, 800a8ec <forward_sm+0x1c>
 800a8ea:	682d      	ldr	r5, [r5, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d971      	bls.n	800a9d4 <forward_sm+0x104>
 800a8f0:	6913      	ldr	r3, [r2, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d06c      	beq.n	800a9d0 <forward_sm+0x100>
 800a8f6:	681f      	ldr	r7, [r3, #0]
 800a8f8:	68e9      	ldr	r1, [r5, #12]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	68ab      	ldr	r3, [r5, #8]
 800a8fe:	6850      	ldr	r0, [r2, #4]
 800a900:	0a1b      	lsrs	r3, r3, #8
 800a902:	684a      	ldr	r2, [r1, #4]
 800a904:	9201      	str	r2, [sp, #4]
 800a906:	d06f      	beq.n	800a9e8 <forward_sm+0x118>
 800a908:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a90c:	2401      	movs	r4, #1
 800a90e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a912:	4299      	cmp	r1, r3
 800a914:	fb02 f404 	mul.w	r4, r2, r4
 800a918:	d1f9      	bne.n	800a90e <forward_sm+0x3e>
 800a91a:	9901      	ldr	r1, [sp, #4]
 800a91c:	69ae      	ldr	r6, [r5, #24]
 800a91e:	1a63      	subs	r3, r4, r1
 800a920:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800a924:	1a24      	subs	r4, r4, r0
 800a926:	68b5      	ldr	r5, [r6, #8]
 800a928:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a92c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800a930:	68f3      	ldr	r3, [r6, #12]
 800a932:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a936:	429d      	cmp	r5, r3
 800a938:	d340      	bcc.n	800a9bc <forward_sm+0xec>
 800a93a:	008b      	lsls	r3, r1, #2
 800a93c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a940:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	425b      	negs	r3, r3
 800a948:	f1c8 0200 	rsb	r2, r8, #0
 800a94c:	9302      	str	r3, [sp, #8]
 800a94e:	9203      	str	r2, [sp, #12]
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	60b5      	str	r5, [r6, #8]
 800a954:	2b01      	cmp	r3, #1
 800a956:	f8c9 4008 	str.w	r4, [r9, #8]
 800a95a:	68b2      	ldr	r2, [r6, #8]
 800a95c:	ed92 8a00 	vldr	s16, [r2]
 800a960:	d93b      	bls.n	800a9da <forward_sm+0x10a>
 800a962:	9900      	ldr	r1, [sp, #0]
 800a964:	1d13      	adds	r3, r2, #4
 800a966:	1857      	adds	r7, r2, r1
 800a968:	ecf3 7a01 	vldmia	r3!, {s15}
 800a96c:	429f      	cmp	r7, r3
 800a96e:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800a972:	d1f9      	bne.n	800a968 <forward_sm+0x98>
 800a974:	4692      	mov	sl, r2
 800a976:	46a3      	mov	fp, r4
 800a978:	46a0      	mov	r8, r4
 800a97a:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800a9f0 <forward_sm+0x120>
 800a97e:	ecba 0a01 	vldmia	sl!, {s0}
 800a982:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a986:	f001 f893 	bl	800bab0 <expf>
 800a98a:	4557      	cmp	r7, sl
 800a98c:	eca8 0a01 	vstmia	r8!, {s0}
 800a990:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a994:	d1f3      	bne.n	800a97e <forward_sm+0xae>
 800a996:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	18e2      	adds	r2, r4, r3
 800a99e:	eddb 7a00 	vldr	s15, [fp]
 800a9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a6:	eceb 7a01 	vstmia	fp!, {s15}
 800a9aa:	455a      	cmp	r2, fp
 800a9ac:	d1f7      	bne.n	800a99e <forward_sm+0xce>
 800a9ae:	9b02      	ldr	r3, [sp, #8]
 800a9b0:	9a03      	ldr	r2, [sp, #12]
 800a9b2:	441d      	add	r5, r3
 800a9b4:	68f3      	ldr	r3, [r6, #12]
 800a9b6:	4414      	add	r4, r2
 800a9b8:	429d      	cmp	r5, r3
 800a9ba:	d2c9      	bcs.n	800a950 <forward_sm+0x80>
 800a9bc:	60b3      	str	r3, [r6, #8]
 800a9be:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a9c2:	f8c9 3008 	str.w	r3, [r9, #8]
 800a9c6:	b005      	add	sp, #20
 800a9c8:	ecbd 8b04 	vpop	{d8-d9}
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	deff      	udf	#255	; 0xff
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	deff      	udf	#255	; 0xff
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0e7      	beq.n	800a9ae <forward_sm+0xde>
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	18d7      	adds	r7, r2, r3
 800a9e2:	e7c7      	b.n	800a974 <forward_sm+0xa4>
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	deff      	udf	#255	; 0xff
 800a9e8:	2401      	movs	r4, #1
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	e796      	b.n	800a91c <forward_sm+0x4c>
 800a9ee:	bf00      	nop
 800a9f0:	00000000 	.word	0x00000000

0800a9f4 <ai_check_custom_types>:
 800a9f4:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <ai_check_custom_types+0x50>)
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	b118      	cbz	r0, 800aa06 <ai_check_custom_types+0x12>
 800a9fe:	7803      	ldrb	r3, [r0, #0]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d002      	beq.n	800aa0a <ai_check_custom_types+0x16>
 800aa04:	2000      	movs	r0, #0
 800aa06:	b002      	add	sp, #8
 800aa08:	4770      	bx	lr
 800aa0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d004      	beq.n	800aa1c <ai_check_custom_types+0x28>
 800aa12:	2001      	movs	r0, #1
 800aa14:	f080 0001 	eor.w	r0, r0, #1
 800aa18:	b002      	add	sp, #8
 800aa1a:	4770      	bx	lr
 800aa1c:	7842      	ldrb	r2, [r0, #1]
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d1f4      	bne.n	800aa12 <ai_check_custom_types+0x1e>
 800aa28:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800aa2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d1ee      	bne.n	800aa12 <ai_check_custom_types+0x1e>
 800aa34:	7842      	ldrb	r2, [r0, #1]
 800aa36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d1e9      	bne.n	800aa12 <ai_check_custom_types+0x1e>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7e8      	b.n	800aa14 <ai_check_custom_types+0x20>
 800aa42:	bf00      	nop
 800aa44:	0800bce0 	.word	0x0800bce0

0800aa48 <ai_layers_forward_all>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800aa50:	b316      	cbz	r6, 800aa98 <ai_layers_forward_all+0x50>
 800aa52:	b1c5      	cbz	r5, 800aa86 <ai_layers_forward_all+0x3e>
 800aa54:	6545      	str	r5, [r0, #84]	; 0x54
 800aa56:	4629      	mov	r1, r5
 800aa58:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800aa5a:	2001      	movs	r0, #1
 800aa5c:	47b0      	blx	r6
 800aa5e:	2700      	movs	r7, #0
 800aa60:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aa64:	2002      	movs	r0, #2
 800aa66:	47b0      	blx	r6
 800aa68:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800aa6a:	692b      	ldr	r3, [r5, #16]
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	4798      	blx	r3
 800aa70:	68eb      	ldr	r3, [r5, #12]
 800aa72:	2003      	movs	r0, #3
 800aa74:	429d      	cmp	r5, r3
 800aa76:	4619      	mov	r1, r3
 800aa78:	d006      	beq.n	800aa88 <ai_layers_forward_all+0x40>
 800aa7a:	6563      	str	r3, [r4, #84]	; 0x54
 800aa7c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aa7e:	47b0      	blx	r6
 800aa80:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa82:	2900      	cmp	r1, #0
 800aa84:	d1ed      	bne.n	800aa62 <ai_layers_forward_all+0x1a>
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6567      	str	r7, [r4, #84]	; 0x54
 800aa8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aa8e:	47b0      	blx	r6
 800aa90:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa92:	2900      	cmp	r1, #0
 800aa94:	d1e5      	bne.n	800aa62 <ai_layers_forward_all+0x1a>
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa98:	2d00      	cmp	r5, #0
 800aa9a:	d0f4      	beq.n	800aa86 <ai_layers_forward_all+0x3e>
 800aa9c:	6545      	str	r5, [r0, #84]	; 0x54
 800aa9e:	692b      	ldr	r3, [r5, #16]
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	4798      	blx	r3
 800aaa4:	68eb      	ldr	r3, [r5, #12]
 800aaa6:	42ab      	cmp	r3, r5
 800aaa8:	461d      	mov	r5, r3
 800aaaa:	d003      	beq.n	800aab4 <ai_layers_forward_all+0x6c>
 800aaac:	6563      	str	r3, [r4, #84]	; 0x54
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f5      	bne.n	800aa9e <ai_layers_forward_all+0x56>
 800aab2:	e7e8      	b.n	800aa86 <ai_layers_forward_all+0x3e>
 800aab4:	2300      	movs	r3, #0
 800aab6:	6563      	str	r3, [r4, #84]	; 0x54
 800aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaba:	bf00      	nop

0800aabc <ai_array_to_buffer_fmt>:
 800aabc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d01f      	beq.n	800ab04 <ai_array_to_buffer_fmt+0x48>
 800aac4:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800aac8:	4a1b      	ldr	r2, [pc, #108]	; (800ab38 <ai_array_to_buffer_fmt+0x7c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00a      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800aace:	dc0d      	bgt.n	800aaec <ai_array_to_buffer_fmt+0x30>
 800aad0:	4a1a      	ldr	r2, [pc, #104]	; (800ab3c <ai_array_to_buffer_fmt+0x80>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d006      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800aad6:	dd1d      	ble.n	800ab14 <ai_array_to_buffer_fmt+0x58>
 800aad8:	4a19      	ldr	r2, [pc, #100]	; (800ab40 <ai_array_to_buffer_fmt+0x84>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d002      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800aade:	320f      	adds	r2, #15
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d10d      	bne.n	800ab00 <ai_array_to_buffer_fmt+0x44>
 800aae4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800aae8:	4318      	orrs	r0, r3
 800aaea:	4770      	bx	lr
 800aaec:	4a15      	ldr	r2, [pc, #84]	; (800ab44 <ai_array_to_buffer_fmt+0x88>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d0f8      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800aaf2:	dd18      	ble.n	800ab26 <ai_array_to_buffer_fmt+0x6a>
 800aaf4:	4a14      	ldr	r2, [pc, #80]	; (800ab48 <ai_array_to_buffer_fmt+0x8c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d0f4      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800aafa:	4a14      	ldr	r2, [pc, #80]	; (800ab4c <ai_array_to_buffer_fmt+0x90>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d0f1      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab00:	2340      	movs	r3, #64	; 0x40
 800ab02:	e7ef      	b.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab04:	4b12      	ldr	r3, [pc, #72]	; (800ab50 <ai_array_to_buffer_fmt+0x94>)
 800ab06:	4003      	ands	r3, r0
 800ab08:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ab0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab10:	4318      	orrs	r0, r3
 800ab12:	4770      	bx	lr
 800ab14:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d0e3      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d0df      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab24:	e7ec      	b.n	800ab00 <ai_array_to_buffer_fmt+0x44>
 800ab26:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d0da      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab2e:	3207      	adds	r2, #7
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d0d7      	beq.n	800aae4 <ai_array_to_buffer_fmt+0x28>
 800ab34:	e7e4      	b.n	800ab00 <ai_array_to_buffer_fmt+0x44>
 800ab36:	bf00      	nop
 800ab38:	00840040 	.word	0x00840040
 800ab3c:	00040447 	.word	0x00040447
 800ab40:	00040840 	.word	0x00040840
 800ab44:	00840840 	.word	0x00840840
 800ab48:	0084084f 	.word	0x0084084f
 800ab4c:	01821040 	.word	0x01821040
 800ab50:	00803fff 	.word	0x00803fff

0800ab54 <ai_array_get_byte_size>:
 800ab54:	b1e1      	cbz	r1, 800ab90 <ai_array_get_byte_size+0x3c>
 800ab56:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ab5a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ab5e:	b410      	push	{r4}
 800ab60:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800ab64:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800ab68:	4423      	add	r3, r4
 800ab6a:	2804      	cmp	r0, #4
 800ab6c:	fb01 f103 	mul.w	r1, r1, r3
 800ab70:	f101 0107 	add.w	r1, r1, #7
 800ab74:	f021 0107 	bic.w	r1, r1, #7
 800ab78:	fa21 f102 	lsr.w	r1, r1, r2
 800ab7c:	d00a      	beq.n	800ab94 <ai_array_get_byte_size+0x40>
 800ab7e:	2808      	cmp	r0, #8
 800ab80:	d101      	bne.n	800ab86 <ai_array_get_byte_size+0x32>
 800ab82:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ab86:	3107      	adds	r1, #7
 800ab88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab8c:	08c8      	lsrs	r0, r1, #3
 800ab8e:	4770      	bx	lr
 800ab90:	4608      	mov	r0, r1
 800ab92:	4770      	bx	lr
 800ab94:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ab98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab9c:	3107      	adds	r1, #7
 800ab9e:	08c8      	lsrs	r0, r1, #3
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop

0800aba4 <__errno>:
 800aba4:	4b01      	ldr	r3, [pc, #4]	; (800abac <__errno+0x8>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	240006bc 	.word	0x240006bc

0800abb0 <__libc_init_array>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	4e0d      	ldr	r6, [pc, #52]	; (800abe8 <__libc_init_array+0x38>)
 800abb4:	4c0d      	ldr	r4, [pc, #52]	; (800abec <__libc_init_array+0x3c>)
 800abb6:	1ba4      	subs	r4, r4, r6
 800abb8:	10a4      	asrs	r4, r4, #2
 800abba:	2500      	movs	r5, #0
 800abbc:	42a5      	cmp	r5, r4
 800abbe:	d109      	bne.n	800abd4 <__libc_init_array+0x24>
 800abc0:	4e0b      	ldr	r6, [pc, #44]	; (800abf0 <__libc_init_array+0x40>)
 800abc2:	4c0c      	ldr	r4, [pc, #48]	; (800abf4 <__libc_init_array+0x44>)
 800abc4:	f001 f81e 	bl	800bc04 <_init>
 800abc8:	1ba4      	subs	r4, r4, r6
 800abca:	10a4      	asrs	r4, r4, #2
 800abcc:	2500      	movs	r5, #0
 800abce:	42a5      	cmp	r5, r4
 800abd0:	d105      	bne.n	800abde <__libc_init_array+0x2e>
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abd8:	4798      	blx	r3
 800abda:	3501      	adds	r5, #1
 800abdc:	e7ee      	b.n	800abbc <__libc_init_array+0xc>
 800abde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abe2:	4798      	blx	r3
 800abe4:	3501      	adds	r5, #1
 800abe6:	e7f2      	b.n	800abce <__libc_init_array+0x1e>
 800abe8:	0800e938 	.word	0x0800e938
 800abec:	0800e938 	.word	0x0800e938
 800abf0:	0800e938 	.word	0x0800e938
 800abf4:	0800e93c 	.word	0x0800e93c

0800abf8 <memcpy>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	1e43      	subs	r3, r0, #1
 800abfc:	440a      	add	r2, r1
 800abfe:	4291      	cmp	r1, r2
 800ac00:	d100      	bne.n	800ac04 <memcpy+0xc>
 800ac02:	bd10      	pop	{r4, pc}
 800ac04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac0c:	e7f7      	b.n	800abfe <memcpy+0x6>

0800ac0e <memset>:
 800ac0e:	4402      	add	r2, r0
 800ac10:	4603      	mov	r3, r0
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d100      	bne.n	800ac18 <memset+0xa>
 800ac16:	4770      	bx	lr
 800ac18:	f803 1b01 	strb.w	r1, [r3], #1
 800ac1c:	e7f9      	b.n	800ac12 <memset+0x4>
	...

0800ac20 <_free_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4605      	mov	r5, r0
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d045      	beq.n	800acb4 <_free_r+0x94>
 800ac28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac2c:	1f0c      	subs	r4, r1, #4
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfb8      	it	lt
 800ac32:	18e4      	addlt	r4, r4, r3
 800ac34:	f000 fbc6 	bl	800b3c4 <__malloc_lock>
 800ac38:	4a1f      	ldr	r2, [pc, #124]	; (800acb8 <_free_r+0x98>)
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	b933      	cbnz	r3, 800ac4e <_free_r+0x2e>
 800ac40:	6063      	str	r3, [r4, #4]
 800ac42:	6014      	str	r4, [r2, #0]
 800ac44:	4628      	mov	r0, r5
 800ac46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac4a:	f000 bbbc 	b.w	800b3c6 <__malloc_unlock>
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	d90c      	bls.n	800ac6c <_free_r+0x4c>
 800ac52:	6821      	ldr	r1, [r4, #0]
 800ac54:	1862      	adds	r2, r4, r1
 800ac56:	4293      	cmp	r3, r2
 800ac58:	bf04      	itt	eq
 800ac5a:	681a      	ldreq	r2, [r3, #0]
 800ac5c:	685b      	ldreq	r3, [r3, #4]
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	bf04      	itt	eq
 800ac62:	1852      	addeq	r2, r2, r1
 800ac64:	6022      	streq	r2, [r4, #0]
 800ac66:	6004      	str	r4, [r0, #0]
 800ac68:	e7ec      	b.n	800ac44 <_free_r+0x24>
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	b10a      	cbz	r2, 800ac74 <_free_r+0x54>
 800ac70:	42a2      	cmp	r2, r4
 800ac72:	d9fa      	bls.n	800ac6a <_free_r+0x4a>
 800ac74:	6819      	ldr	r1, [r3, #0]
 800ac76:	1858      	adds	r0, r3, r1
 800ac78:	42a0      	cmp	r0, r4
 800ac7a:	d10b      	bne.n	800ac94 <_free_r+0x74>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	4401      	add	r1, r0
 800ac80:	1858      	adds	r0, r3, r1
 800ac82:	4282      	cmp	r2, r0
 800ac84:	6019      	str	r1, [r3, #0]
 800ac86:	d1dd      	bne.n	800ac44 <_free_r+0x24>
 800ac88:	6810      	ldr	r0, [r2, #0]
 800ac8a:	6852      	ldr	r2, [r2, #4]
 800ac8c:	605a      	str	r2, [r3, #4]
 800ac8e:	4401      	add	r1, r0
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	e7d7      	b.n	800ac44 <_free_r+0x24>
 800ac94:	d902      	bls.n	800ac9c <_free_r+0x7c>
 800ac96:	230c      	movs	r3, #12
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	e7d3      	b.n	800ac44 <_free_r+0x24>
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	1821      	adds	r1, r4, r0
 800aca0:	428a      	cmp	r2, r1
 800aca2:	bf04      	itt	eq
 800aca4:	6811      	ldreq	r1, [r2, #0]
 800aca6:	6852      	ldreq	r2, [r2, #4]
 800aca8:	6062      	str	r2, [r4, #4]
 800acaa:	bf04      	itt	eq
 800acac:	1809      	addeq	r1, r1, r0
 800acae:	6021      	streq	r1, [r4, #0]
 800acb0:	605c      	str	r4, [r3, #4]
 800acb2:	e7c7      	b.n	800ac44 <_free_r+0x24>
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
 800acb6:	bf00      	nop
 800acb8:	240048e8 	.word	0x240048e8

0800acbc <_malloc_r>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	1ccd      	adds	r5, r1, #3
 800acc0:	f025 0503 	bic.w	r5, r5, #3
 800acc4:	3508      	adds	r5, #8
 800acc6:	2d0c      	cmp	r5, #12
 800acc8:	bf38      	it	cc
 800acca:	250c      	movcc	r5, #12
 800accc:	2d00      	cmp	r5, #0
 800acce:	4606      	mov	r6, r0
 800acd0:	db01      	blt.n	800acd6 <_malloc_r+0x1a>
 800acd2:	42a9      	cmp	r1, r5
 800acd4:	d903      	bls.n	800acde <_malloc_r+0x22>
 800acd6:	230c      	movs	r3, #12
 800acd8:	6033      	str	r3, [r6, #0]
 800acda:	2000      	movs	r0, #0
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	f000 fb71 	bl	800b3c4 <__malloc_lock>
 800ace2:	4a21      	ldr	r2, [pc, #132]	; (800ad68 <_malloc_r+0xac>)
 800ace4:	6814      	ldr	r4, [r2, #0]
 800ace6:	4621      	mov	r1, r4
 800ace8:	b991      	cbnz	r1, 800ad10 <_malloc_r+0x54>
 800acea:	4c20      	ldr	r4, [pc, #128]	; (800ad6c <_malloc_r+0xb0>)
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	b91b      	cbnz	r3, 800acf8 <_malloc_r+0x3c>
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 f8b9 	bl	800ae68 <_sbrk_r>
 800acf6:	6020      	str	r0, [r4, #0]
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 f8b4 	bl	800ae68 <_sbrk_r>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d124      	bne.n	800ad4e <_malloc_r+0x92>
 800ad04:	230c      	movs	r3, #12
 800ad06:	6033      	str	r3, [r6, #0]
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 fb5c 	bl	800b3c6 <__malloc_unlock>
 800ad0e:	e7e4      	b.n	800acda <_malloc_r+0x1e>
 800ad10:	680b      	ldr	r3, [r1, #0]
 800ad12:	1b5b      	subs	r3, r3, r5
 800ad14:	d418      	bmi.n	800ad48 <_malloc_r+0x8c>
 800ad16:	2b0b      	cmp	r3, #11
 800ad18:	d90f      	bls.n	800ad3a <_malloc_r+0x7e>
 800ad1a:	600b      	str	r3, [r1, #0]
 800ad1c:	50cd      	str	r5, [r1, r3]
 800ad1e:	18cc      	adds	r4, r1, r3
 800ad20:	4630      	mov	r0, r6
 800ad22:	f000 fb50 	bl	800b3c6 <__malloc_unlock>
 800ad26:	f104 000b 	add.w	r0, r4, #11
 800ad2a:	1d23      	adds	r3, r4, #4
 800ad2c:	f020 0007 	bic.w	r0, r0, #7
 800ad30:	1ac3      	subs	r3, r0, r3
 800ad32:	d0d3      	beq.n	800acdc <_malloc_r+0x20>
 800ad34:	425a      	negs	r2, r3
 800ad36:	50e2      	str	r2, [r4, r3]
 800ad38:	e7d0      	b.n	800acdc <_malloc_r+0x20>
 800ad3a:	428c      	cmp	r4, r1
 800ad3c:	684b      	ldr	r3, [r1, #4]
 800ad3e:	bf16      	itet	ne
 800ad40:	6063      	strne	r3, [r4, #4]
 800ad42:	6013      	streq	r3, [r2, #0]
 800ad44:	460c      	movne	r4, r1
 800ad46:	e7eb      	b.n	800ad20 <_malloc_r+0x64>
 800ad48:	460c      	mov	r4, r1
 800ad4a:	6849      	ldr	r1, [r1, #4]
 800ad4c:	e7cc      	b.n	800ace8 <_malloc_r+0x2c>
 800ad4e:	1cc4      	adds	r4, r0, #3
 800ad50:	f024 0403 	bic.w	r4, r4, #3
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d005      	beq.n	800ad64 <_malloc_r+0xa8>
 800ad58:	1a21      	subs	r1, r4, r0
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 f884 	bl	800ae68 <_sbrk_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	d0cf      	beq.n	800ad04 <_malloc_r+0x48>
 800ad64:	6025      	str	r5, [r4, #0]
 800ad66:	e7db      	b.n	800ad20 <_malloc_r+0x64>
 800ad68:	240048e8 	.word	0x240048e8
 800ad6c:	240048ec 	.word	0x240048ec

0800ad70 <iprintf>:
 800ad70:	b40f      	push	{r0, r1, r2, r3}
 800ad72:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <iprintf+0x2c>)
 800ad74:	b513      	push	{r0, r1, r4, lr}
 800ad76:	681c      	ldr	r4, [r3, #0]
 800ad78:	b124      	cbz	r4, 800ad84 <iprintf+0x14>
 800ad7a:	69a3      	ldr	r3, [r4, #24]
 800ad7c:	b913      	cbnz	r3, 800ad84 <iprintf+0x14>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fa32 	bl	800b1e8 <__sinit>
 800ad84:	ab05      	add	r3, sp, #20
 800ad86:	9a04      	ldr	r2, [sp, #16]
 800ad88:	68a1      	ldr	r1, [r4, #8]
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 fb45 	bl	800b41c <_vfiprintf_r>
 800ad92:	b002      	add	sp, #8
 800ad94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad98:	b004      	add	sp, #16
 800ad9a:	4770      	bx	lr
 800ad9c:	240006bc 	.word	0x240006bc

0800ada0 <_puts_r>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	460e      	mov	r6, r1
 800ada4:	4605      	mov	r5, r0
 800ada6:	b118      	cbz	r0, 800adb0 <_puts_r+0x10>
 800ada8:	6983      	ldr	r3, [r0, #24]
 800adaa:	b90b      	cbnz	r3, 800adb0 <_puts_r+0x10>
 800adac:	f000 fa1c 	bl	800b1e8 <__sinit>
 800adb0:	69ab      	ldr	r3, [r5, #24]
 800adb2:	68ac      	ldr	r4, [r5, #8]
 800adb4:	b913      	cbnz	r3, 800adbc <_puts_r+0x1c>
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 fa16 	bl	800b1e8 <__sinit>
 800adbc:	4b23      	ldr	r3, [pc, #140]	; (800ae4c <_puts_r+0xac>)
 800adbe:	429c      	cmp	r4, r3
 800adc0:	d117      	bne.n	800adf2 <_puts_r+0x52>
 800adc2:	686c      	ldr	r4, [r5, #4]
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	071b      	lsls	r3, r3, #28
 800adc8:	d51d      	bpl.n	800ae06 <_puts_r+0x66>
 800adca:	6923      	ldr	r3, [r4, #16]
 800adcc:	b1db      	cbz	r3, 800ae06 <_puts_r+0x66>
 800adce:	3e01      	subs	r6, #1
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800add6:	3b01      	subs	r3, #1
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	b9e9      	cbnz	r1, 800ae18 <_puts_r+0x78>
 800addc:	2b00      	cmp	r3, #0
 800adde:	da2e      	bge.n	800ae3e <_puts_r+0x9e>
 800ade0:	4622      	mov	r2, r4
 800ade2:	210a      	movs	r1, #10
 800ade4:	4628      	mov	r0, r5
 800ade6:	f000 f84f 	bl	800ae88 <__swbuf_r>
 800adea:	3001      	adds	r0, #1
 800adec:	d011      	beq.n	800ae12 <_puts_r+0x72>
 800adee:	200a      	movs	r0, #10
 800adf0:	e011      	b.n	800ae16 <_puts_r+0x76>
 800adf2:	4b17      	ldr	r3, [pc, #92]	; (800ae50 <_puts_r+0xb0>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	d101      	bne.n	800adfc <_puts_r+0x5c>
 800adf8:	68ac      	ldr	r4, [r5, #8]
 800adfa:	e7e3      	b.n	800adc4 <_puts_r+0x24>
 800adfc:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <_puts_r+0xb4>)
 800adfe:	429c      	cmp	r4, r3
 800ae00:	bf08      	it	eq
 800ae02:	68ec      	ldreq	r4, [r5, #12]
 800ae04:	e7de      	b.n	800adc4 <_puts_r+0x24>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 f88f 	bl	800af2c <__swsetup_r>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d0dd      	beq.n	800adce <_puts_r+0x2e>
 800ae12:	f04f 30ff 	mov.w	r0, #4294967295
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	da04      	bge.n	800ae26 <_puts_r+0x86>
 800ae1c:	69a2      	ldr	r2, [r4, #24]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	dc06      	bgt.n	800ae30 <_puts_r+0x90>
 800ae22:	290a      	cmp	r1, #10
 800ae24:	d004      	beq.n	800ae30 <_puts_r+0x90>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	6022      	str	r2, [r4, #0]
 800ae2c:	7019      	strb	r1, [r3, #0]
 800ae2e:	e7cf      	b.n	800add0 <_puts_r+0x30>
 800ae30:	4622      	mov	r2, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f828 	bl	800ae88 <__swbuf_r>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	d1c9      	bne.n	800add0 <_puts_r+0x30>
 800ae3c:	e7e9      	b.n	800ae12 <_puts_r+0x72>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	200a      	movs	r0, #10
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	6022      	str	r2, [r4, #0]
 800ae46:	7018      	strb	r0, [r3, #0]
 800ae48:	e7e5      	b.n	800ae16 <_puts_r+0x76>
 800ae4a:	bf00      	nop
 800ae4c:	0800e774 	.word	0x0800e774
 800ae50:	0800e794 	.word	0x0800e794
 800ae54:	0800e754 	.word	0x0800e754

0800ae58 <puts>:
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <puts+0xc>)
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7ff bf9f 	b.w	800ada0 <_puts_r>
 800ae62:	bf00      	nop
 800ae64:	240006bc 	.word	0x240006bc

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4c06      	ldr	r4, [pc, #24]	; (800ae84 <_sbrk_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	f7f6 f9d8 	bl	8001228 <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	24005250 	.word	0x24005250

0800ae88 <__swbuf_r>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	460e      	mov	r6, r1
 800ae8c:	4614      	mov	r4, r2
 800ae8e:	4605      	mov	r5, r0
 800ae90:	b118      	cbz	r0, 800ae9a <__swbuf_r+0x12>
 800ae92:	6983      	ldr	r3, [r0, #24]
 800ae94:	b90b      	cbnz	r3, 800ae9a <__swbuf_r+0x12>
 800ae96:	f000 f9a7 	bl	800b1e8 <__sinit>
 800ae9a:	4b21      	ldr	r3, [pc, #132]	; (800af20 <__swbuf_r+0x98>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d12a      	bne.n	800aef6 <__swbuf_r+0x6e>
 800aea0:	686c      	ldr	r4, [r5, #4]
 800aea2:	69a3      	ldr	r3, [r4, #24]
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	071a      	lsls	r2, r3, #28
 800aeaa:	d52e      	bpl.n	800af0a <__swbuf_r+0x82>
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	b363      	cbz	r3, 800af0a <__swbuf_r+0x82>
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	6963      	ldr	r3, [r4, #20]
 800aeb8:	b2f6      	uxtb	r6, r6
 800aeba:	4283      	cmp	r3, r0
 800aebc:	4637      	mov	r7, r6
 800aebe:	dc04      	bgt.n	800aeca <__swbuf_r+0x42>
 800aec0:	4621      	mov	r1, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f926 	bl	800b114 <_fflush_r>
 800aec8:	bb28      	cbnz	r0, 800af16 <__swbuf_r+0x8e>
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	3b01      	subs	r3, #1
 800aece:	60a3      	str	r3, [r4, #8]
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	701e      	strb	r6, [r3, #0]
 800aed8:	6963      	ldr	r3, [r4, #20]
 800aeda:	3001      	adds	r0, #1
 800aedc:	4283      	cmp	r3, r0
 800aede:	d004      	beq.n	800aeea <__swbuf_r+0x62>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	07db      	lsls	r3, r3, #31
 800aee4:	d519      	bpl.n	800af1a <__swbuf_r+0x92>
 800aee6:	2e0a      	cmp	r6, #10
 800aee8:	d117      	bne.n	800af1a <__swbuf_r+0x92>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f911 	bl	800b114 <_fflush_r>
 800aef2:	b190      	cbz	r0, 800af1a <__swbuf_r+0x92>
 800aef4:	e00f      	b.n	800af16 <__swbuf_r+0x8e>
 800aef6:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <__swbuf_r+0x9c>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	d101      	bne.n	800af00 <__swbuf_r+0x78>
 800aefc:	68ac      	ldr	r4, [r5, #8]
 800aefe:	e7d0      	b.n	800aea2 <__swbuf_r+0x1a>
 800af00:	4b09      	ldr	r3, [pc, #36]	; (800af28 <__swbuf_r+0xa0>)
 800af02:	429c      	cmp	r4, r3
 800af04:	bf08      	it	eq
 800af06:	68ec      	ldreq	r4, [r5, #12]
 800af08:	e7cb      	b.n	800aea2 <__swbuf_r+0x1a>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4628      	mov	r0, r5
 800af0e:	f000 f80d 	bl	800af2c <__swsetup_r>
 800af12:	2800      	cmp	r0, #0
 800af14:	d0cc      	beq.n	800aeb0 <__swbuf_r+0x28>
 800af16:	f04f 37ff 	mov.w	r7, #4294967295
 800af1a:	4638      	mov	r0, r7
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1e:	bf00      	nop
 800af20:	0800e774 	.word	0x0800e774
 800af24:	0800e794 	.word	0x0800e794
 800af28:	0800e754 	.word	0x0800e754

0800af2c <__swsetup_r>:
 800af2c:	4b32      	ldr	r3, [pc, #200]	; (800aff8 <__swsetup_r+0xcc>)
 800af2e:	b570      	push	{r4, r5, r6, lr}
 800af30:	681d      	ldr	r5, [r3, #0]
 800af32:	4606      	mov	r6, r0
 800af34:	460c      	mov	r4, r1
 800af36:	b125      	cbz	r5, 800af42 <__swsetup_r+0x16>
 800af38:	69ab      	ldr	r3, [r5, #24]
 800af3a:	b913      	cbnz	r3, 800af42 <__swsetup_r+0x16>
 800af3c:	4628      	mov	r0, r5
 800af3e:	f000 f953 	bl	800b1e8 <__sinit>
 800af42:	4b2e      	ldr	r3, [pc, #184]	; (800affc <__swsetup_r+0xd0>)
 800af44:	429c      	cmp	r4, r3
 800af46:	d10f      	bne.n	800af68 <__swsetup_r+0x3c>
 800af48:	686c      	ldr	r4, [r5, #4]
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	b29a      	uxth	r2, r3
 800af50:	0715      	lsls	r5, r2, #28
 800af52:	d42c      	bmi.n	800afae <__swsetup_r+0x82>
 800af54:	06d0      	lsls	r0, r2, #27
 800af56:	d411      	bmi.n	800af7c <__swsetup_r+0x50>
 800af58:	2209      	movs	r2, #9
 800af5a:	6032      	str	r2, [r6, #0]
 800af5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	f04f 30ff 	mov.w	r0, #4294967295
 800af66:	e03e      	b.n	800afe6 <__swsetup_r+0xba>
 800af68:	4b25      	ldr	r3, [pc, #148]	; (800b000 <__swsetup_r+0xd4>)
 800af6a:	429c      	cmp	r4, r3
 800af6c:	d101      	bne.n	800af72 <__swsetup_r+0x46>
 800af6e:	68ac      	ldr	r4, [r5, #8]
 800af70:	e7eb      	b.n	800af4a <__swsetup_r+0x1e>
 800af72:	4b24      	ldr	r3, [pc, #144]	; (800b004 <__swsetup_r+0xd8>)
 800af74:	429c      	cmp	r4, r3
 800af76:	bf08      	it	eq
 800af78:	68ec      	ldreq	r4, [r5, #12]
 800af7a:	e7e6      	b.n	800af4a <__swsetup_r+0x1e>
 800af7c:	0751      	lsls	r1, r2, #29
 800af7e:	d512      	bpl.n	800afa6 <__swsetup_r+0x7a>
 800af80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af82:	b141      	cbz	r1, 800af96 <__swsetup_r+0x6a>
 800af84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af88:	4299      	cmp	r1, r3
 800af8a:	d002      	beq.n	800af92 <__swsetup_r+0x66>
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff fe47 	bl	800ac20 <_free_r>
 800af92:	2300      	movs	r3, #0
 800af94:	6363      	str	r3, [r4, #52]	; 0x34
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af9c:	81a3      	strh	r3, [r4, #12]
 800af9e:	2300      	movs	r3, #0
 800afa0:	6063      	str	r3, [r4, #4]
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	f043 0308 	orr.w	r3, r3, #8
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	b94b      	cbnz	r3, 800afc6 <__swsetup_r+0x9a>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afbc:	d003      	beq.n	800afc6 <__swsetup_r+0x9a>
 800afbe:	4621      	mov	r1, r4
 800afc0:	4630      	mov	r0, r6
 800afc2:	f000 f9bf 	bl	800b344 <__smakebuf_r>
 800afc6:	89a2      	ldrh	r2, [r4, #12]
 800afc8:	f012 0301 	ands.w	r3, r2, #1
 800afcc:	d00c      	beq.n	800afe8 <__swsetup_r+0xbc>
 800afce:	2300      	movs	r3, #0
 800afd0:	60a3      	str	r3, [r4, #8]
 800afd2:	6963      	ldr	r3, [r4, #20]
 800afd4:	425b      	negs	r3, r3
 800afd6:	61a3      	str	r3, [r4, #24]
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	b953      	cbnz	r3, 800aff2 <__swsetup_r+0xc6>
 800afdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800afe4:	d1ba      	bne.n	800af5c <__swsetup_r+0x30>
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	0792      	lsls	r2, r2, #30
 800afea:	bf58      	it	pl
 800afec:	6963      	ldrpl	r3, [r4, #20]
 800afee:	60a3      	str	r3, [r4, #8]
 800aff0:	e7f2      	b.n	800afd8 <__swsetup_r+0xac>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e7f7      	b.n	800afe6 <__swsetup_r+0xba>
 800aff6:	bf00      	nop
 800aff8:	240006bc 	.word	0x240006bc
 800affc:	0800e774 	.word	0x0800e774
 800b000:	0800e794 	.word	0x0800e794
 800b004:	0800e754 	.word	0x0800e754

0800b008 <__sflush_r>:
 800b008:	898a      	ldrh	r2, [r1, #12]
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	4605      	mov	r5, r0
 800b010:	0710      	lsls	r0, r2, #28
 800b012:	460c      	mov	r4, r1
 800b014:	d458      	bmi.n	800b0c8 <__sflush_r+0xc0>
 800b016:	684b      	ldr	r3, [r1, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dc05      	bgt.n	800b028 <__sflush_r+0x20>
 800b01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dc02      	bgt.n	800b028 <__sflush_r+0x20>
 800b022:	2000      	movs	r0, #0
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b02a:	2e00      	cmp	r6, #0
 800b02c:	d0f9      	beq.n	800b022 <__sflush_r+0x1a>
 800b02e:	2300      	movs	r3, #0
 800b030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b034:	682f      	ldr	r7, [r5, #0]
 800b036:	6a21      	ldr	r1, [r4, #32]
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	d032      	beq.n	800b0a2 <__sflush_r+0x9a>
 800b03c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	075a      	lsls	r2, r3, #29
 800b042:	d505      	bpl.n	800b050 <__sflush_r+0x48>
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	1ac0      	subs	r0, r0, r3
 800b048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b04a:	b10b      	cbz	r3, 800b050 <__sflush_r+0x48>
 800b04c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b04e:	1ac0      	subs	r0, r0, r3
 800b050:	2300      	movs	r3, #0
 800b052:	4602      	mov	r2, r0
 800b054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b056:	6a21      	ldr	r1, [r4, #32]
 800b058:	4628      	mov	r0, r5
 800b05a:	47b0      	blx	r6
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	d106      	bne.n	800b070 <__sflush_r+0x68>
 800b062:	6829      	ldr	r1, [r5, #0]
 800b064:	291d      	cmp	r1, #29
 800b066:	d848      	bhi.n	800b0fa <__sflush_r+0xf2>
 800b068:	4a29      	ldr	r2, [pc, #164]	; (800b110 <__sflush_r+0x108>)
 800b06a:	40ca      	lsrs	r2, r1
 800b06c:	07d6      	lsls	r6, r2, #31
 800b06e:	d544      	bpl.n	800b0fa <__sflush_r+0xf2>
 800b070:	2200      	movs	r2, #0
 800b072:	6062      	str	r2, [r4, #4]
 800b074:	04d9      	lsls	r1, r3, #19
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	6022      	str	r2, [r4, #0]
 800b07a:	d504      	bpl.n	800b086 <__sflush_r+0x7e>
 800b07c:	1c42      	adds	r2, r0, #1
 800b07e:	d101      	bne.n	800b084 <__sflush_r+0x7c>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b903      	cbnz	r3, 800b086 <__sflush_r+0x7e>
 800b084:	6560      	str	r0, [r4, #84]	; 0x54
 800b086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b088:	602f      	str	r7, [r5, #0]
 800b08a:	2900      	cmp	r1, #0
 800b08c:	d0c9      	beq.n	800b022 <__sflush_r+0x1a>
 800b08e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b092:	4299      	cmp	r1, r3
 800b094:	d002      	beq.n	800b09c <__sflush_r+0x94>
 800b096:	4628      	mov	r0, r5
 800b098:	f7ff fdc2 	bl	800ac20 <_free_r>
 800b09c:	2000      	movs	r0, #0
 800b09e:	6360      	str	r0, [r4, #52]	; 0x34
 800b0a0:	e7c0      	b.n	800b024 <__sflush_r+0x1c>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b0      	blx	r6
 800b0a8:	1c41      	adds	r1, r0, #1
 800b0aa:	d1c8      	bne.n	800b03e <__sflush_r+0x36>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0c5      	beq.n	800b03e <__sflush_r+0x36>
 800b0b2:	2b1d      	cmp	r3, #29
 800b0b4:	d001      	beq.n	800b0ba <__sflush_r+0xb2>
 800b0b6:	2b16      	cmp	r3, #22
 800b0b8:	d101      	bne.n	800b0be <__sflush_r+0xb6>
 800b0ba:	602f      	str	r7, [r5, #0]
 800b0bc:	e7b1      	b.n	800b022 <__sflush_r+0x1a>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c4:	81a3      	strh	r3, [r4, #12]
 800b0c6:	e7ad      	b.n	800b024 <__sflush_r+0x1c>
 800b0c8:	690f      	ldr	r7, [r1, #16]
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d0a9      	beq.n	800b022 <__sflush_r+0x1a>
 800b0ce:	0793      	lsls	r3, r2, #30
 800b0d0:	680e      	ldr	r6, [r1, #0]
 800b0d2:	bf08      	it	eq
 800b0d4:	694b      	ldreq	r3, [r1, #20]
 800b0d6:	600f      	str	r7, [r1, #0]
 800b0d8:	bf18      	it	ne
 800b0da:	2300      	movne	r3, #0
 800b0dc:	eba6 0807 	sub.w	r8, r6, r7
 800b0e0:	608b      	str	r3, [r1, #8]
 800b0e2:	f1b8 0f00 	cmp.w	r8, #0
 800b0e6:	dd9c      	ble.n	800b022 <__sflush_r+0x1a>
 800b0e8:	4643      	mov	r3, r8
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	6a21      	ldr	r1, [r4, #32]
 800b0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b0      	blx	r6
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	dc06      	bgt.n	800b106 <__sflush_r+0xfe>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	f04f 30ff 	mov.w	r0, #4294967295
 800b104:	e78e      	b.n	800b024 <__sflush_r+0x1c>
 800b106:	4407      	add	r7, r0
 800b108:	eba8 0800 	sub.w	r8, r8, r0
 800b10c:	e7e9      	b.n	800b0e2 <__sflush_r+0xda>
 800b10e:	bf00      	nop
 800b110:	20400001 	.word	0x20400001

0800b114 <_fflush_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	690b      	ldr	r3, [r1, #16]
 800b118:	4605      	mov	r5, r0
 800b11a:	460c      	mov	r4, r1
 800b11c:	b1db      	cbz	r3, 800b156 <_fflush_r+0x42>
 800b11e:	b118      	cbz	r0, 800b128 <_fflush_r+0x14>
 800b120:	6983      	ldr	r3, [r0, #24]
 800b122:	b90b      	cbnz	r3, 800b128 <_fflush_r+0x14>
 800b124:	f000 f860 	bl	800b1e8 <__sinit>
 800b128:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <_fflush_r+0x48>)
 800b12a:	429c      	cmp	r4, r3
 800b12c:	d109      	bne.n	800b142 <_fflush_r+0x2e>
 800b12e:	686c      	ldr	r4, [r5, #4]
 800b130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b134:	b17b      	cbz	r3, 800b156 <_fflush_r+0x42>
 800b136:	4621      	mov	r1, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13e:	f7ff bf63 	b.w	800b008 <__sflush_r>
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <_fflush_r+0x4c>)
 800b144:	429c      	cmp	r4, r3
 800b146:	d101      	bne.n	800b14c <_fflush_r+0x38>
 800b148:	68ac      	ldr	r4, [r5, #8]
 800b14a:	e7f1      	b.n	800b130 <_fflush_r+0x1c>
 800b14c:	4b05      	ldr	r3, [pc, #20]	; (800b164 <_fflush_r+0x50>)
 800b14e:	429c      	cmp	r4, r3
 800b150:	bf08      	it	eq
 800b152:	68ec      	ldreq	r4, [r5, #12]
 800b154:	e7ec      	b.n	800b130 <_fflush_r+0x1c>
 800b156:	2000      	movs	r0, #0
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	0800e774 	.word	0x0800e774
 800b160:	0800e794 	.word	0x0800e794
 800b164:	0800e754 	.word	0x0800e754

0800b168 <std>:
 800b168:	2300      	movs	r3, #0
 800b16a:	b510      	push	{r4, lr}
 800b16c:	4604      	mov	r4, r0
 800b16e:	e9c0 3300 	strd	r3, r3, [r0]
 800b172:	6083      	str	r3, [r0, #8]
 800b174:	8181      	strh	r1, [r0, #12]
 800b176:	6643      	str	r3, [r0, #100]	; 0x64
 800b178:	81c2      	strh	r2, [r0, #14]
 800b17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b17e:	6183      	str	r3, [r0, #24]
 800b180:	4619      	mov	r1, r3
 800b182:	2208      	movs	r2, #8
 800b184:	305c      	adds	r0, #92	; 0x5c
 800b186:	f7ff fd42 	bl	800ac0e <memset>
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <std+0x38>)
 800b18c:	6263      	str	r3, [r4, #36]	; 0x24
 800b18e:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <std+0x3c>)
 800b190:	62a3      	str	r3, [r4, #40]	; 0x28
 800b192:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <std+0x40>)
 800b194:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b196:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <std+0x44>)
 800b198:	6224      	str	r4, [r4, #32]
 800b19a:	6323      	str	r3, [r4, #48]	; 0x30
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	bf00      	nop
 800b1a0:	0800b959 	.word	0x0800b959
 800b1a4:	0800b97b 	.word	0x0800b97b
 800b1a8:	0800b9b3 	.word	0x0800b9b3
 800b1ac:	0800b9d7 	.word	0x0800b9d7

0800b1b0 <_cleanup_r>:
 800b1b0:	4901      	ldr	r1, [pc, #4]	; (800b1b8 <_cleanup_r+0x8>)
 800b1b2:	f000 b885 	b.w	800b2c0 <_fwalk_reent>
 800b1b6:	bf00      	nop
 800b1b8:	0800b115 	.word	0x0800b115

0800b1bc <__sfmoreglue>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	1e4a      	subs	r2, r1, #1
 800b1c0:	2568      	movs	r5, #104	; 0x68
 800b1c2:	4355      	muls	r5, r2
 800b1c4:	460e      	mov	r6, r1
 800b1c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ca:	f7ff fd77 	bl	800acbc <_malloc_r>
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	b140      	cbz	r0, 800b1e4 <__sfmoreglue+0x28>
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1d8:	300c      	adds	r0, #12
 800b1da:	60a0      	str	r0, [r4, #8]
 800b1dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1e0:	f7ff fd15 	bl	800ac0e <memset>
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}

0800b1e8 <__sinit>:
 800b1e8:	6983      	ldr	r3, [r0, #24]
 800b1ea:	b510      	push	{r4, lr}
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	bb33      	cbnz	r3, 800b23e <__sinit+0x56>
 800b1f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b1f4:	6503      	str	r3, [r0, #80]	; 0x50
 800b1f6:	4b12      	ldr	r3, [pc, #72]	; (800b240 <__sinit+0x58>)
 800b1f8:	4a12      	ldr	r2, [pc, #72]	; (800b244 <__sinit+0x5c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6282      	str	r2, [r0, #40]	; 0x28
 800b1fe:	4298      	cmp	r0, r3
 800b200:	bf04      	itt	eq
 800b202:	2301      	moveq	r3, #1
 800b204:	6183      	streq	r3, [r0, #24]
 800b206:	f000 f81f 	bl	800b248 <__sfp>
 800b20a:	6060      	str	r0, [r4, #4]
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 f81b 	bl	800b248 <__sfp>
 800b212:	60a0      	str	r0, [r4, #8]
 800b214:	4620      	mov	r0, r4
 800b216:	f000 f817 	bl	800b248 <__sfp>
 800b21a:	2200      	movs	r2, #0
 800b21c:	60e0      	str	r0, [r4, #12]
 800b21e:	2104      	movs	r1, #4
 800b220:	6860      	ldr	r0, [r4, #4]
 800b222:	f7ff ffa1 	bl	800b168 <std>
 800b226:	2201      	movs	r2, #1
 800b228:	2109      	movs	r1, #9
 800b22a:	68a0      	ldr	r0, [r4, #8]
 800b22c:	f7ff ff9c 	bl	800b168 <std>
 800b230:	2202      	movs	r2, #2
 800b232:	2112      	movs	r1, #18
 800b234:	68e0      	ldr	r0, [r4, #12]
 800b236:	f7ff ff97 	bl	800b168 <std>
 800b23a:	2301      	movs	r3, #1
 800b23c:	61a3      	str	r3, [r4, #24]
 800b23e:	bd10      	pop	{r4, pc}
 800b240:	0800e750 	.word	0x0800e750
 800b244:	0800b1b1 	.word	0x0800b1b1

0800b248 <__sfp>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <__sfp+0x70>)
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	69b3      	ldr	r3, [r6, #24]
 800b250:	4607      	mov	r7, r0
 800b252:	b913      	cbnz	r3, 800b25a <__sfp+0x12>
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff ffc7 	bl	800b1e8 <__sinit>
 800b25a:	3648      	adds	r6, #72	; 0x48
 800b25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b260:	3b01      	subs	r3, #1
 800b262:	d503      	bpl.n	800b26c <__sfp+0x24>
 800b264:	6833      	ldr	r3, [r6, #0]
 800b266:	b133      	cbz	r3, 800b276 <__sfp+0x2e>
 800b268:	6836      	ldr	r6, [r6, #0]
 800b26a:	e7f7      	b.n	800b25c <__sfp+0x14>
 800b26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b270:	b16d      	cbz	r5, 800b28e <__sfp+0x46>
 800b272:	3468      	adds	r4, #104	; 0x68
 800b274:	e7f4      	b.n	800b260 <__sfp+0x18>
 800b276:	2104      	movs	r1, #4
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff ff9f 	bl	800b1bc <__sfmoreglue>
 800b27e:	6030      	str	r0, [r6, #0]
 800b280:	2800      	cmp	r0, #0
 800b282:	d1f1      	bne.n	800b268 <__sfp+0x20>
 800b284:	230c      	movs	r3, #12
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4604      	mov	r4, r0
 800b28a:	4620      	mov	r0, r4
 800b28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28e:	4b0b      	ldr	r3, [pc, #44]	; (800b2bc <__sfp+0x74>)
 800b290:	6665      	str	r5, [r4, #100]	; 0x64
 800b292:	e9c4 5500 	strd	r5, r5, [r4]
 800b296:	60a5      	str	r5, [r4, #8]
 800b298:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b29c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2a8:	f7ff fcb1 	bl	800ac0e <memset>
 800b2ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2b4:	e7e9      	b.n	800b28a <__sfp+0x42>
 800b2b6:	bf00      	nop
 800b2b8:	0800e750 	.word	0x0800e750
 800b2bc:	ffff0001 	.word	0xffff0001

0800b2c0 <_fwalk_reent>:
 800b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
 800b2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2cc:	2600      	movs	r6, #0
 800b2ce:	b914      	cbnz	r4, 800b2d6 <_fwalk_reent+0x16>
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b2da:	3f01      	subs	r7, #1
 800b2dc:	d501      	bpl.n	800b2e2 <_fwalk_reent+0x22>
 800b2de:	6824      	ldr	r4, [r4, #0]
 800b2e0:	e7f5      	b.n	800b2ce <_fwalk_reent+0xe>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d907      	bls.n	800b2f8 <_fwalk_reent+0x38>
 800b2e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	d003      	beq.n	800b2f8 <_fwalk_reent+0x38>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	47c8      	blx	r9
 800b2f6:	4306      	orrs	r6, r0
 800b2f8:	3568      	adds	r5, #104	; 0x68
 800b2fa:	e7ee      	b.n	800b2da <_fwalk_reent+0x1a>

0800b2fc <__swhatbuf_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	460e      	mov	r6, r1
 800b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b304:	2900      	cmp	r1, #0
 800b306:	b096      	sub	sp, #88	; 0x58
 800b308:	4614      	mov	r4, r2
 800b30a:	461d      	mov	r5, r3
 800b30c:	da07      	bge.n	800b31e <__swhatbuf_r+0x22>
 800b30e:	2300      	movs	r3, #0
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	89b3      	ldrh	r3, [r6, #12]
 800b314:	061a      	lsls	r2, r3, #24
 800b316:	d410      	bmi.n	800b33a <__swhatbuf_r+0x3e>
 800b318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31c:	e00e      	b.n	800b33c <__swhatbuf_r+0x40>
 800b31e:	466a      	mov	r2, sp
 800b320:	f000 fb80 	bl	800ba24 <_fstat_r>
 800b324:	2800      	cmp	r0, #0
 800b326:	dbf2      	blt.n	800b30e <__swhatbuf_r+0x12>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b32e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b332:	425a      	negs	r2, r3
 800b334:	415a      	adcs	r2, r3
 800b336:	602a      	str	r2, [r5, #0]
 800b338:	e7ee      	b.n	800b318 <__swhatbuf_r+0x1c>
 800b33a:	2340      	movs	r3, #64	; 0x40
 800b33c:	2000      	movs	r0, #0
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	b016      	add	sp, #88	; 0x58
 800b342:	bd70      	pop	{r4, r5, r6, pc}

0800b344 <__smakebuf_r>:
 800b344:	898b      	ldrh	r3, [r1, #12]
 800b346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b348:	079d      	lsls	r5, r3, #30
 800b34a:	4606      	mov	r6, r0
 800b34c:	460c      	mov	r4, r1
 800b34e:	d507      	bpl.n	800b360 <__smakebuf_r+0x1c>
 800b350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	6123      	str	r3, [r4, #16]
 800b358:	2301      	movs	r3, #1
 800b35a:	6163      	str	r3, [r4, #20]
 800b35c:	b002      	add	sp, #8
 800b35e:	bd70      	pop	{r4, r5, r6, pc}
 800b360:	ab01      	add	r3, sp, #4
 800b362:	466a      	mov	r2, sp
 800b364:	f7ff ffca 	bl	800b2fc <__swhatbuf_r>
 800b368:	9900      	ldr	r1, [sp, #0]
 800b36a:	4605      	mov	r5, r0
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7ff fca5 	bl	800acbc <_malloc_r>
 800b372:	b948      	cbnz	r0, 800b388 <__smakebuf_r+0x44>
 800b374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d4ef      	bmi.n	800b35c <__smakebuf_r+0x18>
 800b37c:	f023 0303 	bic.w	r3, r3, #3
 800b380:	f043 0302 	orr.w	r3, r3, #2
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	e7e3      	b.n	800b350 <__smakebuf_r+0xc>
 800b388:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <__smakebuf_r+0x7c>)
 800b38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	6020      	str	r0, [r4, #0]
 800b390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	6163      	str	r3, [r4, #20]
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	6120      	str	r0, [r4, #16]
 800b39e:	b15b      	cbz	r3, 800b3b8 <__smakebuf_r+0x74>
 800b3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 fb4f 	bl	800ba48 <_isatty_r>
 800b3aa:	b128      	cbz	r0, 800b3b8 <__smakebuf_r+0x74>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	431d      	orrs	r5, r3
 800b3bc:	81a5      	strh	r5, [r4, #12]
 800b3be:	e7cd      	b.n	800b35c <__smakebuf_r+0x18>
 800b3c0:	0800b1b1 	.word	0x0800b1b1

0800b3c4 <__malloc_lock>:
 800b3c4:	4770      	bx	lr

0800b3c6 <__malloc_unlock>:
 800b3c6:	4770      	bx	lr

0800b3c8 <__sfputc_r>:
 800b3c8:	6893      	ldr	r3, [r2, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	b410      	push	{r4}
 800b3d0:	6093      	str	r3, [r2, #8]
 800b3d2:	da08      	bge.n	800b3e6 <__sfputc_r+0x1e>
 800b3d4:	6994      	ldr	r4, [r2, #24]
 800b3d6:	42a3      	cmp	r3, r4
 800b3d8:	db01      	blt.n	800b3de <__sfputc_r+0x16>
 800b3da:	290a      	cmp	r1, #10
 800b3dc:	d103      	bne.n	800b3e6 <__sfputc_r+0x1e>
 800b3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e2:	f7ff bd51 	b.w	800ae88 <__swbuf_r>
 800b3e6:	6813      	ldr	r3, [r2, #0]
 800b3e8:	1c58      	adds	r0, r3, #1
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	7019      	strb	r1, [r3, #0]
 800b3ee:	4608      	mov	r0, r1
 800b3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <__sfputs_r>:
 800b3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	460f      	mov	r7, r1
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	18d5      	adds	r5, r2, r3
 800b400:	42ac      	cmp	r4, r5
 800b402:	d101      	bne.n	800b408 <__sfputs_r+0x12>
 800b404:	2000      	movs	r0, #0
 800b406:	e007      	b.n	800b418 <__sfputs_r+0x22>
 800b408:	463a      	mov	r2, r7
 800b40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40e:	4630      	mov	r0, r6
 800b410:	f7ff ffda 	bl	800b3c8 <__sfputc_r>
 800b414:	1c43      	adds	r3, r0, #1
 800b416:	d1f3      	bne.n	800b400 <__sfputs_r+0xa>
 800b418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b41c <_vfiprintf_r>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	460c      	mov	r4, r1
 800b422:	b09d      	sub	sp, #116	; 0x74
 800b424:	4617      	mov	r7, r2
 800b426:	461d      	mov	r5, r3
 800b428:	4606      	mov	r6, r0
 800b42a:	b118      	cbz	r0, 800b434 <_vfiprintf_r+0x18>
 800b42c:	6983      	ldr	r3, [r0, #24]
 800b42e:	b90b      	cbnz	r3, 800b434 <_vfiprintf_r+0x18>
 800b430:	f7ff feda 	bl	800b1e8 <__sinit>
 800b434:	4b7c      	ldr	r3, [pc, #496]	; (800b628 <_vfiprintf_r+0x20c>)
 800b436:	429c      	cmp	r4, r3
 800b438:	d158      	bne.n	800b4ec <_vfiprintf_r+0xd0>
 800b43a:	6874      	ldr	r4, [r6, #4]
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	0718      	lsls	r0, r3, #28
 800b440:	d55e      	bpl.n	800b500 <_vfiprintf_r+0xe4>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05b      	beq.n	800b500 <_vfiprintf_r+0xe4>
 800b448:	2300      	movs	r3, #0
 800b44a:	9309      	str	r3, [sp, #36]	; 0x24
 800b44c:	2320      	movs	r3, #32
 800b44e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b452:	2330      	movs	r3, #48	; 0x30
 800b454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b458:	9503      	str	r5, [sp, #12]
 800b45a:	f04f 0b01 	mov.w	fp, #1
 800b45e:	46b8      	mov	r8, r7
 800b460:	4645      	mov	r5, r8
 800b462:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b466:	b10b      	cbz	r3, 800b46c <_vfiprintf_r+0x50>
 800b468:	2b25      	cmp	r3, #37	; 0x25
 800b46a:	d154      	bne.n	800b516 <_vfiprintf_r+0xfa>
 800b46c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b470:	d00b      	beq.n	800b48a <_vfiprintf_r+0x6e>
 800b472:	4653      	mov	r3, sl
 800b474:	463a      	mov	r2, r7
 800b476:	4621      	mov	r1, r4
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ffbc 	bl	800b3f6 <__sfputs_r>
 800b47e:	3001      	adds	r0, #1
 800b480:	f000 80c2 	beq.w	800b608 <_vfiprintf_r+0x1ec>
 800b484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b486:	4453      	add	r3, sl
 800b488:	9309      	str	r3, [sp, #36]	; 0x24
 800b48a:	f898 3000 	ldrb.w	r3, [r8]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 80ba 	beq.w	800b608 <_vfiprintf_r+0x1ec>
 800b494:	2300      	movs	r3, #0
 800b496:	f04f 32ff 	mov.w	r2, #4294967295
 800b49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4a8:	46a8      	mov	r8, r5
 800b4aa:	2205      	movs	r2, #5
 800b4ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b4b0:	485e      	ldr	r0, [pc, #376]	; (800b62c <_vfiprintf_r+0x210>)
 800b4b2:	f7f4 ff15 	bl	80002e0 <memchr>
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	bb78      	cbnz	r0, 800b51a <_vfiprintf_r+0xfe>
 800b4ba:	06d9      	lsls	r1, r3, #27
 800b4bc:	bf44      	itt	mi
 800b4be:	2220      	movmi	r2, #32
 800b4c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4c4:	071a      	lsls	r2, r3, #28
 800b4c6:	bf44      	itt	mi
 800b4c8:	222b      	movmi	r2, #43	; 0x2b
 800b4ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4ce:	782a      	ldrb	r2, [r5, #0]
 800b4d0:	2a2a      	cmp	r2, #42	; 0x2a
 800b4d2:	d02a      	beq.n	800b52a <_vfiprintf_r+0x10e>
 800b4d4:	9a07      	ldr	r2, [sp, #28]
 800b4d6:	46a8      	mov	r8, r5
 800b4d8:	2000      	movs	r0, #0
 800b4da:	250a      	movs	r5, #10
 800b4dc:	4641      	mov	r1, r8
 800b4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e2:	3b30      	subs	r3, #48	; 0x30
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	d969      	bls.n	800b5bc <_vfiprintf_r+0x1a0>
 800b4e8:	b360      	cbz	r0, 800b544 <_vfiprintf_r+0x128>
 800b4ea:	e024      	b.n	800b536 <_vfiprintf_r+0x11a>
 800b4ec:	4b50      	ldr	r3, [pc, #320]	; (800b630 <_vfiprintf_r+0x214>)
 800b4ee:	429c      	cmp	r4, r3
 800b4f0:	d101      	bne.n	800b4f6 <_vfiprintf_r+0xda>
 800b4f2:	68b4      	ldr	r4, [r6, #8]
 800b4f4:	e7a2      	b.n	800b43c <_vfiprintf_r+0x20>
 800b4f6:	4b4f      	ldr	r3, [pc, #316]	; (800b634 <_vfiprintf_r+0x218>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	bf08      	it	eq
 800b4fc:	68f4      	ldreq	r4, [r6, #12]
 800b4fe:	e79d      	b.n	800b43c <_vfiprintf_r+0x20>
 800b500:	4621      	mov	r1, r4
 800b502:	4630      	mov	r0, r6
 800b504:	f7ff fd12 	bl	800af2c <__swsetup_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d09d      	beq.n	800b448 <_vfiprintf_r+0x2c>
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	b01d      	add	sp, #116	; 0x74
 800b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b516:	46a8      	mov	r8, r5
 800b518:	e7a2      	b.n	800b460 <_vfiprintf_r+0x44>
 800b51a:	4a44      	ldr	r2, [pc, #272]	; (800b62c <_vfiprintf_r+0x210>)
 800b51c:	1a80      	subs	r0, r0, r2
 800b51e:	fa0b f000 	lsl.w	r0, fp, r0
 800b522:	4318      	orrs	r0, r3
 800b524:	9004      	str	r0, [sp, #16]
 800b526:	4645      	mov	r5, r8
 800b528:	e7be      	b.n	800b4a8 <_vfiprintf_r+0x8c>
 800b52a:	9a03      	ldr	r2, [sp, #12]
 800b52c:	1d11      	adds	r1, r2, #4
 800b52e:	6812      	ldr	r2, [r2, #0]
 800b530:	9103      	str	r1, [sp, #12]
 800b532:	2a00      	cmp	r2, #0
 800b534:	db01      	blt.n	800b53a <_vfiprintf_r+0x11e>
 800b536:	9207      	str	r2, [sp, #28]
 800b538:	e004      	b.n	800b544 <_vfiprintf_r+0x128>
 800b53a:	4252      	negs	r2, r2
 800b53c:	f043 0302 	orr.w	r3, r3, #2
 800b540:	9207      	str	r2, [sp, #28]
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	f898 3000 	ldrb.w	r3, [r8]
 800b548:	2b2e      	cmp	r3, #46	; 0x2e
 800b54a:	d10e      	bne.n	800b56a <_vfiprintf_r+0x14e>
 800b54c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b550:	2b2a      	cmp	r3, #42	; 0x2a
 800b552:	d138      	bne.n	800b5c6 <_vfiprintf_r+0x1aa>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	1d1a      	adds	r2, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb8      	it	lt
 800b560:	f04f 33ff 	movlt.w	r3, #4294967295
 800b564:	f108 0802 	add.w	r8, r8, #2
 800b568:	9305      	str	r3, [sp, #20]
 800b56a:	4d33      	ldr	r5, [pc, #204]	; (800b638 <_vfiprintf_r+0x21c>)
 800b56c:	f898 1000 	ldrb.w	r1, [r8]
 800b570:	2203      	movs	r2, #3
 800b572:	4628      	mov	r0, r5
 800b574:	f7f4 feb4 	bl	80002e0 <memchr>
 800b578:	b140      	cbz	r0, 800b58c <_vfiprintf_r+0x170>
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	1b40      	subs	r0, r0, r5
 800b57e:	fa03 f000 	lsl.w	r0, r3, r0
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	4303      	orrs	r3, r0
 800b586:	f108 0801 	add.w	r8, r8, #1
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	f898 1000 	ldrb.w	r1, [r8]
 800b590:	482a      	ldr	r0, [pc, #168]	; (800b63c <_vfiprintf_r+0x220>)
 800b592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b596:	2206      	movs	r2, #6
 800b598:	f108 0701 	add.w	r7, r8, #1
 800b59c:	f7f4 fea0 	bl	80002e0 <memchr>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d037      	beq.n	800b614 <_vfiprintf_r+0x1f8>
 800b5a4:	4b26      	ldr	r3, [pc, #152]	; (800b640 <_vfiprintf_r+0x224>)
 800b5a6:	bb1b      	cbnz	r3, 800b5f0 <_vfiprintf_r+0x1d4>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	3307      	adds	r3, #7
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b6:	444b      	add	r3, r9
 800b5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ba:	e750      	b.n	800b45e <_vfiprintf_r+0x42>
 800b5bc:	fb05 3202 	mla	r2, r5, r2, r3
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	4688      	mov	r8, r1
 800b5c4:	e78a      	b.n	800b4dc <_vfiprintf_r+0xc0>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f108 0801 	add.w	r8, r8, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	250a      	movs	r5, #10
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d8:	3a30      	subs	r2, #48	; 0x30
 800b5da:	2a09      	cmp	r2, #9
 800b5dc:	d903      	bls.n	800b5e6 <_vfiprintf_r+0x1ca>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0c3      	beq.n	800b56a <_vfiprintf_r+0x14e>
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	e7c1      	b.n	800b56a <_vfiprintf_r+0x14e>
 800b5e6:	fb05 2101 	mla	r1, r5, r1, r2
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4680      	mov	r8, r0
 800b5ee:	e7f0      	b.n	800b5d2 <_vfiprintf_r+0x1b6>
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4b13      	ldr	r3, [pc, #76]	; (800b644 <_vfiprintf_r+0x228>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f3af 8000 	nop.w
 800b600:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b604:	4681      	mov	r9, r0
 800b606:	d1d5      	bne.n	800b5b4 <_vfiprintf_r+0x198>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	065b      	lsls	r3, r3, #25
 800b60c:	f53f af7e 	bmi.w	800b50c <_vfiprintf_r+0xf0>
 800b610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b612:	e77d      	b.n	800b510 <_vfiprintf_r+0xf4>
 800b614:	ab03      	add	r3, sp, #12
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	4622      	mov	r2, r4
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <_vfiprintf_r+0x228>)
 800b61c:	a904      	add	r1, sp, #16
 800b61e:	4630      	mov	r0, r6
 800b620:	f000 f888 	bl	800b734 <_printf_i>
 800b624:	e7ec      	b.n	800b600 <_vfiprintf_r+0x1e4>
 800b626:	bf00      	nop
 800b628:	0800e774 	.word	0x0800e774
 800b62c:	0800e7b4 	.word	0x0800e7b4
 800b630:	0800e794 	.word	0x0800e794
 800b634:	0800e754 	.word	0x0800e754
 800b638:	0800e7ba 	.word	0x0800e7ba
 800b63c:	0800e7be 	.word	0x0800e7be
 800b640:	00000000 	.word	0x00000000
 800b644:	0800b3f7 	.word	0x0800b3f7

0800b648 <_printf_common>:
 800b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64c:	4691      	mov	r9, r2
 800b64e:	461f      	mov	r7, r3
 800b650:	688a      	ldr	r2, [r1, #8]
 800b652:	690b      	ldr	r3, [r1, #16]
 800b654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b658:	4293      	cmp	r3, r2
 800b65a:	bfb8      	it	lt
 800b65c:	4613      	movlt	r3, r2
 800b65e:	f8c9 3000 	str.w	r3, [r9]
 800b662:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b666:	4606      	mov	r6, r0
 800b668:	460c      	mov	r4, r1
 800b66a:	b112      	cbz	r2, 800b672 <_printf_common+0x2a>
 800b66c:	3301      	adds	r3, #1
 800b66e:	f8c9 3000 	str.w	r3, [r9]
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	0699      	lsls	r1, r3, #26
 800b676:	bf42      	ittt	mi
 800b678:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b67c:	3302      	addmi	r3, #2
 800b67e:	f8c9 3000 	strmi.w	r3, [r9]
 800b682:	6825      	ldr	r5, [r4, #0]
 800b684:	f015 0506 	ands.w	r5, r5, #6
 800b688:	d107      	bne.n	800b69a <_printf_common+0x52>
 800b68a:	f104 0a19 	add.w	sl, r4, #25
 800b68e:	68e3      	ldr	r3, [r4, #12]
 800b690:	f8d9 2000 	ldr.w	r2, [r9]
 800b694:	1a9b      	subs	r3, r3, r2
 800b696:	42ab      	cmp	r3, r5
 800b698:	dc28      	bgt.n	800b6ec <_printf_common+0xa4>
 800b69a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b69e:	6822      	ldr	r2, [r4, #0]
 800b6a0:	3300      	adds	r3, #0
 800b6a2:	bf18      	it	ne
 800b6a4:	2301      	movne	r3, #1
 800b6a6:	0692      	lsls	r2, r2, #26
 800b6a8:	d42d      	bmi.n	800b706 <_printf_common+0xbe>
 800b6aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	47c0      	blx	r8
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d020      	beq.n	800b6fa <_printf_common+0xb2>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	68e5      	ldr	r5, [r4, #12]
 800b6bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b6c0:	f003 0306 	and.w	r3, r3, #6
 800b6c4:	2b04      	cmp	r3, #4
 800b6c6:	bf08      	it	eq
 800b6c8:	1aad      	subeq	r5, r5, r2
 800b6ca:	68a3      	ldr	r3, [r4, #8]
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	bf0c      	ite	eq
 800b6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d4:	2500      	movne	r5, #0
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	bfc4      	itt	gt
 800b6da:	1a9b      	subgt	r3, r3, r2
 800b6dc:	18ed      	addgt	r5, r5, r3
 800b6de:	f04f 0900 	mov.w	r9, #0
 800b6e2:	341a      	adds	r4, #26
 800b6e4:	454d      	cmp	r5, r9
 800b6e6:	d11a      	bne.n	800b71e <_printf_common+0xd6>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e008      	b.n	800b6fe <_printf_common+0xb6>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	47c0      	blx	r8
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d103      	bne.n	800b702 <_printf_common+0xba>
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b702:	3501      	adds	r5, #1
 800b704:	e7c3      	b.n	800b68e <_printf_common+0x46>
 800b706:	18e1      	adds	r1, r4, r3
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	2030      	movs	r0, #48	; 0x30
 800b70c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b710:	4422      	add	r2, r4
 800b712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b71a:	3302      	adds	r3, #2
 800b71c:	e7c5      	b.n	800b6aa <_printf_common+0x62>
 800b71e:	2301      	movs	r3, #1
 800b720:	4622      	mov	r2, r4
 800b722:	4639      	mov	r1, r7
 800b724:	4630      	mov	r0, r6
 800b726:	47c0      	blx	r8
 800b728:	3001      	adds	r0, #1
 800b72a:	d0e6      	beq.n	800b6fa <_printf_common+0xb2>
 800b72c:	f109 0901 	add.w	r9, r9, #1
 800b730:	e7d8      	b.n	800b6e4 <_printf_common+0x9c>
	...

0800b734 <_printf_i>:
 800b734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b73c:	460c      	mov	r4, r1
 800b73e:	7e09      	ldrb	r1, [r1, #24]
 800b740:	b085      	sub	sp, #20
 800b742:	296e      	cmp	r1, #110	; 0x6e
 800b744:	4617      	mov	r7, r2
 800b746:	4606      	mov	r6, r0
 800b748:	4698      	mov	r8, r3
 800b74a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b74c:	f000 80b3 	beq.w	800b8b6 <_printf_i+0x182>
 800b750:	d822      	bhi.n	800b798 <_printf_i+0x64>
 800b752:	2963      	cmp	r1, #99	; 0x63
 800b754:	d036      	beq.n	800b7c4 <_printf_i+0x90>
 800b756:	d80a      	bhi.n	800b76e <_printf_i+0x3a>
 800b758:	2900      	cmp	r1, #0
 800b75a:	f000 80b9 	beq.w	800b8d0 <_printf_i+0x19c>
 800b75e:	2958      	cmp	r1, #88	; 0x58
 800b760:	f000 8083 	beq.w	800b86a <_printf_i+0x136>
 800b764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b76c:	e032      	b.n	800b7d4 <_printf_i+0xa0>
 800b76e:	2964      	cmp	r1, #100	; 0x64
 800b770:	d001      	beq.n	800b776 <_printf_i+0x42>
 800b772:	2969      	cmp	r1, #105	; 0x69
 800b774:	d1f6      	bne.n	800b764 <_printf_i+0x30>
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	6813      	ldr	r3, [r2, #0]
 800b77a:	0605      	lsls	r5, r0, #24
 800b77c:	f103 0104 	add.w	r1, r3, #4
 800b780:	d52a      	bpl.n	800b7d8 <_printf_i+0xa4>
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6011      	str	r1, [r2, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	da03      	bge.n	800b792 <_printf_i+0x5e>
 800b78a:	222d      	movs	r2, #45	; 0x2d
 800b78c:	425b      	negs	r3, r3
 800b78e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b792:	486f      	ldr	r0, [pc, #444]	; (800b950 <_printf_i+0x21c>)
 800b794:	220a      	movs	r2, #10
 800b796:	e039      	b.n	800b80c <_printf_i+0xd8>
 800b798:	2973      	cmp	r1, #115	; 0x73
 800b79a:	f000 809d 	beq.w	800b8d8 <_printf_i+0x1a4>
 800b79e:	d808      	bhi.n	800b7b2 <_printf_i+0x7e>
 800b7a0:	296f      	cmp	r1, #111	; 0x6f
 800b7a2:	d020      	beq.n	800b7e6 <_printf_i+0xb2>
 800b7a4:	2970      	cmp	r1, #112	; 0x70
 800b7a6:	d1dd      	bne.n	800b764 <_printf_i+0x30>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	f043 0320 	orr.w	r3, r3, #32
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	e003      	b.n	800b7ba <_printf_i+0x86>
 800b7b2:	2975      	cmp	r1, #117	; 0x75
 800b7b4:	d017      	beq.n	800b7e6 <_printf_i+0xb2>
 800b7b6:	2978      	cmp	r1, #120	; 0x78
 800b7b8:	d1d4      	bne.n	800b764 <_printf_i+0x30>
 800b7ba:	2378      	movs	r3, #120	; 0x78
 800b7bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7c0:	4864      	ldr	r0, [pc, #400]	; (800b954 <_printf_i+0x220>)
 800b7c2:	e055      	b.n	800b870 <_printf_i+0x13c>
 800b7c4:	6813      	ldr	r3, [r2, #0]
 800b7c6:	1d19      	adds	r1, r3, #4
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6011      	str	r1, [r2, #0]
 800b7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e08c      	b.n	800b8f2 <_printf_i+0x1be>
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6011      	str	r1, [r2, #0]
 800b7dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7e0:	bf18      	it	ne
 800b7e2:	b21b      	sxthne	r3, r3
 800b7e4:	e7cf      	b.n	800b786 <_printf_i+0x52>
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	6825      	ldr	r5, [r4, #0]
 800b7ea:	1d18      	adds	r0, r3, #4
 800b7ec:	6010      	str	r0, [r2, #0]
 800b7ee:	0628      	lsls	r0, r5, #24
 800b7f0:	d501      	bpl.n	800b7f6 <_printf_i+0xc2>
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	e002      	b.n	800b7fc <_printf_i+0xc8>
 800b7f6:	0668      	lsls	r0, r5, #25
 800b7f8:	d5fb      	bpl.n	800b7f2 <_printf_i+0xbe>
 800b7fa:	881b      	ldrh	r3, [r3, #0]
 800b7fc:	4854      	ldr	r0, [pc, #336]	; (800b950 <_printf_i+0x21c>)
 800b7fe:	296f      	cmp	r1, #111	; 0x6f
 800b800:	bf14      	ite	ne
 800b802:	220a      	movne	r2, #10
 800b804:	2208      	moveq	r2, #8
 800b806:	2100      	movs	r1, #0
 800b808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b80c:	6865      	ldr	r5, [r4, #4]
 800b80e:	60a5      	str	r5, [r4, #8]
 800b810:	2d00      	cmp	r5, #0
 800b812:	f2c0 8095 	blt.w	800b940 <_printf_i+0x20c>
 800b816:	6821      	ldr	r1, [r4, #0]
 800b818:	f021 0104 	bic.w	r1, r1, #4
 800b81c:	6021      	str	r1, [r4, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d13d      	bne.n	800b89e <_printf_i+0x16a>
 800b822:	2d00      	cmp	r5, #0
 800b824:	f040 808e 	bne.w	800b944 <_printf_i+0x210>
 800b828:	4665      	mov	r5, ip
 800b82a:	2a08      	cmp	r2, #8
 800b82c:	d10b      	bne.n	800b846 <_printf_i+0x112>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	07db      	lsls	r3, r3, #31
 800b832:	d508      	bpl.n	800b846 <_printf_i+0x112>
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	429a      	cmp	r2, r3
 800b83a:	bfde      	ittt	le
 800b83c:	2330      	movle	r3, #48	; 0x30
 800b83e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b842:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b846:	ebac 0305 	sub.w	r3, ip, r5
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	f8cd 8000 	str.w	r8, [sp]
 800b850:	463b      	mov	r3, r7
 800b852:	aa03      	add	r2, sp, #12
 800b854:	4621      	mov	r1, r4
 800b856:	4630      	mov	r0, r6
 800b858:	f7ff fef6 	bl	800b648 <_printf_common>
 800b85c:	3001      	adds	r0, #1
 800b85e:	d14d      	bne.n	800b8fc <_printf_i+0x1c8>
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	b005      	add	sp, #20
 800b866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b86a:	4839      	ldr	r0, [pc, #228]	; (800b950 <_printf_i+0x21c>)
 800b86c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b870:	6813      	ldr	r3, [r2, #0]
 800b872:	6821      	ldr	r1, [r4, #0]
 800b874:	1d1d      	adds	r5, r3, #4
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6015      	str	r5, [r2, #0]
 800b87a:	060a      	lsls	r2, r1, #24
 800b87c:	d50b      	bpl.n	800b896 <_printf_i+0x162>
 800b87e:	07ca      	lsls	r2, r1, #31
 800b880:	bf44      	itt	mi
 800b882:	f041 0120 	orrmi.w	r1, r1, #32
 800b886:	6021      	strmi	r1, [r4, #0]
 800b888:	b91b      	cbnz	r3, 800b892 <_printf_i+0x15e>
 800b88a:	6822      	ldr	r2, [r4, #0]
 800b88c:	f022 0220 	bic.w	r2, r2, #32
 800b890:	6022      	str	r2, [r4, #0]
 800b892:	2210      	movs	r2, #16
 800b894:	e7b7      	b.n	800b806 <_printf_i+0xd2>
 800b896:	064d      	lsls	r5, r1, #25
 800b898:	bf48      	it	mi
 800b89a:	b29b      	uxthmi	r3, r3
 800b89c:	e7ef      	b.n	800b87e <_printf_i+0x14a>
 800b89e:	4665      	mov	r5, ip
 800b8a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8a4:	fb02 3311 	mls	r3, r2, r1, r3
 800b8a8:	5cc3      	ldrb	r3, [r0, r3]
 800b8aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	d1f5      	bne.n	800b8a0 <_printf_i+0x16c>
 800b8b4:	e7b9      	b.n	800b82a <_printf_i+0xf6>
 800b8b6:	6813      	ldr	r3, [r2, #0]
 800b8b8:	6825      	ldr	r5, [r4, #0]
 800b8ba:	6961      	ldr	r1, [r4, #20]
 800b8bc:	1d18      	adds	r0, r3, #4
 800b8be:	6010      	str	r0, [r2, #0]
 800b8c0:	0628      	lsls	r0, r5, #24
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	d501      	bpl.n	800b8ca <_printf_i+0x196>
 800b8c6:	6019      	str	r1, [r3, #0]
 800b8c8:	e002      	b.n	800b8d0 <_printf_i+0x19c>
 800b8ca:	066a      	lsls	r2, r5, #25
 800b8cc:	d5fb      	bpl.n	800b8c6 <_printf_i+0x192>
 800b8ce:	8019      	strh	r1, [r3, #0]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	4665      	mov	r5, ip
 800b8d6:	e7b9      	b.n	800b84c <_printf_i+0x118>
 800b8d8:	6813      	ldr	r3, [r2, #0]
 800b8da:	1d19      	adds	r1, r3, #4
 800b8dc:	6011      	str	r1, [r2, #0]
 800b8de:	681d      	ldr	r5, [r3, #0]
 800b8e0:	6862      	ldr	r2, [r4, #4]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f7f4 fcfb 	bl	80002e0 <memchr>
 800b8ea:	b108      	cbz	r0, 800b8f0 <_printf_i+0x1bc>
 800b8ec:	1b40      	subs	r0, r0, r5
 800b8ee:	6060      	str	r0, [r4, #4]
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8fa:	e7a7      	b.n	800b84c <_printf_i+0x118>
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	462a      	mov	r2, r5
 800b900:	4639      	mov	r1, r7
 800b902:	4630      	mov	r0, r6
 800b904:	47c0      	blx	r8
 800b906:	3001      	adds	r0, #1
 800b908:	d0aa      	beq.n	800b860 <_printf_i+0x12c>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	079b      	lsls	r3, r3, #30
 800b90e:	d413      	bmi.n	800b938 <_printf_i+0x204>
 800b910:	68e0      	ldr	r0, [r4, #12]
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	4298      	cmp	r0, r3
 800b916:	bfb8      	it	lt
 800b918:	4618      	movlt	r0, r3
 800b91a:	e7a3      	b.n	800b864 <_printf_i+0x130>
 800b91c:	2301      	movs	r3, #1
 800b91e:	464a      	mov	r2, r9
 800b920:	4639      	mov	r1, r7
 800b922:	4630      	mov	r0, r6
 800b924:	47c0      	blx	r8
 800b926:	3001      	adds	r0, #1
 800b928:	d09a      	beq.n	800b860 <_printf_i+0x12c>
 800b92a:	3501      	adds	r5, #1
 800b92c:	68e3      	ldr	r3, [r4, #12]
 800b92e:	9a03      	ldr	r2, [sp, #12]
 800b930:	1a9b      	subs	r3, r3, r2
 800b932:	42ab      	cmp	r3, r5
 800b934:	dcf2      	bgt.n	800b91c <_printf_i+0x1e8>
 800b936:	e7eb      	b.n	800b910 <_printf_i+0x1dc>
 800b938:	2500      	movs	r5, #0
 800b93a:	f104 0919 	add.w	r9, r4, #25
 800b93e:	e7f5      	b.n	800b92c <_printf_i+0x1f8>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1ac      	bne.n	800b89e <_printf_i+0x16a>
 800b944:	7803      	ldrb	r3, [r0, #0]
 800b946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b94a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b94e:	e76c      	b.n	800b82a <_printf_i+0xf6>
 800b950:	0800e7c5 	.word	0x0800e7c5
 800b954:	0800e7d6 	.word	0x0800e7d6

0800b958 <__sread>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	460c      	mov	r4, r1
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	f000 f894 	bl	800ba8c <_read_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	bfab      	itete	ge
 800b968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b96a:	89a3      	ldrhlt	r3, [r4, #12]
 800b96c:	181b      	addge	r3, r3, r0
 800b96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b972:	bfac      	ite	ge
 800b974:	6563      	strge	r3, [r4, #84]	; 0x54
 800b976:	81a3      	strhlt	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__swrite>:
 800b97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97e:	461f      	mov	r7, r3
 800b980:	898b      	ldrh	r3, [r1, #12]
 800b982:	05db      	lsls	r3, r3, #23
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4616      	mov	r6, r2
 800b98a:	d505      	bpl.n	800b998 <__swrite+0x1e>
 800b98c:	2302      	movs	r3, #2
 800b98e:	2200      	movs	r2, #0
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	f000 f868 	bl	800ba68 <_lseek_r>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b99e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ae:	f000 b817 	b.w	800b9e0 <_write_r>

0800b9b2 <__sseek>:
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ba:	f000 f855 	bl	800ba68 <_lseek_r>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	bf15      	itete	ne
 800b9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9ce:	81a3      	strheq	r3, [r4, #12]
 800b9d0:	bf18      	it	ne
 800b9d2:	81a3      	strhne	r3, [r4, #12]
 800b9d4:	bd10      	pop	{r4, pc}

0800b9d6 <__sclose>:
 800b9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9da:	f000 b813 	b.w	800ba04 <_close_r>
	...

0800b9e0 <_write_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4c07      	ldr	r4, [pc, #28]	; (800ba00 <_write_r+0x20>)
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	6022      	str	r2, [r4, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7f5 fbc9 	bl	8001186 <_write>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_write_r+0x1e>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_write_r+0x1e>
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	24005250 	.word	0x24005250

0800ba04 <_close_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4c06      	ldr	r4, [pc, #24]	; (800ba20 <_close_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	f7f5 fbd5 	bl	80011be <_close>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_close_r+0x1a>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_close_r+0x1a>
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	24005250 	.word	0x24005250

0800ba24 <_fstat_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4c07      	ldr	r4, [pc, #28]	; (800ba44 <_fstat_r+0x20>)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	f7f5 fbd0 	bl	80011d6 <_fstat>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d102      	bne.n	800ba40 <_fstat_r+0x1c>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	b103      	cbz	r3, 800ba40 <_fstat_r+0x1c>
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	bd38      	pop	{r3, r4, r5, pc}
 800ba42:	bf00      	nop
 800ba44:	24005250 	.word	0x24005250

0800ba48 <_isatty_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4c06      	ldr	r4, [pc, #24]	; (800ba64 <_isatty_r+0x1c>)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	4605      	mov	r5, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	f7f5 fbcf 	bl	80011f6 <_isatty>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_isatty_r+0x1a>
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_isatty_r+0x1a>
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	24005250 	.word	0x24005250

0800ba68 <_lseek_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4c07      	ldr	r4, [pc, #28]	; (800ba88 <_lseek_r+0x20>)
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	4608      	mov	r0, r1
 800ba70:	4611      	mov	r1, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	6022      	str	r2, [r4, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	f7f5 fbc8 	bl	800120c <_lseek>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_lseek_r+0x1e>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_lseek_r+0x1e>
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	24005250 	.word	0x24005250

0800ba8c <_read_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4c07      	ldr	r4, [pc, #28]	; (800baac <_read_r+0x20>)
 800ba90:	4605      	mov	r5, r0
 800ba92:	4608      	mov	r0, r1
 800ba94:	4611      	mov	r1, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	6022      	str	r2, [r4, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f7f5 fb56 	bl	800114c <_read>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_read_r+0x1e>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_read_r+0x1e>
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	24005250 	.word	0x24005250

0800bab0 <expf>:
 800bab0:	ee10 2a10 	vmov	r2, s0
 800bab4:	f240 412a 	movw	r1, #1066	; 0x42a
 800bab8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800babc:	428b      	cmp	r3, r1
 800babe:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800bac2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800bac6:	d92e      	bls.n	800bb26 <expf+0x76>
 800bac8:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800bacc:	d061      	beq.n	800bb92 <expf+0xe2>
 800bace:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800bad2:	d304      	bcc.n	800bade <expf+0x2e>
 800bad4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bad8:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800badc:	4770      	bx	lr
 800bade:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800bb98 <expf+0xe8>
 800bae2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baea:	dd04      	ble.n	800baf6 <expf+0x46>
 800baec:	2000      	movs	r0, #0
 800baee:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800baf2:	f000 b881 	b.w	800bbf8 <__math_oflowf>
 800baf6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800bb9c <expf+0xec>
 800bafa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	d504      	bpl.n	800bb0e <expf+0x5e>
 800bb04:	2000      	movs	r0, #0
 800bb06:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bb0a:	f000 b869 	b.w	800bbe0 <__math_uflowf>
 800bb0e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bba0 <expf+0xf0>
 800bb12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb1a:	d504      	bpl.n	800bb26 <expf+0x76>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800bb22:	f000 b863 	b.w	800bbec <__math_may_uflowf>
 800bb26:	491f      	ldr	r1, [pc, #124]	; (800bba4 <expf+0xf4>)
 800bb28:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bb2c:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800bb30:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800bb34:	eeb0 4b47 	vmov.f64	d4, d7
 800bb38:	eea5 4b06 	vfma.f64	d4, d5, d6
 800bb3c:	ec55 4b14 	vmov	r4, r5, d4
 800bb40:	ee34 7b47 	vsub.f64	d7, d4, d7
 800bb44:	f004 021f 	and.w	r2, r4, #31
 800bb48:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bb4c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bb50:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800bb54:	e9d2 4500 	ldrd	r4, r5, [r2]
 800bb58:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bb5c:	ee14 0a10 	vmov	r0, s8
 800bb60:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800bb64:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800bb68:	f04f 0b00 	mov.w	fp, #0
 800bb6c:	eb1b 0204 	adds.w	r2, fp, r4
 800bb70:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800bb74:	eb4c 0305 	adc.w	r3, ip, r5
 800bb78:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bb7c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800bb80:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bb84:	ec43 2b17 	vmov	d7, r2, r3
 800bb88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb90:	e7a2      	b.n	800bad8 <expf+0x28>
 800bb92:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800bba8 <expf+0xf8>
 800bb96:	e79f      	b.n	800bad8 <expf+0x28>
 800bb98:	42b17217 	.word	0x42b17217
 800bb9c:	c2cff1b4 	.word	0xc2cff1b4
 800bba0:	c2ce8ecf 	.word	0xc2ce8ecf
 800bba4:	0800e7e8 	.word	0x0800e7e8
 800bba8:	00000000 	.word	0x00000000

0800bbac <with_errnof>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	ed2d 8b02 	vpush	{d8}
 800bbb2:	eeb0 8a40 	vmov.f32	s16, s0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	f7fe fff4 	bl	800aba4 <__errno>
 800bbbc:	eeb0 0a48 	vmov.f32	s0, s16
 800bbc0:	ecbd 8b02 	vpop	{d8}
 800bbc4:	6004      	str	r4, [r0, #0]
 800bbc6:	bd10      	pop	{r4, pc}

0800bbc8 <xflowf>:
 800bbc8:	b130      	cbz	r0, 800bbd8 <xflowf+0x10>
 800bbca:	eef1 7a40 	vneg.f32	s15, s0
 800bbce:	2022      	movs	r0, #34	; 0x22
 800bbd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bbd4:	f7ff bfea 	b.w	800bbac <with_errnof>
 800bbd8:	eef0 7a40 	vmov.f32	s15, s0
 800bbdc:	e7f7      	b.n	800bbce <xflowf+0x6>
	...

0800bbe0 <__math_uflowf>:
 800bbe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bbe8 <__math_uflowf+0x8>
 800bbe4:	f7ff bff0 	b.w	800bbc8 <xflowf>
 800bbe8:	10000000 	.word	0x10000000

0800bbec <__math_may_uflowf>:
 800bbec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bbf4 <__math_may_uflowf+0x8>
 800bbf0:	f7ff bfea 	b.w	800bbc8 <xflowf>
 800bbf4:	1a200000 	.word	0x1a200000

0800bbf8 <__math_oflowf>:
 800bbf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc00 <__math_oflowf+0x8>
 800bbfc:	f7ff bfe4 	b.w	800bbc8 <xflowf>
 800bc00:	70000000 	.word	0x70000000

0800bc04 <_init>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	bf00      	nop
 800bc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0a:	bc08      	pop	{r3}
 800bc0c:	469e      	mov	lr, r3
 800bc0e:	4770      	bx	lr

0800bc10 <_fini>:
 800bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc12:	bf00      	nop
 800bc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc16:	bc08      	pop	{r3}
 800bc18:	469e      	mov	lr, r3
 800bc1a:	4770      	bx	lr
